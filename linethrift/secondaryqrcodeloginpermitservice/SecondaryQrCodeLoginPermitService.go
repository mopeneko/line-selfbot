// Code generated by Thrift Compiler (0.14.1). DO NOT EDIT.

package secondaryqrcodeloginpermitservice

import(
	"bytes"
	"context"
	"fmt"
	"time"
	"github.com/apache/thrift/lib/go/thrift"
	"secondaryqrcodeloginservice"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

var _ = secondaryqrcodeloginservice.GoUnusedProtection__
type VerifyQrCodeResponse struct {
}

func NewVerifyQrCodeResponse() *VerifyQrCodeResponse {
  return &VerifyQrCodeResponse{}
}

func (p *VerifyQrCodeResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VerifyQrCodeResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "VerifyQrCodeResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VerifyQrCodeResponse) Equals(other *VerifyQrCodeResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *VerifyQrCodeResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VerifyQrCodeResponse(%+v)", *p)
}

// Attributes:
//  - AuthSessionId
//  - MetaData
type VerifyQrCodeRequest struct {
  AuthSessionId string `thrift:"authSessionId,1" db:"authSessionId" json:"authSessionId"`
  MetaData map[string]string `thrift:"metaData,2" db:"metaData" json:"metaData"`
}

func NewVerifyQrCodeRequest() *VerifyQrCodeRequest {
  return &VerifyQrCodeRequest{}
}


func (p *VerifyQrCodeRequest) GetAuthSessionId() string {
  return p.AuthSessionId
}

func (p *VerifyQrCodeRequest) GetMetaData() map[string]string {
  return p.MetaData
}
func (p *VerifyQrCodeRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VerifyQrCodeRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AuthSessionId = v
}
  return nil
}

func (p *VerifyQrCodeRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.MetaData =  tMap
  for i := 0; i < size; i ++ {
var _key0 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key0 = v
}
var _val1 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val1 = v
}
    p.MetaData[_key0] = _val1
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *VerifyQrCodeRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "VerifyQrCodeRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VerifyQrCodeRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "authSessionId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authSessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AuthSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authSessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authSessionId: ", p), err) }
  return err
}

func (p *VerifyQrCodeRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "metaData", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:metaData: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.MetaData)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.MetaData {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:metaData: ", p), err) }
  return err
}

func (p *VerifyQrCodeRequest) Equals(other *VerifyQrCodeRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AuthSessionId != other.AuthSessionId { return false }
  if len(p.MetaData) != len(other.MetaData) { return false }
  for k, _tgt := range p.MetaData {
    _src2 := other.MetaData[k]
    if _tgt != _src2 { return false }
  }
  return true
}

func (p *VerifyQrCodeRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VerifyQrCodeRequest(%+v)", *p)
}

type CancelPinCodeResponse struct {
}

func NewCancelPinCodeResponse() *CancelPinCodeResponse {
  return &CancelPinCodeResponse{}
}

func (p *CancelPinCodeResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CancelPinCodeResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CancelPinCodeResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CancelPinCodeResponse) Equals(other *CancelPinCodeResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *CancelPinCodeResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CancelPinCodeResponse(%+v)", *p)
}

// Attributes:
//  - AuthSessionId
type CancelPinCodeRequest struct {
  AuthSessionId string `thrift:"authSessionId,1" db:"authSessionId" json:"authSessionId"`
}

func NewCancelPinCodeRequest() *CancelPinCodeRequest {
  return &CancelPinCodeRequest{}
}


func (p *CancelPinCodeRequest) GetAuthSessionId() string {
  return p.AuthSessionId
}
func (p *CancelPinCodeRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CancelPinCodeRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AuthSessionId = v
}
  return nil
}

func (p *CancelPinCodeRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CancelPinCodeRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CancelPinCodeRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "authSessionId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authSessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AuthSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authSessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authSessionId: ", p), err) }
  return err
}

func (p *CancelPinCodeRequest) Equals(other *CancelPinCodeRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AuthSessionId != other.AuthSessionId { return false }
  return true
}

func (p *CancelPinCodeRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CancelPinCodeRequest(%+v)", *p)
}

type VerifyPinCodeResponse struct {
}

func NewVerifyPinCodeResponse() *VerifyPinCodeResponse {
  return &VerifyPinCodeResponse{}
}

func (p *VerifyPinCodeResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VerifyPinCodeResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "VerifyPinCodeResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VerifyPinCodeResponse) Equals(other *VerifyPinCodeResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *VerifyPinCodeResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VerifyPinCodeResponse(%+v)", *p)
}

// Attributes:
//  - AuthSessionId
//  - PinCode
type VerifyPinCodeRequest struct {
  AuthSessionId string `thrift:"authSessionId,1" db:"authSessionId" json:"authSessionId"`
  PinCode string `thrift:"pinCode,2" db:"pinCode" json:"pinCode"`
}

func NewVerifyPinCodeRequest() *VerifyPinCodeRequest {
  return &VerifyPinCodeRequest{}
}


func (p *VerifyPinCodeRequest) GetAuthSessionId() string {
  return p.AuthSessionId
}

func (p *VerifyPinCodeRequest) GetPinCode() string {
  return p.PinCode
}
func (p *VerifyPinCodeRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VerifyPinCodeRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AuthSessionId = v
}
  return nil
}

func (p *VerifyPinCodeRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PinCode = v
}
  return nil
}

func (p *VerifyPinCodeRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "VerifyPinCodeRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VerifyPinCodeRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "authSessionId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authSessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AuthSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authSessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authSessionId: ", p), err) }
  return err
}

func (p *VerifyPinCodeRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pinCode", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pinCode: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PinCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pinCode (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pinCode: ", p), err) }
  return err
}

func (p *VerifyPinCodeRequest) Equals(other *VerifyPinCodeRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AuthSessionId != other.AuthSessionId { return false }
  if p.PinCode != other.PinCode { return false }
  return true
}

func (p *VerifyPinCodeRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VerifyPinCodeRequest(%+v)", *p)
}

// Attributes:
//  - AppType
//  - AccessLocation
type GetLoginActorContextResponse struct {
  AppType string `thrift:"appType,1" db:"appType" json:"appType"`
  AccessLocation string `thrift:"accessLocation,2" db:"accessLocation" json:"accessLocation"`
}

func NewGetLoginActorContextResponse() *GetLoginActorContextResponse {
  return &GetLoginActorContextResponse{}
}


func (p *GetLoginActorContextResponse) GetAppType() string {
  return p.AppType
}

func (p *GetLoginActorContextResponse) GetAccessLocation() string {
  return p.AccessLocation
}
func (p *GetLoginActorContextResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetLoginActorContextResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AppType = v
}
  return nil
}

func (p *GetLoginActorContextResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AccessLocation = v
}
  return nil
}

func (p *GetLoginActorContextResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetLoginActorContextResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetLoginActorContextResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "appType", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:appType: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appType (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:appType: ", p), err) }
  return err
}

func (p *GetLoginActorContextResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "accessLocation", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:accessLocation: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AccessLocation)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accessLocation (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:accessLocation: ", p), err) }
  return err
}

func (p *GetLoginActorContextResponse) Equals(other *GetLoginActorContextResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AppType != other.AppType { return false }
  if p.AccessLocation != other.AccessLocation { return false }
  return true
}

func (p *GetLoginActorContextResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetLoginActorContextResponse(%+v)", *p)
}

// Attributes:
//  - AuthSessionId
type GetLoginActorContextRequest struct {
  AuthSessionId string `thrift:"authSessionId,1" db:"authSessionId" json:"authSessionId"`
}

func NewGetLoginActorContextRequest() *GetLoginActorContextRequest {
  return &GetLoginActorContextRequest{}
}


func (p *GetLoginActorContextRequest) GetAuthSessionId() string {
  return p.AuthSessionId
}
func (p *GetLoginActorContextRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetLoginActorContextRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AuthSessionId = v
}
  return nil
}

func (p *GetLoginActorContextRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetLoginActorContextRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetLoginActorContextRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "authSessionId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authSessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AuthSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authSessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authSessionId: ", p), err) }
  return err
}

func (p *GetLoginActorContextRequest) Equals(other *GetLoginActorContextRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AuthSessionId != other.AuthSessionId { return false }
  return true
}

func (p *GetLoginActorContextRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetLoginActorContextRequest(%+v)", *p)
}

type SecondaryQrCodeLoginPermitService interface {
  // Parameters:
  //  - Request
  VerifyQrCode(ctx context.Context, request *VerifyQrCodeRequest) (_r *VerifyQrCodeResponse, _err error)
  // Parameters:
  //  - Request
  CancelPinCode(ctx context.Context, request *CancelPinCodeRequest) (_r *CancelPinCodeResponse, _err error)
  // Parameters:
  //  - Request
  VerifyPinCode(ctx context.Context, request *VerifyPinCodeRequest) (_r *VerifyPinCodeResponse, _err error)
  // Parameters:
  //  - Request
  GetLoginActorContext(ctx context.Context, request *GetLoginActorContextRequest) (_r *GetLoginActorContextResponse, _err error)
}

type SecondaryQrCodeLoginPermitServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewSecondaryQrCodeLoginPermitServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *SecondaryQrCodeLoginPermitServiceClient {
  return &SecondaryQrCodeLoginPermitServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewSecondaryQrCodeLoginPermitServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *SecondaryQrCodeLoginPermitServiceClient {
  return &SecondaryQrCodeLoginPermitServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewSecondaryQrCodeLoginPermitServiceClient(c thrift.TClient) *SecondaryQrCodeLoginPermitServiceClient {
  return &SecondaryQrCodeLoginPermitServiceClient{
    c: c,
  }
}

func (p *SecondaryQrCodeLoginPermitServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *SecondaryQrCodeLoginPermitServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *SecondaryQrCodeLoginPermitServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - Request
func (p *SecondaryQrCodeLoginPermitServiceClient) VerifyQrCode(ctx context.Context, request *VerifyQrCodeRequest) (_r *VerifyQrCodeResponse, _err error) {
  var _args3 SecondaryQrCodeLoginPermitServiceVerifyQrCodeArgs
  _args3.Request = request
  var _result5 SecondaryQrCodeLoginPermitServiceVerifyQrCodeResult
  var _meta4 thrift.ResponseMeta
  _meta4, _err = p.Client_().Call(ctx, "verifyQrCode", &_args3, &_result5)
  p.SetLastResponseMeta_(_meta4)
  if _err != nil {
    return
  }
  switch {
  case _result5.E!= nil:
    return _r, _result5.E
  }

  return _result5.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *SecondaryQrCodeLoginPermitServiceClient) CancelPinCode(ctx context.Context, request *CancelPinCodeRequest) (_r *CancelPinCodeResponse, _err error) {
  var _args6 SecondaryQrCodeLoginPermitServiceCancelPinCodeArgs
  _args6.Request = request
  var _result8 SecondaryQrCodeLoginPermitServiceCancelPinCodeResult
  var _meta7 thrift.ResponseMeta
  _meta7, _err = p.Client_().Call(ctx, "cancelPinCode", &_args6, &_result8)
  p.SetLastResponseMeta_(_meta7)
  if _err != nil {
    return
  }
  switch {
  case _result8.E!= nil:
    return _r, _result8.E
  }

  return _result8.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *SecondaryQrCodeLoginPermitServiceClient) VerifyPinCode(ctx context.Context, request *VerifyPinCodeRequest) (_r *VerifyPinCodeResponse, _err error) {
  var _args9 SecondaryQrCodeLoginPermitServiceVerifyPinCodeArgs
  _args9.Request = request
  var _result11 SecondaryQrCodeLoginPermitServiceVerifyPinCodeResult
  var _meta10 thrift.ResponseMeta
  _meta10, _err = p.Client_().Call(ctx, "verifyPinCode", &_args9, &_result11)
  p.SetLastResponseMeta_(_meta10)
  if _err != nil {
    return
  }
  switch {
  case _result11.E!= nil:
    return _r, _result11.E
  }

  return _result11.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *SecondaryQrCodeLoginPermitServiceClient) GetLoginActorContext(ctx context.Context, request *GetLoginActorContextRequest) (_r *GetLoginActorContextResponse, _err error) {
  var _args12 SecondaryQrCodeLoginPermitServiceGetLoginActorContextArgs
  _args12.Request = request
  var _result14 SecondaryQrCodeLoginPermitServiceGetLoginActorContextResult
  var _meta13 thrift.ResponseMeta
  _meta13, _err = p.Client_().Call(ctx, "getLoginActorContext", &_args12, &_result14)
  p.SetLastResponseMeta_(_meta13)
  if _err != nil {
    return
  }
  switch {
  case _result14.E!= nil:
    return _r, _result14.E
  }

  return _result14.GetSuccess(), nil
}

type SecondaryQrCodeLoginPermitServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler SecondaryQrCodeLoginPermitService
}

func (p *SecondaryQrCodeLoginPermitServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *SecondaryQrCodeLoginPermitServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *SecondaryQrCodeLoginPermitServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewSecondaryQrCodeLoginPermitServiceProcessor(handler SecondaryQrCodeLoginPermitService) *SecondaryQrCodeLoginPermitServiceProcessor {

  self15 := &SecondaryQrCodeLoginPermitServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self15.processorMap["verifyQrCode"] = &secondaryQrCodeLoginPermitServiceProcessorVerifyQrCode{handler:handler}
  self15.processorMap["cancelPinCode"] = &secondaryQrCodeLoginPermitServiceProcessorCancelPinCode{handler:handler}
  self15.processorMap["verifyPinCode"] = &secondaryQrCodeLoginPermitServiceProcessorVerifyPinCode{handler:handler}
  self15.processorMap["getLoginActorContext"] = &secondaryQrCodeLoginPermitServiceProcessorGetLoginActorContext{handler:handler}
return self15
}

func (p *SecondaryQrCodeLoginPermitServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x16 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x16.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x16

}

type secondaryQrCodeLoginPermitServiceProcessorVerifyQrCode struct {
  handler SecondaryQrCodeLoginPermitService
}

func (p *secondaryQrCodeLoginPermitServiceProcessorVerifyQrCode) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SecondaryQrCodeLoginPermitServiceVerifyQrCodeArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "verifyQrCode", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SecondaryQrCodeLoginPermitServiceVerifyQrCodeResult{}
  var retval *VerifyQrCodeResponse
  if retval, err2 = p.handler.VerifyQrCode(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *secondaryqrcodeloginservice.SecondaryQrCodeException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing verifyQrCode: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "verifyQrCode", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "verifyQrCode", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type secondaryQrCodeLoginPermitServiceProcessorCancelPinCode struct {
  handler SecondaryQrCodeLoginPermitService
}

func (p *secondaryQrCodeLoginPermitServiceProcessorCancelPinCode) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SecondaryQrCodeLoginPermitServiceCancelPinCodeArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "cancelPinCode", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SecondaryQrCodeLoginPermitServiceCancelPinCodeResult{}
  var retval *CancelPinCodeResponse
  if retval, err2 = p.handler.CancelPinCode(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *secondaryqrcodeloginservice.SecondaryQrCodeException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing cancelPinCode: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "cancelPinCode", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "cancelPinCode", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type secondaryQrCodeLoginPermitServiceProcessorVerifyPinCode struct {
  handler SecondaryQrCodeLoginPermitService
}

func (p *secondaryQrCodeLoginPermitServiceProcessorVerifyPinCode) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SecondaryQrCodeLoginPermitServiceVerifyPinCodeArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "verifyPinCode", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SecondaryQrCodeLoginPermitServiceVerifyPinCodeResult{}
  var retval *VerifyPinCodeResponse
  if retval, err2 = p.handler.VerifyPinCode(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *secondaryqrcodeloginservice.SecondaryQrCodeException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing verifyPinCode: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "verifyPinCode", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "verifyPinCode", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type secondaryQrCodeLoginPermitServiceProcessorGetLoginActorContext struct {
  handler SecondaryQrCodeLoginPermitService
}

func (p *secondaryQrCodeLoginPermitServiceProcessorGetLoginActorContext) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SecondaryQrCodeLoginPermitServiceGetLoginActorContextArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getLoginActorContext", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SecondaryQrCodeLoginPermitServiceGetLoginActorContextResult{}
  var retval *GetLoginActorContextResponse
  if retval, err2 = p.handler.GetLoginActorContext(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *secondaryqrcodeloginservice.SecondaryQrCodeException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getLoginActorContext: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getLoginActorContext", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getLoginActorContext", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Request
type SecondaryQrCodeLoginPermitServiceVerifyQrCodeArgs struct {
  Request *VerifyQrCodeRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSecondaryQrCodeLoginPermitServiceVerifyQrCodeArgs() *SecondaryQrCodeLoginPermitServiceVerifyQrCodeArgs {
  return &SecondaryQrCodeLoginPermitServiceVerifyQrCodeArgs{}
}

var SecondaryQrCodeLoginPermitServiceVerifyQrCodeArgs_Request_DEFAULT *VerifyQrCodeRequest
func (p *SecondaryQrCodeLoginPermitServiceVerifyQrCodeArgs) GetRequest() *VerifyQrCodeRequest {
  if !p.IsSetRequest() {
    return SecondaryQrCodeLoginPermitServiceVerifyQrCodeArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SecondaryQrCodeLoginPermitServiceVerifyQrCodeArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SecondaryQrCodeLoginPermitServiceVerifyQrCodeArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SecondaryQrCodeLoginPermitServiceVerifyQrCodeArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &VerifyQrCodeRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SecondaryQrCodeLoginPermitServiceVerifyQrCodeArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "verifyQrCode_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SecondaryQrCodeLoginPermitServiceVerifyQrCodeArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SecondaryQrCodeLoginPermitServiceVerifyQrCodeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SecondaryQrCodeLoginPermitServiceVerifyQrCodeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SecondaryQrCodeLoginPermitServiceVerifyQrCodeResult struct {
  Success *VerifyQrCodeResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *secondaryqrcodeloginservice.SecondaryQrCodeException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSecondaryQrCodeLoginPermitServiceVerifyQrCodeResult() *SecondaryQrCodeLoginPermitServiceVerifyQrCodeResult {
  return &SecondaryQrCodeLoginPermitServiceVerifyQrCodeResult{}
}

var SecondaryQrCodeLoginPermitServiceVerifyQrCodeResult_Success_DEFAULT *VerifyQrCodeResponse
func (p *SecondaryQrCodeLoginPermitServiceVerifyQrCodeResult) GetSuccess() *VerifyQrCodeResponse {
  if !p.IsSetSuccess() {
    return SecondaryQrCodeLoginPermitServiceVerifyQrCodeResult_Success_DEFAULT
  }
return p.Success
}
var SecondaryQrCodeLoginPermitServiceVerifyQrCodeResult_E_DEFAULT *secondaryqrcodeloginservice.SecondaryQrCodeException
func (p *SecondaryQrCodeLoginPermitServiceVerifyQrCodeResult) GetE() *secondaryqrcodeloginservice.SecondaryQrCodeException {
  if !p.IsSetE() {
    return SecondaryQrCodeLoginPermitServiceVerifyQrCodeResult_E_DEFAULT
  }
return p.E
}
func (p *SecondaryQrCodeLoginPermitServiceVerifyQrCodeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SecondaryQrCodeLoginPermitServiceVerifyQrCodeResult) IsSetE() bool {
  return p.E != nil
}

func (p *SecondaryQrCodeLoginPermitServiceVerifyQrCodeResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SecondaryQrCodeLoginPermitServiceVerifyQrCodeResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &VerifyQrCodeResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SecondaryQrCodeLoginPermitServiceVerifyQrCodeResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &secondaryqrcodeloginservice.SecondaryQrCodeException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SecondaryQrCodeLoginPermitServiceVerifyQrCodeResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "verifyQrCode_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SecondaryQrCodeLoginPermitServiceVerifyQrCodeResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SecondaryQrCodeLoginPermitServiceVerifyQrCodeResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SecondaryQrCodeLoginPermitServiceVerifyQrCodeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SecondaryQrCodeLoginPermitServiceVerifyQrCodeResult(%+v)", *p)
}

// Attributes:
//  - Request
type SecondaryQrCodeLoginPermitServiceCancelPinCodeArgs struct {
  Request *CancelPinCodeRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSecondaryQrCodeLoginPermitServiceCancelPinCodeArgs() *SecondaryQrCodeLoginPermitServiceCancelPinCodeArgs {
  return &SecondaryQrCodeLoginPermitServiceCancelPinCodeArgs{}
}

var SecondaryQrCodeLoginPermitServiceCancelPinCodeArgs_Request_DEFAULT *CancelPinCodeRequest
func (p *SecondaryQrCodeLoginPermitServiceCancelPinCodeArgs) GetRequest() *CancelPinCodeRequest {
  if !p.IsSetRequest() {
    return SecondaryQrCodeLoginPermitServiceCancelPinCodeArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SecondaryQrCodeLoginPermitServiceCancelPinCodeArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SecondaryQrCodeLoginPermitServiceCancelPinCodeArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SecondaryQrCodeLoginPermitServiceCancelPinCodeArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &CancelPinCodeRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SecondaryQrCodeLoginPermitServiceCancelPinCodeArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "cancelPinCode_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SecondaryQrCodeLoginPermitServiceCancelPinCodeArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SecondaryQrCodeLoginPermitServiceCancelPinCodeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SecondaryQrCodeLoginPermitServiceCancelPinCodeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SecondaryQrCodeLoginPermitServiceCancelPinCodeResult struct {
  Success *CancelPinCodeResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *secondaryqrcodeloginservice.SecondaryQrCodeException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSecondaryQrCodeLoginPermitServiceCancelPinCodeResult() *SecondaryQrCodeLoginPermitServiceCancelPinCodeResult {
  return &SecondaryQrCodeLoginPermitServiceCancelPinCodeResult{}
}

var SecondaryQrCodeLoginPermitServiceCancelPinCodeResult_Success_DEFAULT *CancelPinCodeResponse
func (p *SecondaryQrCodeLoginPermitServiceCancelPinCodeResult) GetSuccess() *CancelPinCodeResponse {
  if !p.IsSetSuccess() {
    return SecondaryQrCodeLoginPermitServiceCancelPinCodeResult_Success_DEFAULT
  }
return p.Success
}
var SecondaryQrCodeLoginPermitServiceCancelPinCodeResult_E_DEFAULT *secondaryqrcodeloginservice.SecondaryQrCodeException
func (p *SecondaryQrCodeLoginPermitServiceCancelPinCodeResult) GetE() *secondaryqrcodeloginservice.SecondaryQrCodeException {
  if !p.IsSetE() {
    return SecondaryQrCodeLoginPermitServiceCancelPinCodeResult_E_DEFAULT
  }
return p.E
}
func (p *SecondaryQrCodeLoginPermitServiceCancelPinCodeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SecondaryQrCodeLoginPermitServiceCancelPinCodeResult) IsSetE() bool {
  return p.E != nil
}

func (p *SecondaryQrCodeLoginPermitServiceCancelPinCodeResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SecondaryQrCodeLoginPermitServiceCancelPinCodeResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &CancelPinCodeResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SecondaryQrCodeLoginPermitServiceCancelPinCodeResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &secondaryqrcodeloginservice.SecondaryQrCodeException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SecondaryQrCodeLoginPermitServiceCancelPinCodeResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "cancelPinCode_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SecondaryQrCodeLoginPermitServiceCancelPinCodeResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SecondaryQrCodeLoginPermitServiceCancelPinCodeResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SecondaryQrCodeLoginPermitServiceCancelPinCodeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SecondaryQrCodeLoginPermitServiceCancelPinCodeResult(%+v)", *p)
}

// Attributes:
//  - Request
type SecondaryQrCodeLoginPermitServiceVerifyPinCodeArgs struct {
  Request *VerifyPinCodeRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSecondaryQrCodeLoginPermitServiceVerifyPinCodeArgs() *SecondaryQrCodeLoginPermitServiceVerifyPinCodeArgs {
  return &SecondaryQrCodeLoginPermitServiceVerifyPinCodeArgs{}
}

var SecondaryQrCodeLoginPermitServiceVerifyPinCodeArgs_Request_DEFAULT *VerifyPinCodeRequest
func (p *SecondaryQrCodeLoginPermitServiceVerifyPinCodeArgs) GetRequest() *VerifyPinCodeRequest {
  if !p.IsSetRequest() {
    return SecondaryQrCodeLoginPermitServiceVerifyPinCodeArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SecondaryQrCodeLoginPermitServiceVerifyPinCodeArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SecondaryQrCodeLoginPermitServiceVerifyPinCodeArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SecondaryQrCodeLoginPermitServiceVerifyPinCodeArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &VerifyPinCodeRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SecondaryQrCodeLoginPermitServiceVerifyPinCodeArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "verifyPinCode_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SecondaryQrCodeLoginPermitServiceVerifyPinCodeArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SecondaryQrCodeLoginPermitServiceVerifyPinCodeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SecondaryQrCodeLoginPermitServiceVerifyPinCodeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SecondaryQrCodeLoginPermitServiceVerifyPinCodeResult struct {
  Success *VerifyPinCodeResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *secondaryqrcodeloginservice.SecondaryQrCodeException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSecondaryQrCodeLoginPermitServiceVerifyPinCodeResult() *SecondaryQrCodeLoginPermitServiceVerifyPinCodeResult {
  return &SecondaryQrCodeLoginPermitServiceVerifyPinCodeResult{}
}

var SecondaryQrCodeLoginPermitServiceVerifyPinCodeResult_Success_DEFAULT *VerifyPinCodeResponse
func (p *SecondaryQrCodeLoginPermitServiceVerifyPinCodeResult) GetSuccess() *VerifyPinCodeResponse {
  if !p.IsSetSuccess() {
    return SecondaryQrCodeLoginPermitServiceVerifyPinCodeResult_Success_DEFAULT
  }
return p.Success
}
var SecondaryQrCodeLoginPermitServiceVerifyPinCodeResult_E_DEFAULT *secondaryqrcodeloginservice.SecondaryQrCodeException
func (p *SecondaryQrCodeLoginPermitServiceVerifyPinCodeResult) GetE() *secondaryqrcodeloginservice.SecondaryQrCodeException {
  if !p.IsSetE() {
    return SecondaryQrCodeLoginPermitServiceVerifyPinCodeResult_E_DEFAULT
  }
return p.E
}
func (p *SecondaryQrCodeLoginPermitServiceVerifyPinCodeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SecondaryQrCodeLoginPermitServiceVerifyPinCodeResult) IsSetE() bool {
  return p.E != nil
}

func (p *SecondaryQrCodeLoginPermitServiceVerifyPinCodeResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SecondaryQrCodeLoginPermitServiceVerifyPinCodeResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &VerifyPinCodeResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SecondaryQrCodeLoginPermitServiceVerifyPinCodeResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &secondaryqrcodeloginservice.SecondaryQrCodeException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SecondaryQrCodeLoginPermitServiceVerifyPinCodeResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "verifyPinCode_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SecondaryQrCodeLoginPermitServiceVerifyPinCodeResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SecondaryQrCodeLoginPermitServiceVerifyPinCodeResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SecondaryQrCodeLoginPermitServiceVerifyPinCodeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SecondaryQrCodeLoginPermitServiceVerifyPinCodeResult(%+v)", *p)
}

// Attributes:
//  - Request
type SecondaryQrCodeLoginPermitServiceGetLoginActorContextArgs struct {
  Request *GetLoginActorContextRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSecondaryQrCodeLoginPermitServiceGetLoginActorContextArgs() *SecondaryQrCodeLoginPermitServiceGetLoginActorContextArgs {
  return &SecondaryQrCodeLoginPermitServiceGetLoginActorContextArgs{}
}

var SecondaryQrCodeLoginPermitServiceGetLoginActorContextArgs_Request_DEFAULT *GetLoginActorContextRequest
func (p *SecondaryQrCodeLoginPermitServiceGetLoginActorContextArgs) GetRequest() *GetLoginActorContextRequest {
  if !p.IsSetRequest() {
    return SecondaryQrCodeLoginPermitServiceGetLoginActorContextArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SecondaryQrCodeLoginPermitServiceGetLoginActorContextArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SecondaryQrCodeLoginPermitServiceGetLoginActorContextArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SecondaryQrCodeLoginPermitServiceGetLoginActorContextArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &GetLoginActorContextRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SecondaryQrCodeLoginPermitServiceGetLoginActorContextArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getLoginActorContext_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SecondaryQrCodeLoginPermitServiceGetLoginActorContextArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SecondaryQrCodeLoginPermitServiceGetLoginActorContextArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SecondaryQrCodeLoginPermitServiceGetLoginActorContextArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SecondaryQrCodeLoginPermitServiceGetLoginActorContextResult struct {
  Success *GetLoginActorContextResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *secondaryqrcodeloginservice.SecondaryQrCodeException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSecondaryQrCodeLoginPermitServiceGetLoginActorContextResult() *SecondaryQrCodeLoginPermitServiceGetLoginActorContextResult {
  return &SecondaryQrCodeLoginPermitServiceGetLoginActorContextResult{}
}

var SecondaryQrCodeLoginPermitServiceGetLoginActorContextResult_Success_DEFAULT *GetLoginActorContextResponse
func (p *SecondaryQrCodeLoginPermitServiceGetLoginActorContextResult) GetSuccess() *GetLoginActorContextResponse {
  if !p.IsSetSuccess() {
    return SecondaryQrCodeLoginPermitServiceGetLoginActorContextResult_Success_DEFAULT
  }
return p.Success
}
var SecondaryQrCodeLoginPermitServiceGetLoginActorContextResult_E_DEFAULT *secondaryqrcodeloginservice.SecondaryQrCodeException
func (p *SecondaryQrCodeLoginPermitServiceGetLoginActorContextResult) GetE() *secondaryqrcodeloginservice.SecondaryQrCodeException {
  if !p.IsSetE() {
    return SecondaryQrCodeLoginPermitServiceGetLoginActorContextResult_E_DEFAULT
  }
return p.E
}
func (p *SecondaryQrCodeLoginPermitServiceGetLoginActorContextResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SecondaryQrCodeLoginPermitServiceGetLoginActorContextResult) IsSetE() bool {
  return p.E != nil
}

func (p *SecondaryQrCodeLoginPermitServiceGetLoginActorContextResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SecondaryQrCodeLoginPermitServiceGetLoginActorContextResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetLoginActorContextResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SecondaryQrCodeLoginPermitServiceGetLoginActorContextResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &secondaryqrcodeloginservice.SecondaryQrCodeException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SecondaryQrCodeLoginPermitServiceGetLoginActorContextResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getLoginActorContext_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SecondaryQrCodeLoginPermitServiceGetLoginActorContextResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SecondaryQrCodeLoginPermitServiceGetLoginActorContextResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SecondaryQrCodeLoginPermitServiceGetLoginActorContextResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SecondaryQrCodeLoginPermitServiceGetLoginActorContextResult(%+v)", *p)
}


