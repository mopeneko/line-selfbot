// Code generated by Thrift Compiler (0.14.1). DO NOT EDIT.

package channelservice

import(
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"time"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

type ChannelErrorCode int64
const (
  ChannelErrorCode_ILLEGAL_ARGUMENT ChannelErrorCode = 0
  ChannelErrorCode_INTERNAL_ERROR ChannelErrorCode = 1
  ChannelErrorCode_CONNECTION_ERROR ChannelErrorCode = 2
  ChannelErrorCode_AUTHENTICATIONI_FAILED ChannelErrorCode = 3
  ChannelErrorCode_NEED_PERMISSION_APPROVAL ChannelErrorCode = 4
  ChannelErrorCode_COIN_NOT_USABLE ChannelErrorCode = 5
  ChannelErrorCode_WEBVIEW_NOT_ALLOWED ChannelErrorCode = 6
)

func (p ChannelErrorCode) String() string {
  switch p {
  case ChannelErrorCode_ILLEGAL_ARGUMENT: return "ILLEGAL_ARGUMENT"
  case ChannelErrorCode_INTERNAL_ERROR: return "INTERNAL_ERROR"
  case ChannelErrorCode_CONNECTION_ERROR: return "CONNECTION_ERROR"
  case ChannelErrorCode_AUTHENTICATIONI_FAILED: return "AUTHENTICATIONI_FAILED"
  case ChannelErrorCode_NEED_PERMISSION_APPROVAL: return "NEED_PERMISSION_APPROVAL"
  case ChannelErrorCode_COIN_NOT_USABLE: return "COIN_NOT_USABLE"
  case ChannelErrorCode_WEBVIEW_NOT_ALLOWED: return "WEBVIEW_NOT_ALLOWED"
  }
  return "<UNSET>"
}

func ChannelErrorCodeFromString(s string) (ChannelErrorCode, error) {
  switch s {
  case "ILLEGAL_ARGUMENT": return ChannelErrorCode_ILLEGAL_ARGUMENT, nil 
  case "INTERNAL_ERROR": return ChannelErrorCode_INTERNAL_ERROR, nil 
  case "CONNECTION_ERROR": return ChannelErrorCode_CONNECTION_ERROR, nil 
  case "AUTHENTICATIONI_FAILED": return ChannelErrorCode_AUTHENTICATIONI_FAILED, nil 
  case "NEED_PERMISSION_APPROVAL": return ChannelErrorCode_NEED_PERMISSION_APPROVAL, nil 
  case "COIN_NOT_USABLE": return ChannelErrorCode_COIN_NOT_USABLE, nil 
  case "WEBVIEW_NOT_ALLOWED": return ChannelErrorCode_WEBVIEW_NOT_ALLOWED, nil 
  }
  return ChannelErrorCode(0), fmt.Errorf("not a valid ChannelErrorCode string")
}


func ChannelErrorCodePtr(v ChannelErrorCode) *ChannelErrorCode { return &v }

func (p ChannelErrorCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ChannelErrorCode) UnmarshalText(text []byte) error {
q, err := ChannelErrorCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ChannelErrorCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ChannelErrorCode(v)
return nil
}

func (p * ChannelErrorCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - Code
//  - Reason
//  - ParameterMap
type ChannelException struct {
  Code ChannelErrorCode `thrift:"code,1" db:"code" json:"code"`
  Reason string `thrift:"reason,2" db:"reason" json:"reason"`
  ParameterMap map[string]string `thrift:"parameterMap,3" db:"parameterMap" json:"parameterMap"`
}

func NewChannelException() *ChannelException {
  return &ChannelException{}
}


func (p *ChannelException) GetCode() ChannelErrorCode {
  return p.Code
}

func (p *ChannelException) GetReason() string {
  return p.Reason
}

func (p *ChannelException) GetParameterMap() map[string]string {
  return p.ParameterMap
}
func (p *ChannelException) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelException)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ChannelErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *ChannelException)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Reason = v
}
  return nil
}

func (p *ChannelException)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.ParameterMap =  tMap
  for i := 0; i < size; i ++ {
var _key0 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key0 = v
}
var _val1 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val1 = v
}
    p.ParameterMap[_key0] = _val1
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ChannelException) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ChannelException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelException) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ChannelException) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reason", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:reason: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Reason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reason (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:reason: ", p), err) }
  return err
}

func (p *ChannelException) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parameterMap", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:parameterMap: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.ParameterMap)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.ParameterMap {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:parameterMap: ", p), err) }
  return err
}

func (p *ChannelException) Equals(other *ChannelException) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if p.Reason != other.Reason { return false }
  if len(p.ParameterMap) != len(other.ParameterMap) { return false }
  for k, _tgt := range p.ParameterMap {
    _src2 := other.ParameterMap[k]
    if _tgt != _src2 { return false }
  }
  return true
}

func (p *ChannelException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelException(%+v)", *p)
}

func (p *ChannelException) Error() string {
  return p.String()
}

func (ChannelException) TExceptionType() thrift.TExceptionType {
  return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*ChannelException)(nil)

// Attributes:
//  - Token
//  - ObsToken
//  - Expiration
//  - RefreshToken
//  - ChannelAccessToken
type ChannelToken struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  ObsToken string `thrift:"obsToken,2" db:"obsToken" json:"obsToken"`
  Expiration int64 `thrift:"expiration,3" db:"expiration" json:"expiration"`
  RefreshToken string `thrift:"refreshToken,4" db:"refreshToken" json:"refreshToken"`
  ChannelAccessToken string `thrift:"channelAccessToken,5" db:"channelAccessToken" json:"channelAccessToken"`
}

func NewChannelToken() *ChannelToken {
  return &ChannelToken{}
}


func (p *ChannelToken) GetToken() string {
  return p.Token
}

func (p *ChannelToken) GetObsToken() string {
  return p.ObsToken
}

func (p *ChannelToken) GetExpiration() int64 {
  return p.Expiration
}

func (p *ChannelToken) GetRefreshToken() string {
  return p.RefreshToken
}

func (p *ChannelToken) GetChannelAccessToken() string {
  return p.ChannelAccessToken
}
func (p *ChannelToken) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelToken)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *ChannelToken)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ObsToken = v
}
  return nil
}

func (p *ChannelToken)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Expiration = v
}
  return nil
}

func (p *ChannelToken)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.RefreshToken = v
}
  return nil
}

func (p *ChannelToken)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ChannelAccessToken = v
}
  return nil
}

func (p *ChannelToken) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ChannelToken"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelToken) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *ChannelToken) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "obsToken", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:obsToken: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ObsToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.obsToken (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:obsToken: ", p), err) }
  return err
}

func (p *ChannelToken) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "expiration", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:expiration: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Expiration)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.expiration (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:expiration: ", p), err) }
  return err
}

func (p *ChannelToken) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "refreshToken", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:refreshToken: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RefreshToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.refreshToken (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:refreshToken: ", p), err) }
  return err
}

func (p *ChannelToken) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "channelAccessToken", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:channelAccessToken: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChannelAccessToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.channelAccessToken (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:channelAccessToken: ", p), err) }
  return err
}

func (p *ChannelToken) Equals(other *ChannelToken) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Token != other.Token { return false }
  if p.ObsToken != other.ObsToken { return false }
  if p.Expiration != other.Expiration { return false }
  if p.RefreshToken != other.RefreshToken { return false }
  if p.ChannelAccessToken != other.ChannelAccessToken { return false }
  return true
}

func (p *ChannelToken) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelToken(%+v)", *p)
}

// Attributes:
//  - ReturnUrl
//  - OptionalReturnUrl
//  - RedirectConfirmationPageUrl
type WebLoginResponse struct {
  ReturnUrl string `thrift:"returnUrl,1" db:"returnUrl" json:"returnUrl"`
  OptionalReturnUrl string `thrift:"optionalReturnUrl,2" db:"optionalReturnUrl" json:"optionalReturnUrl"`
  RedirectConfirmationPageUrl string `thrift:"redirectConfirmationPageUrl,3" db:"redirectConfirmationPageUrl" json:"redirectConfirmationPageUrl"`
}

func NewWebLoginResponse() *WebLoginResponse {
  return &WebLoginResponse{}
}


func (p *WebLoginResponse) GetReturnUrl() string {
  return p.ReturnUrl
}

func (p *WebLoginResponse) GetOptionalReturnUrl() string {
  return p.OptionalReturnUrl
}

func (p *WebLoginResponse) GetRedirectConfirmationPageUrl() string {
  return p.RedirectConfirmationPageUrl
}
func (p *WebLoginResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WebLoginResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReturnUrl = v
}
  return nil
}

func (p *WebLoginResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.OptionalReturnUrl = v
}
  return nil
}

func (p *WebLoginResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RedirectConfirmationPageUrl = v
}
  return nil
}

func (p *WebLoginResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WebLoginResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WebLoginResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "returnUrl", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:returnUrl: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ReturnUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.returnUrl (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:returnUrl: ", p), err) }
  return err
}

func (p *WebLoginResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "optionalReturnUrl", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:optionalReturnUrl: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.OptionalReturnUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.optionalReturnUrl (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:optionalReturnUrl: ", p), err) }
  return err
}

func (p *WebLoginResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "redirectConfirmationPageUrl", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:redirectConfirmationPageUrl: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RedirectConfirmationPageUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.redirectConfirmationPageUrl (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:redirectConfirmationPageUrl: ", p), err) }
  return err
}

func (p *WebLoginResponse) Equals(other *WebLoginResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ReturnUrl != other.ReturnUrl { return false }
  if p.OptionalReturnUrl != other.OptionalReturnUrl { return false }
  if p.RedirectConfirmationPageUrl != other.RedirectConfirmationPageUrl { return false }
  return true
}

func (p *WebLoginResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WebLoginResponse(%+v)", *p)
}

// Attributes:
//  - HookedFullUrl
//  - SessionString
//  - FromIAB
//  - SourceApplication
type WebLoginRequest struct {
  HookedFullUrl string `thrift:"hookedFullUrl,1" db:"hookedFullUrl" json:"hookedFullUrl"`
  SessionString string `thrift:"sessionString,2" db:"sessionString" json:"sessionString"`
  FromIAB bool `thrift:"fromIAB,3" db:"fromIAB" json:"fromIAB"`
  SourceApplication string `thrift:"sourceApplication,4" db:"sourceApplication" json:"sourceApplication"`
}

func NewWebLoginRequest() *WebLoginRequest {
  return &WebLoginRequest{}
}


func (p *WebLoginRequest) GetHookedFullUrl() string {
  return p.HookedFullUrl
}

func (p *WebLoginRequest) GetSessionString() string {
  return p.SessionString
}

func (p *WebLoginRequest) GetFromIAB() bool {
  return p.FromIAB
}

func (p *WebLoginRequest) GetSourceApplication() string {
  return p.SourceApplication
}
func (p *WebLoginRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WebLoginRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.HookedFullUrl = v
}
  return nil
}

func (p *WebLoginRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SessionString = v
}
  return nil
}

func (p *WebLoginRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.FromIAB = v
}
  return nil
}

func (p *WebLoginRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.SourceApplication = v
}
  return nil
}

func (p *WebLoginRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WebLoginRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WebLoginRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hookedFullUrl", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hookedFullUrl: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.HookedFullUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hookedFullUrl (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hookedFullUrl: ", p), err) }
  return err
}

func (p *WebLoginRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sessionString", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sessionString: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SessionString)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionString (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sessionString: ", p), err) }
  return err
}

func (p *WebLoginRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fromIAB", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:fromIAB: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.FromIAB)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromIAB (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:fromIAB: ", p), err) }
  return err
}

func (p *WebLoginRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sourceApplication", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sourceApplication: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SourceApplication)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sourceApplication (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sourceApplication: ", p), err) }
  return err
}

func (p *WebLoginRequest) Equals(other *WebLoginRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.HookedFullUrl != other.HookedFullUrl { return false }
  if p.SessionString != other.SessionString { return false }
  if p.FromIAB != other.FromIAB { return false }
  if p.SourceApplication != other.SourceApplication { return false }
  return true
}

func (p *WebLoginRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WebLoginRequest(%+v)", *p)
}

type ChannelService interface {
  // Parameters:
  //  - ChannelId
  IssueChannelToken(ctx context.Context, channelId string) (_r *ChannelToken, _err error)
  // Parameters:
  //  - WebLoginRequest
  GetReturnUrlWithRequestTokenForAutoLogin(ctx context.Context, webLoginRequest *WebLoginRequest) (_r *WebLoginResponse, _err error)
}

type ChannelServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewChannelServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ChannelServiceClient {
  return &ChannelServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewChannelServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ChannelServiceClient {
  return &ChannelServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewChannelServiceClient(c thrift.TClient) *ChannelServiceClient {
  return &ChannelServiceClient{
    c: c,
  }
}

func (p *ChannelServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *ChannelServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *ChannelServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - ChannelId
func (p *ChannelServiceClient) IssueChannelToken(ctx context.Context, channelId string) (_r *ChannelToken, _err error) {
  var _args3 ChannelServiceIssueChannelTokenArgs
  _args3.ChannelId = channelId
  var _result5 ChannelServiceIssueChannelTokenResult
  var _meta4 thrift.ResponseMeta
  _meta4, _err = p.Client_().Call(ctx, "issueChannelToken", &_args3, &_result5)
  p.SetLastResponseMeta_(_meta4)
  if _err != nil {
    return
  }
  switch {
  case _result5.E!= nil:
    return _r, _result5.E
  }

  return _result5.GetSuccess(), nil
}

// Parameters:
//  - WebLoginRequest
func (p *ChannelServiceClient) GetReturnUrlWithRequestTokenForAutoLogin(ctx context.Context, webLoginRequest *WebLoginRequest) (_r *WebLoginResponse, _err error) {
  var _args6 ChannelServiceGetReturnUrlWithRequestTokenForAutoLoginArgs
  _args6.WebLoginRequest = webLoginRequest
  var _result8 ChannelServiceGetReturnUrlWithRequestTokenForAutoLoginResult
  var _meta7 thrift.ResponseMeta
  _meta7, _err = p.Client_().Call(ctx, "getReturnUrlWithRequestTokenForAutoLogin", &_args6, &_result8)
  p.SetLastResponseMeta_(_meta7)
  if _err != nil {
    return
  }
  switch {
  case _result8.E!= nil:
    return _r, _result8.E
  }

  return _result8.GetSuccess(), nil
}

type ChannelServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler ChannelService
}

func (p *ChannelServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *ChannelServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *ChannelServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewChannelServiceProcessor(handler ChannelService) *ChannelServiceProcessor {

  self9 := &ChannelServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self9.processorMap["issueChannelToken"] = &channelServiceProcessorIssueChannelToken{handler:handler}
  self9.processorMap["getReturnUrlWithRequestTokenForAutoLogin"] = &channelServiceProcessorGetReturnUrlWithRequestTokenForAutoLogin{handler:handler}
return self9
}

func (p *ChannelServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x10 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x10.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x10

}

type channelServiceProcessorIssueChannelToken struct {
  handler ChannelService
}

func (p *channelServiceProcessorIssueChannelToken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ChannelServiceIssueChannelTokenArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "issueChannelToken", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ChannelServiceIssueChannelTokenResult{}
  var retval *ChannelToken
  if retval, err2 = p.handler.IssueChannelToken(ctx, args.ChannelId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ChannelException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing issueChannelToken: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "issueChannelToken", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "issueChannelToken", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type channelServiceProcessorGetReturnUrlWithRequestTokenForAutoLogin struct {
  handler ChannelService
}

func (p *channelServiceProcessorGetReturnUrlWithRequestTokenForAutoLogin) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ChannelServiceGetReturnUrlWithRequestTokenForAutoLoginArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getReturnUrlWithRequestTokenForAutoLogin", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ChannelServiceGetReturnUrlWithRequestTokenForAutoLoginResult{}
  var retval *WebLoginResponse
  if retval, err2 = p.handler.GetReturnUrlWithRequestTokenForAutoLogin(ctx, args.WebLoginRequest); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *ChannelException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getReturnUrlWithRequestTokenForAutoLogin: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getReturnUrlWithRequestTokenForAutoLogin", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getReturnUrlWithRequestTokenForAutoLogin", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ChannelId
type ChannelServiceIssueChannelTokenArgs struct {
  ChannelId string `thrift:"channelId,1" db:"channelId" json:"channelId"`
}

func NewChannelServiceIssueChannelTokenArgs() *ChannelServiceIssueChannelTokenArgs {
  return &ChannelServiceIssueChannelTokenArgs{}
}


func (p *ChannelServiceIssueChannelTokenArgs) GetChannelId() string {
  return p.ChannelId
}
func (p *ChannelServiceIssueChannelTokenArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelServiceIssueChannelTokenArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ChannelId = v
}
  return nil
}

func (p *ChannelServiceIssueChannelTokenArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "issueChannelToken_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelServiceIssueChannelTokenArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "channelId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:channelId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChannelId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.channelId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:channelId: ", p), err) }
  return err
}

func (p *ChannelServiceIssueChannelTokenArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelServiceIssueChannelTokenArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type ChannelServiceIssueChannelTokenResult struct {
  Success *ChannelToken `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *ChannelException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewChannelServiceIssueChannelTokenResult() *ChannelServiceIssueChannelTokenResult {
  return &ChannelServiceIssueChannelTokenResult{}
}

var ChannelServiceIssueChannelTokenResult_Success_DEFAULT *ChannelToken
func (p *ChannelServiceIssueChannelTokenResult) GetSuccess() *ChannelToken {
  if !p.IsSetSuccess() {
    return ChannelServiceIssueChannelTokenResult_Success_DEFAULT
  }
return p.Success
}
var ChannelServiceIssueChannelTokenResult_E_DEFAULT *ChannelException
func (p *ChannelServiceIssueChannelTokenResult) GetE() *ChannelException {
  if !p.IsSetE() {
    return ChannelServiceIssueChannelTokenResult_E_DEFAULT
  }
return p.E
}
func (p *ChannelServiceIssueChannelTokenResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ChannelServiceIssueChannelTokenResult) IsSetE() bool {
  return p.E != nil
}

func (p *ChannelServiceIssueChannelTokenResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelServiceIssueChannelTokenResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ChannelToken{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ChannelServiceIssueChannelTokenResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &ChannelException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *ChannelServiceIssueChannelTokenResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "issueChannelToken_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelServiceIssueChannelTokenResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ChannelServiceIssueChannelTokenResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *ChannelServiceIssueChannelTokenResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelServiceIssueChannelTokenResult(%+v)", *p)
}

// Attributes:
//  - WebLoginRequest
type ChannelServiceGetReturnUrlWithRequestTokenForAutoLoginArgs struct {
  // unused field # 1
  WebLoginRequest *WebLoginRequest `thrift:"webLoginRequest,2" db:"webLoginRequest" json:"webLoginRequest"`
}

func NewChannelServiceGetReturnUrlWithRequestTokenForAutoLoginArgs() *ChannelServiceGetReturnUrlWithRequestTokenForAutoLoginArgs {
  return &ChannelServiceGetReturnUrlWithRequestTokenForAutoLoginArgs{}
}

var ChannelServiceGetReturnUrlWithRequestTokenForAutoLoginArgs_WebLoginRequest_DEFAULT *WebLoginRequest
func (p *ChannelServiceGetReturnUrlWithRequestTokenForAutoLoginArgs) GetWebLoginRequest() *WebLoginRequest {
  if !p.IsSetWebLoginRequest() {
    return ChannelServiceGetReturnUrlWithRequestTokenForAutoLoginArgs_WebLoginRequest_DEFAULT
  }
return p.WebLoginRequest
}
func (p *ChannelServiceGetReturnUrlWithRequestTokenForAutoLoginArgs) IsSetWebLoginRequest() bool {
  return p.WebLoginRequest != nil
}

func (p *ChannelServiceGetReturnUrlWithRequestTokenForAutoLoginArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelServiceGetReturnUrlWithRequestTokenForAutoLoginArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.WebLoginRequest = &WebLoginRequest{}
  if err := p.WebLoginRequest.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.WebLoginRequest), err)
  }
  return nil
}

func (p *ChannelServiceGetReturnUrlWithRequestTokenForAutoLoginArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getReturnUrlWithRequestTokenForAutoLogin_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelServiceGetReturnUrlWithRequestTokenForAutoLoginArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "webLoginRequest", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:webLoginRequest: ", p), err) }
  if err := p.WebLoginRequest.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.WebLoginRequest), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:webLoginRequest: ", p), err) }
  return err
}

func (p *ChannelServiceGetReturnUrlWithRequestTokenForAutoLoginArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelServiceGetReturnUrlWithRequestTokenForAutoLoginArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type ChannelServiceGetReturnUrlWithRequestTokenForAutoLoginResult struct {
  Success *WebLoginResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *ChannelException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewChannelServiceGetReturnUrlWithRequestTokenForAutoLoginResult() *ChannelServiceGetReturnUrlWithRequestTokenForAutoLoginResult {
  return &ChannelServiceGetReturnUrlWithRequestTokenForAutoLoginResult{}
}

var ChannelServiceGetReturnUrlWithRequestTokenForAutoLoginResult_Success_DEFAULT *WebLoginResponse
func (p *ChannelServiceGetReturnUrlWithRequestTokenForAutoLoginResult) GetSuccess() *WebLoginResponse {
  if !p.IsSetSuccess() {
    return ChannelServiceGetReturnUrlWithRequestTokenForAutoLoginResult_Success_DEFAULT
  }
return p.Success
}
var ChannelServiceGetReturnUrlWithRequestTokenForAutoLoginResult_E_DEFAULT *ChannelException
func (p *ChannelServiceGetReturnUrlWithRequestTokenForAutoLoginResult) GetE() *ChannelException {
  if !p.IsSetE() {
    return ChannelServiceGetReturnUrlWithRequestTokenForAutoLoginResult_E_DEFAULT
  }
return p.E
}
func (p *ChannelServiceGetReturnUrlWithRequestTokenForAutoLoginResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ChannelServiceGetReturnUrlWithRequestTokenForAutoLoginResult) IsSetE() bool {
  return p.E != nil
}

func (p *ChannelServiceGetReturnUrlWithRequestTokenForAutoLoginResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelServiceGetReturnUrlWithRequestTokenForAutoLoginResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &WebLoginResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ChannelServiceGetReturnUrlWithRequestTokenForAutoLoginResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &ChannelException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *ChannelServiceGetReturnUrlWithRequestTokenForAutoLoginResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getReturnUrlWithRequestTokenForAutoLogin_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelServiceGetReturnUrlWithRequestTokenForAutoLoginResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ChannelServiceGetReturnUrlWithRequestTokenForAutoLoginResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *ChannelServiceGetReturnUrlWithRequestTokenForAutoLoginResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelServiceGetReturnUrlWithRequestTokenForAutoLoginResult(%+v)", *p)
}


