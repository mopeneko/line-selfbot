// Code generated by Thrift Compiler (0.14.1). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	"github.com/apache/thrift/lib/go/thrift"
	"primaryaccountinitservice"
)

var _ = primaryaccountinitservice.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  string openSession(OpenSessionRequest request)")
  fmt.Fprintln(os.Stderr, "  GetAcctVerifMethodResponse getAcctVerifMethod(string authSessionId, AccountIdentifier accountIdentifier)")
  fmt.Fprintln(os.Stderr, "  RegisterPrimaryResponse registerPrimaryUsingPhone(string authSessionId)")
  fmt.Fprintln(os.Stderr, "  MigratePrimaryResponse migratePrimaryUsingPhone(string authSessionId)")
  fmt.Fprintln(os.Stderr, "  GetPhoneVerifMethodResponse getPhoneVerifMethod(string authSessionId, Device device, UserPhoneNumber userPhoneNumber)")
  fmt.Fprintln(os.Stderr, "  VerifyPhoneResponse verifyPhone(string authSessionId, Device device, UserPhoneNumber userPhoneNumber, string pinCode)")
  fmt.Fprintln(os.Stderr, "  VerifyAccountUsingPwdResponse verifyAccountUsingPwd(string authSessionId, AccountIdentifier accountIdentifier, EncryptedPassword encryptedPassword)")
  fmt.Fprintln(os.Stderr, "  ValidateProfileResponse validateProfile(string authSessionId, string displayName)")
  fmt.Fprintln(os.Stderr, "  GetUserProfileResponse getUserProfile(string authSessionId, AccountIdentifier accountIdentifier)")
  fmt.Fprintln(os.Stderr, "  IssueWebAuthDetailsForAcctVerifResponse issueWebAuthDetailsForAcctVerif(string authSessionId, AccountIdentifier accountIdentifier)")
  fmt.Fprintln(os.Stderr, "  IssueWebAuthDetailsForSecondAuthResponse issueWebAuthDetailsForSecondAuth(string authSessionId)")
  fmt.Fprintln(os.Stderr, "  ExchangeEncryptionKeyResponse exchangeEncryptionKey(string authSessionId, ExchangeEncryptionKeyRequest request)")
  fmt.Fprintln(os.Stderr, "  SetPasswordResponse setPassword(string authSessionId, EncryptedPassword encryptedPassword)")
  fmt.Fprintln(os.Stderr, "  SendPinCodeForPhoneResponse sendPinCodeForPhone(string authSessionId, Device device, UserPhoneNumber userPhoneNumber, PhoneVerifMethod verifMethod)")
  fmt.Fprintln(os.Stderr, "  GetSecondAuthMethodResponse getSecondAuthMethod(string authSessionId)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := primaryaccountinitservice.NewPrimaryAccountInitServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "openSession":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "OpenSession requires 1 args")
      flag.Usage()
    }
    arg54 := flag.Arg(1)
    mbTrans55 := thrift.NewTMemoryBufferLen(len(arg54))
    defer mbTrans55.Close()
    _, err56 := mbTrans55.WriteString(arg54)
    if err56 != nil {
      Usage()
      return
    }
    factory57 := thrift.NewTJSONProtocolFactory()
    jsProt58 := factory57.GetProtocol(mbTrans55)
    argvalue0 := primaryaccountinitservice.NewOpenSessionRequest()
    err59 := argvalue0.Read(context.Background(), jsProt58)
    if err59 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.OpenSession(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getAcctVerifMethod":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetAcctVerifMethod requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg61 := flag.Arg(2)
    mbTrans62 := thrift.NewTMemoryBufferLen(len(arg61))
    defer mbTrans62.Close()
    _, err63 := mbTrans62.WriteString(arg61)
    if err63 != nil {
      Usage()
      return
    }
    factory64 := thrift.NewTJSONProtocolFactory()
    jsProt65 := factory64.GetProtocol(mbTrans62)
    argvalue1 := primaryaccountinitservice.NewAccountIdentifier()
    err66 := argvalue1.Read(context.Background(), jsProt65)
    if err66 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.GetAcctVerifMethod(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "registerPrimaryUsingPhone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RegisterPrimaryUsingPhone requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.RegisterPrimaryUsingPhone(context.Background(), value0))
    fmt.Print("\n")
    break
  case "migratePrimaryUsingPhone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MigratePrimaryUsingPhone requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.MigratePrimaryUsingPhone(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getPhoneVerifMethod":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPhoneVerifMethod requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg70 := flag.Arg(2)
    mbTrans71 := thrift.NewTMemoryBufferLen(len(arg70))
    defer mbTrans71.Close()
    _, err72 := mbTrans71.WriteString(arg70)
    if err72 != nil {
      Usage()
      return
    }
    factory73 := thrift.NewTJSONProtocolFactory()
    jsProt74 := factory73.GetProtocol(mbTrans71)
    argvalue1 := primaryaccountinitservice.NewDevice()
    err75 := argvalue1.Read(context.Background(), jsProt74)
    if err75 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg76 := flag.Arg(3)
    mbTrans77 := thrift.NewTMemoryBufferLen(len(arg76))
    defer mbTrans77.Close()
    _, err78 := mbTrans77.WriteString(arg76)
    if err78 != nil {
      Usage()
      return
    }
    factory79 := thrift.NewTJSONProtocolFactory()
    jsProt80 := factory79.GetProtocol(mbTrans77)
    argvalue2 := primaryaccountinitservice.NewUserPhoneNumber()
    err81 := argvalue2.Read(context.Background(), jsProt80)
    if err81 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.GetPhoneVerifMethod(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "verifyPhone":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "VerifyPhone requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg83 := flag.Arg(2)
    mbTrans84 := thrift.NewTMemoryBufferLen(len(arg83))
    defer mbTrans84.Close()
    _, err85 := mbTrans84.WriteString(arg83)
    if err85 != nil {
      Usage()
      return
    }
    factory86 := thrift.NewTJSONProtocolFactory()
    jsProt87 := factory86.GetProtocol(mbTrans84)
    argvalue1 := primaryaccountinitservice.NewDevice()
    err88 := argvalue1.Read(context.Background(), jsProt87)
    if err88 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg89 := flag.Arg(3)
    mbTrans90 := thrift.NewTMemoryBufferLen(len(arg89))
    defer mbTrans90.Close()
    _, err91 := mbTrans90.WriteString(arg89)
    if err91 != nil {
      Usage()
      return
    }
    factory92 := thrift.NewTJSONProtocolFactory()
    jsProt93 := factory92.GetProtocol(mbTrans90)
    argvalue2 := primaryaccountinitservice.NewUserPhoneNumber()
    err94 := argvalue2.Read(context.Background(), jsProt93)
    if err94 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.VerifyPhone(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "verifyAccountUsingPwd":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "VerifyAccountUsingPwd requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg97 := flag.Arg(2)
    mbTrans98 := thrift.NewTMemoryBufferLen(len(arg97))
    defer mbTrans98.Close()
    _, err99 := mbTrans98.WriteString(arg97)
    if err99 != nil {
      Usage()
      return
    }
    factory100 := thrift.NewTJSONProtocolFactory()
    jsProt101 := factory100.GetProtocol(mbTrans98)
    argvalue1 := primaryaccountinitservice.NewAccountIdentifier()
    err102 := argvalue1.Read(context.Background(), jsProt101)
    if err102 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg103 := flag.Arg(3)
    mbTrans104 := thrift.NewTMemoryBufferLen(len(arg103))
    defer mbTrans104.Close()
    _, err105 := mbTrans104.WriteString(arg103)
    if err105 != nil {
      Usage()
      return
    }
    factory106 := thrift.NewTJSONProtocolFactory()
    jsProt107 := factory106.GetProtocol(mbTrans104)
    argvalue2 := primaryaccountinitservice.NewEncryptedPassword()
    err108 := argvalue2.Read(context.Background(), jsProt107)
    if err108 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.VerifyAccountUsingPwd(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "validateProfile":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ValidateProfile requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.ValidateProfile(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getUserProfile":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetUserProfile requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg112 := flag.Arg(2)
    mbTrans113 := thrift.NewTMemoryBufferLen(len(arg112))
    defer mbTrans113.Close()
    _, err114 := mbTrans113.WriteString(arg112)
    if err114 != nil {
      Usage()
      return
    }
    factory115 := thrift.NewTJSONProtocolFactory()
    jsProt116 := factory115.GetProtocol(mbTrans113)
    argvalue1 := primaryaccountinitservice.NewAccountIdentifier()
    err117 := argvalue1.Read(context.Background(), jsProt116)
    if err117 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.GetUserProfile(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "issueWebAuthDetailsForAcctVerif":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "IssueWebAuthDetailsForAcctVerif requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg119 := flag.Arg(2)
    mbTrans120 := thrift.NewTMemoryBufferLen(len(arg119))
    defer mbTrans120.Close()
    _, err121 := mbTrans120.WriteString(arg119)
    if err121 != nil {
      Usage()
      return
    }
    factory122 := thrift.NewTJSONProtocolFactory()
    jsProt123 := factory122.GetProtocol(mbTrans120)
    argvalue1 := primaryaccountinitservice.NewAccountIdentifier()
    err124 := argvalue1.Read(context.Background(), jsProt123)
    if err124 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.IssueWebAuthDetailsForAcctVerif(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "issueWebAuthDetailsForSecondAuth":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IssueWebAuthDetailsForSecondAuth requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.IssueWebAuthDetailsForSecondAuth(context.Background(), value0))
    fmt.Print("\n")
    break
  case "exchangeEncryptionKey":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ExchangeEncryptionKey requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg127 := flag.Arg(2)
    mbTrans128 := thrift.NewTMemoryBufferLen(len(arg127))
    defer mbTrans128.Close()
    _, err129 := mbTrans128.WriteString(arg127)
    if err129 != nil {
      Usage()
      return
    }
    factory130 := thrift.NewTJSONProtocolFactory()
    jsProt131 := factory130.GetProtocol(mbTrans128)
    argvalue1 := primaryaccountinitservice.NewExchangeEncryptionKeyRequest()
    err132 := argvalue1.Read(context.Background(), jsProt131)
    if err132 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.ExchangeEncryptionKey(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "setPassword":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetPassword requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg134 := flag.Arg(2)
    mbTrans135 := thrift.NewTMemoryBufferLen(len(arg134))
    defer mbTrans135.Close()
    _, err136 := mbTrans135.WriteString(arg134)
    if err136 != nil {
      Usage()
      return
    }
    factory137 := thrift.NewTJSONProtocolFactory()
    jsProt138 := factory137.GetProtocol(mbTrans135)
    argvalue1 := primaryaccountinitservice.NewEncryptedPassword()
    err139 := argvalue1.Read(context.Background(), jsProt138)
    if err139 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SetPassword(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sendPinCodeForPhone":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SendPinCodeForPhone requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg141 := flag.Arg(2)
    mbTrans142 := thrift.NewTMemoryBufferLen(len(arg141))
    defer mbTrans142.Close()
    _, err143 := mbTrans142.WriteString(arg141)
    if err143 != nil {
      Usage()
      return
    }
    factory144 := thrift.NewTJSONProtocolFactory()
    jsProt145 := factory144.GetProtocol(mbTrans142)
    argvalue1 := primaryaccountinitservice.NewDevice()
    err146 := argvalue1.Read(context.Background(), jsProt145)
    if err146 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg147 := flag.Arg(3)
    mbTrans148 := thrift.NewTMemoryBufferLen(len(arg147))
    defer mbTrans148.Close()
    _, err149 := mbTrans148.WriteString(arg147)
    if err149 != nil {
      Usage()
      return
    }
    factory150 := thrift.NewTJSONProtocolFactory()
    jsProt151 := factory150.GetProtocol(mbTrans148)
    argvalue2 := primaryaccountinitservice.NewUserPhoneNumber()
    err152 := argvalue2.Read(context.Background(), jsProt151)
    if err152 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    tmp3, err := (strconv.Atoi(flag.Arg(4)))
    if err != nil {
      Usage()
     return
    }
    argvalue3 := primaryaccountinitservice.PhoneVerifMethod(tmp3)
    value3 := argvalue3
    fmt.Print(client.SendPinCodeForPhone(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getSecondAuthMethod":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSecondAuthMethod requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetSecondAuthMethod(context.Background(), value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
