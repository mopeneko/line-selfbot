// Code generated by Thrift Compiler (0.14.1). DO NOT EDIT.

package buddyservice

import(
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"time"
	"github.com/apache/thrift/lib/go/thrift"
	"talkservice"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

var _ = talkservice.GoUnusedProtection__
type BotType int64
const (
  BotType_RESERVED BotType = 0
  BotType_OFFICIAL BotType = 1
  BotType_LINE_AT_0 BotType = 2
  BotType_LINE_AT BotType = 3
)

func (p BotType) String() string {
  switch p {
  case BotType_RESERVED: return "RESERVED"
  case BotType_OFFICIAL: return "OFFICIAL"
  case BotType_LINE_AT_0: return "LINE_AT_0"
  case BotType_LINE_AT: return "LINE_AT"
  }
  return "<UNSET>"
}

func BotTypeFromString(s string) (BotType, error) {
  switch s {
  case "RESERVED": return BotType_RESERVED, nil 
  case "OFFICIAL": return BotType_OFFICIAL, nil 
  case "LINE_AT_0": return BotType_LINE_AT_0, nil 
  case "LINE_AT": return BotType_LINE_AT, nil 
  }
  return BotType(0), fmt.Errorf("not a valid BotType string")
}


func BotTypePtr(v BotType) *BotType { return &v }

func (p BotType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *BotType) UnmarshalText(text []byte) error {
q, err := BotTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *BotType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = BotType(v)
return nil
}

func (p * BotType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type BuddyOnAirLabel int64
const (
  BuddyOnAirLabel_ON_AIR BuddyOnAirLabel = 0
  BuddyOnAirLabel_LIVE BuddyOnAirLabel = 1
)

func (p BuddyOnAirLabel) String() string {
  switch p {
  case BuddyOnAirLabel_ON_AIR: return "ON_AIR"
  case BuddyOnAirLabel_LIVE: return "LIVE"
  }
  return "<UNSET>"
}

func BuddyOnAirLabelFromString(s string) (BuddyOnAirLabel, error) {
  switch s {
  case "ON_AIR": return BuddyOnAirLabel_ON_AIR, nil 
  case "LIVE": return BuddyOnAirLabel_LIVE, nil 
  }
  return BuddyOnAirLabel(0), fmt.Errorf("not a valid BuddyOnAirLabel string")
}


func BuddyOnAirLabelPtr(v BuddyOnAirLabel) *BuddyOnAirLabel { return &v }

func (p BuddyOnAirLabel) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *BuddyOnAirLabel) UnmarshalText(text []byte) error {
q, err := BuddyOnAirLabelFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *BuddyOnAirLabel) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = BuddyOnAirLabel(v)
return nil
}

func (p * BuddyOnAirLabel) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - Classification
//  - DisplayName
//  - TotalBuddyCount
//  - PopularContacts
type BuddyList struct {
  Classification string `thrift:"classification,1" db:"classification" json:"classification"`
  DisplayName string `thrift:"displayName,2" db:"displayName" json:"displayName"`
  TotalBuddyCount int32 `thrift:"totalBuddyCount,3" db:"totalBuddyCount" json:"totalBuddyCount"`
  PopularContacts []*talkservice.Contact `thrift:"popularContacts,4" db:"popularContacts" json:"popularContacts"`
}

func NewBuddyList() *BuddyList {
  return &BuddyList{}
}


func (p *BuddyList) GetClassification() string {
  return p.Classification
}

func (p *BuddyList) GetDisplayName() string {
  return p.DisplayName
}

func (p *BuddyList) GetTotalBuddyCount() int32 {
  return p.TotalBuddyCount
}

func (p *BuddyList) GetPopularContacts() []*talkservice.Contact {
  return p.PopularContacts
}
func (p *BuddyList) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BuddyList)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Classification = v
}
  return nil
}

func (p *BuddyList)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DisplayName = v
}
  return nil
}

func (p *BuddyList)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TotalBuddyCount = v
}
  return nil
}

func (p *BuddyList)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*talkservice.Contact, 0, size)
  p.PopularContacts =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &talkservice.Contact{}
    if err := _elem0.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.PopularContacts = append(p.PopularContacts, _elem0)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BuddyList) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "BuddyList"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BuddyList) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "classification", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:classification: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Classification)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.classification (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:classification: ", p), err) }
  return err
}

func (p *BuddyList) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "displayName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:displayName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DisplayName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.displayName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:displayName: ", p), err) }
  return err
}

func (p *BuddyList) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "totalBuddyCount", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:totalBuddyCount: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.TotalBuddyCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.totalBuddyCount (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:totalBuddyCount: ", p), err) }
  return err
}

func (p *BuddyList) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "popularContacts", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:popularContacts: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.PopularContacts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PopularContacts {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:popularContacts: ", p), err) }
  return err
}

func (p *BuddyList) Equals(other *BuddyList) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Classification != other.Classification { return false }
  if p.DisplayName != other.DisplayName { return false }
  if p.TotalBuddyCount != other.TotalBuddyCount { return false }
  if len(p.PopularContacts) != len(other.PopularContacts) { return false }
  for i, _tgt := range p.PopularContacts {
    _src1 := other.PopularContacts[i]
    if !_tgt.Equals(_src1) { return false }
  }
  return true
}

func (p *BuddyList) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BuddyList(%+v)", *p)
}

// Attributes:
//  - Mid
//  - MemberCount
//  - OnAir
//  - BusinessAccount
//  - Addable
//  - AcceptableContentTypes
//  - CapableMyhome
//  - FreePhoneCallable
//  - PhoneNumberToDial
//  - NeedPermissionApproval
//  - ChannelId
//  - ChannelProviderName
//  - IconType
//  - BotType
//  - ShowRichMenu
//  - RichMenuRevision
//  - OnAirLabel
//  - OnAirVersion
//  - UseTheme
//  - ThemeId
//  - UseBar
//  - BarRevision
//  - UseBackground
//  - BackgroundId
//  - StatusBarEnabled
//  - StatusBarRevision
//  - SearchId
//  - Blockable
type BuddyDetail struct {
  Mid string `thrift:"mid,1" db:"mid" json:"mid"`
  MemberCount int64 `thrift:"memberCount,2" db:"memberCount" json:"memberCount"`
  OnAir bool `thrift:"onAir,3" db:"onAir" json:"onAir"`
  BusinessAccount bool `thrift:"businessAccount,4" db:"businessAccount" json:"businessAccount"`
  Addable bool `thrift:"addable,5" db:"addable" json:"addable"`
  AcceptableContentTypes []talkservice.ContentType `thrift:"acceptableContentTypes,6" db:"acceptableContentTypes" json:"acceptableContentTypes"`
  CapableMyhome bool `thrift:"capableMyhome,7" db:"capableMyhome" json:"capableMyhome"`
  FreePhoneCallable bool `thrift:"freePhoneCallable,8" db:"freePhoneCallable" json:"freePhoneCallable"`
  PhoneNumberToDial string `thrift:"phoneNumberToDial,9" db:"phoneNumberToDial" json:"phoneNumberToDial"`
  NeedPermissionApproval bool `thrift:"needPermissionApproval,10" db:"needPermissionApproval" json:"needPermissionApproval"`
  ChannelId int32 `thrift:"channelId,11" db:"channelId" json:"channelId"`
  ChannelProviderName string `thrift:"channelProviderName,12" db:"channelProviderName" json:"channelProviderName"`
  IconType int32 `thrift:"iconType,13" db:"iconType" json:"iconType"`
  BotType BotType `thrift:"botType,14" db:"botType" json:"botType"`
  ShowRichMenu bool `thrift:"showRichMenu,15" db:"showRichMenu" json:"showRichMenu"`
  RichMenuRevision int64 `thrift:"richMenuRevision,16" db:"richMenuRevision" json:"richMenuRevision"`
  OnAirLabel BuddyOnAirLabel `thrift:"onAirLabel,17" db:"onAirLabel" json:"onAirLabel"`
  UseTheme bool `thrift:"useTheme,18" db:"useTheme" json:"useTheme"`
  ThemeId string `thrift:"themeId,19" db:"themeId" json:"themeId"`
  UseBar bool `thrift:"useBar,20" db:"useBar" json:"useBar"`
  BarRevision int64 `thrift:"barRevision,21" db:"barRevision" json:"barRevision"`
  UseBackground bool `thrift:"useBackground,22" db:"useBackground" json:"useBackground"`
  BackgroundId string `thrift:"backgroundId,23" db:"backgroundId" json:"backgroundId"`
  StatusBarEnabled bool `thrift:"statusBarEnabled,24" db:"statusBarEnabled" json:"statusBarEnabled"`
  StatusBarRevision int64 `thrift:"statusBarRevision,25" db:"statusBarRevision" json:"statusBarRevision"`
  SearchId string `thrift:"searchId,26" db:"searchId" json:"searchId"`
  OnAirVersion int32 `thrift:"onAirVersion,27" db:"onAirVersion" json:"onAirVersion"`
  Blockable bool `thrift:"blockable,28" db:"blockable" json:"blockable"`
}

func NewBuddyDetail() *BuddyDetail {
  return &BuddyDetail{}
}


func (p *BuddyDetail) GetMid() string {
  return p.Mid
}

func (p *BuddyDetail) GetMemberCount() int64 {
  return p.MemberCount
}

func (p *BuddyDetail) GetOnAir() bool {
  return p.OnAir
}

func (p *BuddyDetail) GetBusinessAccount() bool {
  return p.BusinessAccount
}

func (p *BuddyDetail) GetAddable() bool {
  return p.Addable
}

func (p *BuddyDetail) GetAcceptableContentTypes() []talkservice.ContentType {
  return p.AcceptableContentTypes
}

func (p *BuddyDetail) GetCapableMyhome() bool {
  return p.CapableMyhome
}

func (p *BuddyDetail) GetFreePhoneCallable() bool {
  return p.FreePhoneCallable
}

func (p *BuddyDetail) GetPhoneNumberToDial() string {
  return p.PhoneNumberToDial
}

func (p *BuddyDetail) GetNeedPermissionApproval() bool {
  return p.NeedPermissionApproval
}

func (p *BuddyDetail) GetChannelId() int32 {
  return p.ChannelId
}

func (p *BuddyDetail) GetChannelProviderName() string {
  return p.ChannelProviderName
}

func (p *BuddyDetail) GetIconType() int32 {
  return p.IconType
}

func (p *BuddyDetail) GetBotType() BotType {
  return p.BotType
}

func (p *BuddyDetail) GetShowRichMenu() bool {
  return p.ShowRichMenu
}

func (p *BuddyDetail) GetRichMenuRevision() int64 {
  return p.RichMenuRevision
}

func (p *BuddyDetail) GetOnAirLabel() BuddyOnAirLabel {
  return p.OnAirLabel
}

func (p *BuddyDetail) GetOnAirVersion() int32 {
  return p.OnAirVersion
}

func (p *BuddyDetail) GetUseTheme() bool {
  return p.UseTheme
}

func (p *BuddyDetail) GetThemeId() string {
  return p.ThemeId
}

func (p *BuddyDetail) GetUseBar() bool {
  return p.UseBar
}

func (p *BuddyDetail) GetBarRevision() int64 {
  return p.BarRevision
}

func (p *BuddyDetail) GetUseBackground() bool {
  return p.UseBackground
}

func (p *BuddyDetail) GetBackgroundId() string {
  return p.BackgroundId
}

func (p *BuddyDetail) GetStatusBarEnabled() bool {
  return p.StatusBarEnabled
}

func (p *BuddyDetail) GetStatusBarRevision() int64 {
  return p.StatusBarRevision
}

func (p *BuddyDetail) GetSearchId() string {
  return p.SearchId
}

func (p *BuddyDetail) GetBlockable() bool {
  return p.Blockable
}
func (p *BuddyDetail) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField16(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField17(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 27:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField27(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField18(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField19(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField21(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField22(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField23(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField24(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField25(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 26:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField26(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 28:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField28(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BuddyDetail)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *BuddyDetail)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MemberCount = v
}
  return nil
}

func (p *BuddyDetail)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.OnAir = v
}
  return nil
}

func (p *BuddyDetail)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.BusinessAccount = v
}
  return nil
}

func (p *BuddyDetail)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Addable = v
}
  return nil
}

func (p *BuddyDetail)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]talkservice.ContentType, 0, size)
  p.AcceptableContentTypes =  tSet
  for i := 0; i < size; i ++ {
var _elem2 talkservice.ContentType
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := talkservice.ContentType(v)
    _elem2 = temp
}
    p.AcceptableContentTypes = append(p.AcceptableContentTypes, _elem2)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *BuddyDetail)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.CapableMyhome = v
}
  return nil
}

func (p *BuddyDetail)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.FreePhoneCallable = v
}
  return nil
}

func (p *BuddyDetail)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.PhoneNumberToDial = v
}
  return nil
}

func (p *BuddyDetail)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.NeedPermissionApproval = v
}
  return nil
}

func (p *BuddyDetail)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.ChannelId = v
}
  return nil
}

func (p *BuddyDetail)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.ChannelProviderName = v
}
  return nil
}

func (p *BuddyDetail)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.IconType = v
}
  return nil
}

func (p *BuddyDetail)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  temp := BotType(v)
  p.BotType = temp
}
  return nil
}

func (p *BuddyDetail)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.ShowRichMenu = v
}
  return nil
}

func (p *BuddyDetail)  ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.RichMenuRevision = v
}
  return nil
}

func (p *BuddyDetail)  ReadField17(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  temp := BuddyOnAirLabel(v)
  p.OnAirLabel = temp
}
  return nil
}

func (p *BuddyDetail)  ReadField27(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 27: ", err)
} else {
  p.OnAirVersion = v
}
  return nil
}

func (p *BuddyDetail)  ReadField18(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.UseTheme = v
}
  return nil
}

func (p *BuddyDetail)  ReadField19(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.ThemeId = v
}
  return nil
}

func (p *BuddyDetail)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.UseBar = v
}
  return nil
}

func (p *BuddyDetail)  ReadField21(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.BarRevision = v
}
  return nil
}

func (p *BuddyDetail)  ReadField22(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.UseBackground = v
}
  return nil
}

func (p *BuddyDetail)  ReadField23(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.BackgroundId = v
}
  return nil
}

func (p *BuddyDetail)  ReadField24(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.StatusBarEnabled = v
}
  return nil
}

func (p *BuddyDetail)  ReadField25(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  p.StatusBarRevision = v
}
  return nil
}

func (p *BuddyDetail)  ReadField26(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 26: ", err)
} else {
  p.SearchId = v
}
  return nil
}

func (p *BuddyDetail)  ReadField28(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 28: ", err)
} else {
  p.Blockable = v
}
  return nil
}

func (p *BuddyDetail) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "BuddyDetail"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
    if err := p.writeField16(ctx, oprot); err != nil { return err }
    if err := p.writeField17(ctx, oprot); err != nil { return err }
    if err := p.writeField18(ctx, oprot); err != nil { return err }
    if err := p.writeField19(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
    if err := p.writeField21(ctx, oprot); err != nil { return err }
    if err := p.writeField22(ctx, oprot); err != nil { return err }
    if err := p.writeField23(ctx, oprot); err != nil { return err }
    if err := p.writeField24(ctx, oprot); err != nil { return err }
    if err := p.writeField25(ctx, oprot); err != nil { return err }
    if err := p.writeField26(ctx, oprot); err != nil { return err }
    if err := p.writeField27(ctx, oprot); err != nil { return err }
    if err := p.writeField28(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BuddyDetail) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mid: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "memberCount", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:memberCount: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.MemberCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memberCount (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:memberCount: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "onAir", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:onAir: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.OnAir)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.onAir (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:onAir: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "businessAccount", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:businessAccount: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.BusinessAccount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.businessAccount (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:businessAccount: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "addable", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:addable: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Addable)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.addable (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:addable: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "acceptableContentTypes", thrift.SET, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:acceptableContentTypes: ", p), err) }
  if err := oprot.WriteSetBegin(ctx, thrift.I32, len(p.AcceptableContentTypes)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.AcceptableContentTypes); i++ {
    for j := i+1; j<len(p.AcceptableContentTypes); j++ {
      if func(tgt, src talkservice.ContentType) bool {
        if tgt != src { return false }
        return true
      }(p.AcceptableContentTypes[i], p.AcceptableContentTypes[j]) {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.AcceptableContentTypes))
      }
    }
  }
  for _, v := range p.AcceptableContentTypes {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(ctx); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:acceptableContentTypes: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "capableMyhome", thrift.BOOL, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:capableMyhome: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.CapableMyhome)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.capableMyhome (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:capableMyhome: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "freePhoneCallable", thrift.BOOL, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:freePhoneCallable: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.FreePhoneCallable)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.freePhoneCallable (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:freePhoneCallable: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "phoneNumberToDial", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:phoneNumberToDial: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PhoneNumberToDial)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phoneNumberToDial (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:phoneNumberToDial: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "needPermissionApproval", thrift.BOOL, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:needPermissionApproval: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.NeedPermissionApproval)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.needPermissionApproval (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:needPermissionApproval: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "channelId", thrift.I32, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:channelId: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ChannelId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.channelId (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:channelId: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "channelProviderName", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:channelProviderName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChannelProviderName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.channelProviderName (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:channelProviderName: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "iconType", thrift.I32, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:iconType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.IconType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.iconType (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:iconType: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "botType", thrift.I32, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:botType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.BotType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.botType (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:botType: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "showRichMenu", thrift.BOOL, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:showRichMenu: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.ShowRichMenu)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.showRichMenu (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:showRichMenu: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "richMenuRevision", thrift.I64, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:richMenuRevision: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RichMenuRevision)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.richMenuRevision (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:richMenuRevision: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField17(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "onAirLabel", thrift.I32, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:onAirLabel: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.OnAirLabel)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.onAirLabel (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:onAirLabel: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField18(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "useTheme", thrift.BOOL, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:useTheme: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.UseTheme)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.useTheme (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:useTheme: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField19(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "themeId", thrift.STRING, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:themeId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ThemeId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.themeId (19) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:themeId: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "useBar", thrift.BOOL, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:useBar: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.UseBar)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.useBar (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:useBar: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField21(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "barRevision", thrift.I64, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:barRevision: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.BarRevision)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.barRevision (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:barRevision: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField22(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "useBackground", thrift.BOOL, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:useBackground: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.UseBackground)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.useBackground (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:useBackground: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField23(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "backgroundId", thrift.STRING, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:backgroundId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.BackgroundId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.backgroundId (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:backgroundId: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField24(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "statusBarEnabled", thrift.BOOL, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:statusBarEnabled: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.StatusBarEnabled)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.statusBarEnabled (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:statusBarEnabled: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField25(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "statusBarRevision", thrift.I64, 25); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:statusBarRevision: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.StatusBarRevision)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.statusBarRevision (25) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 25:statusBarRevision: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField26(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "searchId", thrift.STRING, 26); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:searchId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SearchId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.searchId (26) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 26:searchId: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField27(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "onAirVersion", thrift.I32, 27); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:onAirVersion: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.OnAirVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.onAirVersion (27) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 27:onAirVersion: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField28(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "blockable", thrift.BOOL, 28); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:blockable: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Blockable)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.blockable (28) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 28:blockable: ", p), err) }
  return err
}

func (p *BuddyDetail) Equals(other *BuddyDetail) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Mid != other.Mid { return false }
  if p.MemberCount != other.MemberCount { return false }
  if p.OnAir != other.OnAir { return false }
  if p.BusinessAccount != other.BusinessAccount { return false }
  if p.Addable != other.Addable { return false }
  if len(p.AcceptableContentTypes) != len(other.AcceptableContentTypes) { return false }
  for i, _tgt := range p.AcceptableContentTypes {
    _src3 := other.AcceptableContentTypes[i]
    if _tgt != _src3 { return false }
  }
  if p.CapableMyhome != other.CapableMyhome { return false }
  if p.FreePhoneCallable != other.FreePhoneCallable { return false }
  if p.PhoneNumberToDial != other.PhoneNumberToDial { return false }
  if p.NeedPermissionApproval != other.NeedPermissionApproval { return false }
  if p.ChannelId != other.ChannelId { return false }
  if p.ChannelProviderName != other.ChannelProviderName { return false }
  if p.IconType != other.IconType { return false }
  if p.BotType != other.BotType { return false }
  if p.ShowRichMenu != other.ShowRichMenu { return false }
  if p.RichMenuRevision != other.RichMenuRevision { return false }
  if p.OnAirLabel != other.OnAirLabel { return false }
  if p.UseTheme != other.UseTheme { return false }
  if p.ThemeId != other.ThemeId { return false }
  if p.UseBar != other.UseBar { return false }
  if p.BarRevision != other.BarRevision { return false }
  if p.UseBackground != other.UseBackground { return false }
  if p.BackgroundId != other.BackgroundId { return false }
  if p.StatusBarEnabled != other.StatusBarEnabled { return false }
  if p.StatusBarRevision != other.StatusBarRevision { return false }
  if p.SearchId != other.SearchId { return false }
  if p.OnAirVersion != other.OnAirVersion { return false }
  if p.Blockable != other.Blockable { return false }
  return true
}

func (p *BuddyDetail) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BuddyDetail(%+v)", *p)
}

type BuddyService interface {
  // Parameters:
  //  - Language
  //  - Country
  GetPopularBuddyLists(ctx context.Context, language string, country string) (_r []*BuddyList, _err error)
  // Parameters:
  //  - Language
  //  - Country
  //  - Classification
  //  - FromIndex
  //  - Count
  GetBuddyContacts(ctx context.Context, language string, country string, classification string, fromIndex int32, count int32) (_r []*talkservice.Contact, _err error)
  // Parameters:
  //  - BuddyMid
  GetBuddyDetail(ctx context.Context, buddyMid string) (_r *BuddyDetail, _err error)
}

type BuddyServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewBuddyServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BuddyServiceClient {
  return &BuddyServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewBuddyServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BuddyServiceClient {
  return &BuddyServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewBuddyServiceClient(c thrift.TClient) *BuddyServiceClient {
  return &BuddyServiceClient{
    c: c,
  }
}

func (p *BuddyServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *BuddyServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *BuddyServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - Language
//  - Country
func (p *BuddyServiceClient) GetPopularBuddyLists(ctx context.Context, language string, country string) (_r []*BuddyList, _err error) {
  var _args4 BuddyServiceGetPopularBuddyListsArgs
  _args4.Language = language
  _args4.Country = country
  var _result6 BuddyServiceGetPopularBuddyListsResult
  var _meta5 thrift.ResponseMeta
  _meta5, _err = p.Client_().Call(ctx, "getPopularBuddyLists", &_args4, &_result6)
  p.SetLastResponseMeta_(_meta5)
  if _err != nil {
    return
  }
  switch {
  case _result6.E!= nil:
    return _r, _result6.E
  }

  return _result6.GetSuccess(), nil
}

// Parameters:
//  - Language
//  - Country
//  - Classification
//  - FromIndex
//  - Count
func (p *BuddyServiceClient) GetBuddyContacts(ctx context.Context, language string, country string, classification string, fromIndex int32, count int32) (_r []*talkservice.Contact, _err error) {
  var _args7 BuddyServiceGetBuddyContactsArgs
  _args7.Language = language
  _args7.Country = country
  _args7.Classification = classification
  _args7.FromIndex = fromIndex
  _args7.Count = count
  var _result9 BuddyServiceGetBuddyContactsResult
  var _meta8 thrift.ResponseMeta
  _meta8, _err = p.Client_().Call(ctx, "getBuddyContacts", &_args7, &_result9)
  p.SetLastResponseMeta_(_meta8)
  if _err != nil {
    return
  }
  switch {
  case _result9.E!= nil:
    return _r, _result9.E
  }

  return _result9.GetSuccess(), nil
}

// Parameters:
//  - BuddyMid
func (p *BuddyServiceClient) GetBuddyDetail(ctx context.Context, buddyMid string) (_r *BuddyDetail, _err error) {
  var _args10 BuddyServiceGetBuddyDetailArgs
  _args10.BuddyMid = buddyMid
  var _result12 BuddyServiceGetBuddyDetailResult
  var _meta11 thrift.ResponseMeta
  _meta11, _err = p.Client_().Call(ctx, "getBuddyDetail", &_args10, &_result12)
  p.SetLastResponseMeta_(_meta11)
  if _err != nil {
    return
  }
  switch {
  case _result12.E!= nil:
    return _r, _result12.E
  }

  return _result12.GetSuccess(), nil
}

type BuddyServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler BuddyService
}

func (p *BuddyServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *BuddyServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *BuddyServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewBuddyServiceProcessor(handler BuddyService) *BuddyServiceProcessor {

  self13 := &BuddyServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self13.processorMap["getPopularBuddyLists"] = &buddyServiceProcessorGetPopularBuddyLists{handler:handler}
  self13.processorMap["getBuddyContacts"] = &buddyServiceProcessorGetBuddyContacts{handler:handler}
  self13.processorMap["getBuddyDetail"] = &buddyServiceProcessorGetBuddyDetail{handler:handler}
return self13
}

func (p *BuddyServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x14 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x14.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x14

}

type buddyServiceProcessorGetPopularBuddyLists struct {
  handler BuddyService
}

func (p *buddyServiceProcessorGetPopularBuddyLists) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BuddyServiceGetPopularBuddyListsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getPopularBuddyLists", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := BuddyServiceGetPopularBuddyListsResult{}
  var retval []*BuddyList
  if retval, err2 = p.handler.GetPopularBuddyLists(ctx, args.Language, args.Country); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *talkservice.TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getPopularBuddyLists: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getPopularBuddyLists", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getPopularBuddyLists", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type buddyServiceProcessorGetBuddyContacts struct {
  handler BuddyService
}

func (p *buddyServiceProcessorGetBuddyContacts) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BuddyServiceGetBuddyContactsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getBuddyContacts", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := BuddyServiceGetBuddyContactsResult{}
  var retval []*talkservice.Contact
  if retval, err2 = p.handler.GetBuddyContacts(ctx, args.Language, args.Country, args.Classification, args.FromIndex, args.Count); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *talkservice.TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBuddyContacts: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getBuddyContacts", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getBuddyContacts", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type buddyServiceProcessorGetBuddyDetail struct {
  handler BuddyService
}

func (p *buddyServiceProcessorGetBuddyDetail) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BuddyServiceGetBuddyDetailArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getBuddyDetail", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := BuddyServiceGetBuddyDetailResult{}
  var retval *BuddyDetail
  if retval, err2 = p.handler.GetBuddyDetail(ctx, args.BuddyMid); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *talkservice.TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBuddyDetail: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getBuddyDetail", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getBuddyDetail", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Language
//  - Country
type BuddyServiceGetPopularBuddyListsArgs struct {
  // unused field # 1
  Language string `thrift:"language,2" db:"language" json:"language"`
  Country string `thrift:"country,3" db:"country" json:"country"`
}

func NewBuddyServiceGetPopularBuddyListsArgs() *BuddyServiceGetPopularBuddyListsArgs {
  return &BuddyServiceGetPopularBuddyListsArgs{}
}


func (p *BuddyServiceGetPopularBuddyListsArgs) GetLanguage() string {
  return p.Language
}

func (p *BuddyServiceGetPopularBuddyListsArgs) GetCountry() string {
  return p.Country
}
func (p *BuddyServiceGetPopularBuddyListsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BuddyServiceGetPopularBuddyListsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Language = v
}
  return nil
}

func (p *BuddyServiceGetPopularBuddyListsArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Country = v
}
  return nil
}

func (p *BuddyServiceGetPopularBuddyListsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getPopularBuddyLists_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BuddyServiceGetPopularBuddyListsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "language", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:language: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Language)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.language (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:language: ", p), err) }
  return err
}

func (p *BuddyServiceGetPopularBuddyListsArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "country", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:country: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Country)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.country (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:country: ", p), err) }
  return err
}

func (p *BuddyServiceGetPopularBuddyListsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BuddyServiceGetPopularBuddyListsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type BuddyServiceGetPopularBuddyListsResult struct {
  Success []*BuddyList `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *talkservice.TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBuddyServiceGetPopularBuddyListsResult() *BuddyServiceGetPopularBuddyListsResult {
  return &BuddyServiceGetPopularBuddyListsResult{}
}

var BuddyServiceGetPopularBuddyListsResult_Success_DEFAULT []*BuddyList

func (p *BuddyServiceGetPopularBuddyListsResult) GetSuccess() []*BuddyList {
  return p.Success
}
var BuddyServiceGetPopularBuddyListsResult_E_DEFAULT *talkservice.TalkException
func (p *BuddyServiceGetPopularBuddyListsResult) GetE() *talkservice.TalkException {
  if !p.IsSetE() {
    return BuddyServiceGetPopularBuddyListsResult_E_DEFAULT
  }
return p.E
}
func (p *BuddyServiceGetPopularBuddyListsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BuddyServiceGetPopularBuddyListsResult) IsSetE() bool {
  return p.E != nil
}

func (p *BuddyServiceGetPopularBuddyListsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BuddyServiceGetPopularBuddyListsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*BuddyList, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem15 := &BuddyList{}
    if err := _elem15.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem15), err)
    }
    p.Success = append(p.Success, _elem15)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BuddyServiceGetPopularBuddyListsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &talkservice.TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BuddyServiceGetPopularBuddyListsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getPopularBuddyLists_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BuddyServiceGetPopularBuddyListsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BuddyServiceGetPopularBuddyListsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BuddyServiceGetPopularBuddyListsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BuddyServiceGetPopularBuddyListsResult(%+v)", *p)
}

// Attributes:
//  - Language
//  - Country
//  - Classification
//  - FromIndex
//  - Count
type BuddyServiceGetBuddyContactsArgs struct {
  // unused field # 1
  Language string `thrift:"language,2" db:"language" json:"language"`
  Country string `thrift:"country,3" db:"country" json:"country"`
  Classification string `thrift:"classification,4" db:"classification" json:"classification"`
  FromIndex int32 `thrift:"fromIndex,5" db:"fromIndex" json:"fromIndex"`
  Count int32 `thrift:"count,6" db:"count" json:"count"`
}

func NewBuddyServiceGetBuddyContactsArgs() *BuddyServiceGetBuddyContactsArgs {
  return &BuddyServiceGetBuddyContactsArgs{}
}


func (p *BuddyServiceGetBuddyContactsArgs) GetLanguage() string {
  return p.Language
}

func (p *BuddyServiceGetBuddyContactsArgs) GetCountry() string {
  return p.Country
}

func (p *BuddyServiceGetBuddyContactsArgs) GetClassification() string {
  return p.Classification
}

func (p *BuddyServiceGetBuddyContactsArgs) GetFromIndex() int32 {
  return p.FromIndex
}

func (p *BuddyServiceGetBuddyContactsArgs) GetCount() int32 {
  return p.Count
}
func (p *BuddyServiceGetBuddyContactsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BuddyServiceGetBuddyContactsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Language = v
}
  return nil
}

func (p *BuddyServiceGetBuddyContactsArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Country = v
}
  return nil
}

func (p *BuddyServiceGetBuddyContactsArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Classification = v
}
  return nil
}

func (p *BuddyServiceGetBuddyContactsArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.FromIndex = v
}
  return nil
}

func (p *BuddyServiceGetBuddyContactsArgs)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *BuddyServiceGetBuddyContactsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getBuddyContacts_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BuddyServiceGetBuddyContactsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "language", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:language: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Language)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.language (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:language: ", p), err) }
  return err
}

func (p *BuddyServiceGetBuddyContactsArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "country", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:country: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Country)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.country (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:country: ", p), err) }
  return err
}

func (p *BuddyServiceGetBuddyContactsArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "classification", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:classification: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Classification)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.classification (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:classification: ", p), err) }
  return err
}

func (p *BuddyServiceGetBuddyContactsArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fromIndex", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:fromIndex: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.FromIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromIndex (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:fromIndex: ", p), err) }
  return err
}

func (p *BuddyServiceGetBuddyContactsArgs) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "count", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:count: ", p), err) }
  return err
}

func (p *BuddyServiceGetBuddyContactsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BuddyServiceGetBuddyContactsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type BuddyServiceGetBuddyContactsResult struct {
  Success []*talkservice.Contact `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *talkservice.TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBuddyServiceGetBuddyContactsResult() *BuddyServiceGetBuddyContactsResult {
  return &BuddyServiceGetBuddyContactsResult{}
}

var BuddyServiceGetBuddyContactsResult_Success_DEFAULT []*talkservice.Contact

func (p *BuddyServiceGetBuddyContactsResult) GetSuccess() []*talkservice.Contact {
  return p.Success
}
var BuddyServiceGetBuddyContactsResult_E_DEFAULT *talkservice.TalkException
func (p *BuddyServiceGetBuddyContactsResult) GetE() *talkservice.TalkException {
  if !p.IsSetE() {
    return BuddyServiceGetBuddyContactsResult_E_DEFAULT
  }
return p.E
}
func (p *BuddyServiceGetBuddyContactsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BuddyServiceGetBuddyContactsResult) IsSetE() bool {
  return p.E != nil
}

func (p *BuddyServiceGetBuddyContactsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BuddyServiceGetBuddyContactsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*talkservice.Contact, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem16 := &talkservice.Contact{}
    if err := _elem16.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem16), err)
    }
    p.Success = append(p.Success, _elem16)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BuddyServiceGetBuddyContactsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &talkservice.TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BuddyServiceGetBuddyContactsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getBuddyContacts_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BuddyServiceGetBuddyContactsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BuddyServiceGetBuddyContactsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BuddyServiceGetBuddyContactsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BuddyServiceGetBuddyContactsResult(%+v)", *p)
}

// Attributes:
//  - BuddyMid
type BuddyServiceGetBuddyDetailArgs struct {
  // unused fields # 1 to 3
  BuddyMid string `thrift:"buddyMid,4" db:"buddyMid" json:"buddyMid"`
}

func NewBuddyServiceGetBuddyDetailArgs() *BuddyServiceGetBuddyDetailArgs {
  return &BuddyServiceGetBuddyDetailArgs{}
}


func (p *BuddyServiceGetBuddyDetailArgs) GetBuddyMid() string {
  return p.BuddyMid
}
func (p *BuddyServiceGetBuddyDetailArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BuddyServiceGetBuddyDetailArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.BuddyMid = v
}
  return nil
}

func (p *BuddyServiceGetBuddyDetailArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getBuddyDetail_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BuddyServiceGetBuddyDetailArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "buddyMid", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:buddyMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.BuddyMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.buddyMid (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:buddyMid: ", p), err) }
  return err
}

func (p *BuddyServiceGetBuddyDetailArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BuddyServiceGetBuddyDetailArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type BuddyServiceGetBuddyDetailResult struct {
  Success *BuddyDetail `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *talkservice.TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBuddyServiceGetBuddyDetailResult() *BuddyServiceGetBuddyDetailResult {
  return &BuddyServiceGetBuddyDetailResult{}
}

var BuddyServiceGetBuddyDetailResult_Success_DEFAULT *BuddyDetail
func (p *BuddyServiceGetBuddyDetailResult) GetSuccess() *BuddyDetail {
  if !p.IsSetSuccess() {
    return BuddyServiceGetBuddyDetailResult_Success_DEFAULT
  }
return p.Success
}
var BuddyServiceGetBuddyDetailResult_E_DEFAULT *talkservice.TalkException
func (p *BuddyServiceGetBuddyDetailResult) GetE() *talkservice.TalkException {
  if !p.IsSetE() {
    return BuddyServiceGetBuddyDetailResult_E_DEFAULT
  }
return p.E
}
func (p *BuddyServiceGetBuddyDetailResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BuddyServiceGetBuddyDetailResult) IsSetE() bool {
  return p.E != nil
}

func (p *BuddyServiceGetBuddyDetailResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BuddyServiceGetBuddyDetailResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &BuddyDetail{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BuddyServiceGetBuddyDetailResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &talkservice.TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BuddyServiceGetBuddyDetailResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getBuddyDetail_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BuddyServiceGetBuddyDetailResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BuddyServiceGetBuddyDetailResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BuddyServiceGetBuddyDetailResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BuddyServiceGetBuddyDetailResult(%+v)", *p)
}


