// Code generated by Thrift Compiler (0.14.1). DO NOT EDIT.

package secondaryqrcodeloginpermitnoticeservice

import (
	"bytes"
	"context"
	"fmt"
	"time"

	"github.com/apache/thrift/lib/go/thrift"
	"github.com/mopeneko/line-selfbot/linethrift/secondaryqrcodeloginservice"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

var _ = secondaryqrcodeloginservice.GoUnusedProtection__

type CheckQrCodeVerifiedResponse struct {
}

func NewCheckQrCodeVerifiedResponse() *CheckQrCodeVerifiedResponse {
	return &CheckQrCodeVerifiedResponse{}
}

func (p *CheckQrCodeVerifiedResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CheckQrCodeVerifiedResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "CheckQrCodeVerifiedResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CheckQrCodeVerifiedResponse) Equals(other *CheckQrCodeVerifiedResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	return true
}

func (p *CheckQrCodeVerifiedResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckQrCodeVerifiedResponse(%+v)", *p)
}

// Attributes:
//  - AuthSessionId
type CheckQrCodeVerifiedRequest struct {
	AuthSessionId string `thrift:"authSessionId,1" db:"authSessionId" json:"authSessionId"`
}

func NewCheckQrCodeVerifiedRequest() *CheckQrCodeVerifiedRequest {
	return &CheckQrCodeVerifiedRequest{}
}

func (p *CheckQrCodeVerifiedRequest) GetAuthSessionId() string {
	return p.AuthSessionId
}
func (p *CheckQrCodeVerifiedRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CheckQrCodeVerifiedRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthSessionId = v
	}
	return nil
}

func (p *CheckQrCodeVerifiedRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "CheckQrCodeVerifiedRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CheckQrCodeVerifiedRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "authSessionId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authSessionId: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.AuthSessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authSessionId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authSessionId: ", p), err)
	}
	return err
}

func (p *CheckQrCodeVerifiedRequest) Equals(other *CheckQrCodeVerifiedRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.AuthSessionId != other.AuthSessionId {
		return false
	}
	return true
}

func (p *CheckQrCodeVerifiedRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckQrCodeVerifiedRequest(%+v)", *p)
}

type CheckPinCodeVerifiedResponse struct {
}

func NewCheckPinCodeVerifiedResponse() *CheckPinCodeVerifiedResponse {
	return &CheckPinCodeVerifiedResponse{}
}

func (p *CheckPinCodeVerifiedResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CheckPinCodeVerifiedResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "CheckPinCodeVerifiedResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CheckPinCodeVerifiedResponse) Equals(other *CheckPinCodeVerifiedResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	return true
}

func (p *CheckPinCodeVerifiedResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckPinCodeVerifiedResponse(%+v)", *p)
}

// Attributes:
//  - AuthSessionId
type CheckPinCodeVerifiedRequest struct {
	AuthSessionId string `thrift:"authSessionId,1" db:"authSessionId" json:"authSessionId"`
}

func NewCheckPinCodeVerifiedRequest() *CheckPinCodeVerifiedRequest {
	return &CheckPinCodeVerifiedRequest{}
}

func (p *CheckPinCodeVerifiedRequest) GetAuthSessionId() string {
	return p.AuthSessionId
}
func (p *CheckPinCodeVerifiedRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CheckPinCodeVerifiedRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthSessionId = v
	}
	return nil
}

func (p *CheckPinCodeVerifiedRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "CheckPinCodeVerifiedRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CheckPinCodeVerifiedRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "authSessionId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authSessionId: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.AuthSessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authSessionId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authSessionId: ", p), err)
	}
	return err
}

func (p *CheckPinCodeVerifiedRequest) Equals(other *CheckPinCodeVerifiedRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.AuthSessionId != other.AuthSessionId {
		return false
	}
	return true
}

func (p *CheckPinCodeVerifiedRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckPinCodeVerifiedRequest(%+v)", *p)
}

type SecondaryQrCodeLoginPermitNoticeService interface {
	// Parameters:
	//  - Request
	CheckQrCodeVerified(ctx context.Context, request *CheckQrCodeVerifiedRequest) (_r *CheckQrCodeVerifiedResponse, _err error)
	// Parameters:
	//  - Request
	CheckPinCodeVerified(ctx context.Context, request *CheckPinCodeVerifiedRequest) (_r *CheckPinCodeVerifiedResponse, _err error)
}

type SecondaryQrCodeLoginPermitNoticeServiceClient struct {
	c    thrift.TClient
	meta thrift.ResponseMeta
}

func NewSecondaryQrCodeLoginPermitNoticeServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *SecondaryQrCodeLoginPermitNoticeServiceClient {
	return &SecondaryQrCodeLoginPermitNoticeServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewSecondaryQrCodeLoginPermitNoticeServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *SecondaryQrCodeLoginPermitNoticeServiceClient {
	return &SecondaryQrCodeLoginPermitNoticeServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewSecondaryQrCodeLoginPermitNoticeServiceClient(c thrift.TClient) *SecondaryQrCodeLoginPermitNoticeServiceClient {
	return &SecondaryQrCodeLoginPermitNoticeServiceClient{
		c: c,
	}
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceClient) LastResponseMeta_() thrift.ResponseMeta {
	return p.meta
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
	p.meta = meta
}

// Parameters:
//  - Request
func (p *SecondaryQrCodeLoginPermitNoticeServiceClient) CheckQrCodeVerified(ctx context.Context, request *CheckQrCodeVerifiedRequest) (_r *CheckQrCodeVerifiedResponse, _err error) {
	var _args0 SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedArgs
	_args0.Request = request
	var _result2 SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedResult
	var _meta1 thrift.ResponseMeta
	_meta1, _err = p.Client_().Call(ctx, "checkQrCodeVerified", &_args0, &_result2)
	p.SetLastResponseMeta_(_meta1)
	if _err != nil {
		return
	}
	switch {
	case _result2.E != nil:
		return _r, _result2.E
	}

	return _result2.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *SecondaryQrCodeLoginPermitNoticeServiceClient) CheckPinCodeVerified(ctx context.Context, request *CheckPinCodeVerifiedRequest) (_r *CheckPinCodeVerifiedResponse, _err error) {
	var _args3 SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedArgs
	_args3.Request = request
	var _result5 SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedResult
	var _meta4 thrift.ResponseMeta
	_meta4, _err = p.Client_().Call(ctx, "checkPinCodeVerified", &_args3, &_result5)
	p.SetLastResponseMeta_(_meta4)
	if _err != nil {
		return
	}
	switch {
	case _result5.E != nil:
		return _r, _result5.E
	}

	return _result5.GetSuccess(), nil
}

type SecondaryQrCodeLoginPermitNoticeServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      SecondaryQrCodeLoginPermitNoticeService
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewSecondaryQrCodeLoginPermitNoticeServiceProcessor(handler SecondaryQrCodeLoginPermitNoticeService) *SecondaryQrCodeLoginPermitNoticeServiceProcessor {

	self6 := &SecondaryQrCodeLoginPermitNoticeServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self6.processorMap["checkQrCodeVerified"] = &secondaryQrCodeLoginPermitNoticeServiceProcessorCheckQrCodeVerified{handler: handler}
	self6.processorMap["checkPinCodeVerified"] = &secondaryQrCodeLoginPermitNoticeServiceProcessorCheckPinCodeVerified{handler: handler}
	return self6
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
	if err2 != nil {
		return false, thrift.WrapTException(err2)
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(ctx, thrift.STRUCT)
	iprot.ReadMessageEnd(ctx)
	x7 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
	x7.Write(ctx, oprot)
	oprot.WriteMessageEnd(ctx)
	oprot.Flush(ctx)
	return false, x7

}

type secondaryQrCodeLoginPermitNoticeServiceProcessorCheckQrCodeVerified struct {
	handler SecondaryQrCodeLoginPermitNoticeService
}

func (p *secondaryQrCodeLoginPermitNoticeServiceProcessorCheckQrCodeVerified) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedArgs{}
	var err2 error
	if err2 = args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "checkQrCodeVerified", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedResult{}
	var retval *CheckQrCodeVerifiedResponse
	if retval, err2 = p.handler.CheckQrCodeVerified(ctx, args.Request); err2 != nil {
		tickerCancel()
		switch v := err2.(type) {
		case *secondaryqrcodeloginservice.SecondaryQrCodeException:
			result.E = v
		default:
			if err2 == thrift.ErrAbandonRequest {
				return false, thrift.WrapTException(err2)
			}
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing checkQrCodeVerified: "+err2.Error())
			oprot.WriteMessageBegin(ctx, "checkQrCodeVerified", thrift.EXCEPTION, seqId)
			x.Write(ctx, oprot)
			oprot.WriteMessageEnd(ctx)
			oprot.Flush(ctx)
			return true, thrift.WrapTException(err2)
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 = oprot.WriteMessageBegin(ctx, "checkQrCodeVerified", thrift.REPLY, seqId); err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err != nil {
		return
	}
	return true, err
}

type secondaryQrCodeLoginPermitNoticeServiceProcessorCheckPinCodeVerified struct {
	handler SecondaryQrCodeLoginPermitNoticeService
}

func (p *secondaryQrCodeLoginPermitNoticeServiceProcessorCheckPinCodeVerified) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedArgs{}
	var err2 error
	if err2 = args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "checkPinCodeVerified", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedResult{}
	var retval *CheckPinCodeVerifiedResponse
	if retval, err2 = p.handler.CheckPinCodeVerified(ctx, args.Request); err2 != nil {
		tickerCancel()
		switch v := err2.(type) {
		case *secondaryqrcodeloginservice.SecondaryQrCodeException:
			result.E = v
		default:
			if err2 == thrift.ErrAbandonRequest {
				return false, thrift.WrapTException(err2)
			}
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing checkPinCodeVerified: "+err2.Error())
			oprot.WriteMessageBegin(ctx, "checkPinCodeVerified", thrift.EXCEPTION, seqId)
			x.Write(ctx, oprot)
			oprot.WriteMessageEnd(ctx)
			oprot.Flush(ctx)
			return true, thrift.WrapTException(err2)
		}
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 = oprot.WriteMessageBegin(ctx, "checkPinCodeVerified", thrift.REPLY, seqId); err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = thrift.WrapTException(err2)
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Request
type SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedArgs struct {
	Request *CheckQrCodeVerifiedRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedArgs() *SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedArgs {
	return &SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedArgs{}
}

var SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedArgs_Request_DEFAULT *CheckQrCodeVerifiedRequest

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedArgs) GetRequest() *CheckQrCodeVerifiedRequest {
	if !p.IsSetRequest() {
		return SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Request = &CheckQrCodeVerifiedRequest{}
	if err := p.Request.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "checkQrCodeVerified_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedResult struct {
	Success *CheckQrCodeVerifiedResponse                          `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *secondaryqrcodeloginservice.SecondaryQrCodeException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedResult() *SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedResult {
	return &SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedResult{}
}

var SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedResult_Success_DEFAULT *CheckQrCodeVerifiedResponse

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedResult) GetSuccess() *CheckQrCodeVerifiedResponse {
	if !p.IsSetSuccess() {
		return SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedResult_Success_DEFAULT
	}
	return p.Success
}

var SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedResult_E_DEFAULT *secondaryqrcodeloginservice.SecondaryQrCodeException

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedResult) GetE() *secondaryqrcodeloginservice.SecondaryQrCodeException {
	if !p.IsSetE() {
		return SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedResult_E_DEFAULT
	}
	return p.E
}
func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedResult) IsSetE() bool {
	return p.E != nil
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &CheckQrCodeVerifiedResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &secondaryqrcodeloginservice.SecondaryQrCodeException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "checkQrCodeVerified_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedResult(%+v)", *p)
}

// Attributes:
//  - Request
type SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedArgs struct {
	Request *CheckPinCodeVerifiedRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedArgs() *SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedArgs {
	return &SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedArgs{}
}

var SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedArgs_Request_DEFAULT *CheckPinCodeVerifiedRequest

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedArgs) GetRequest() *CheckPinCodeVerifiedRequest {
	if !p.IsSetRequest() {
		return SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Request = &CheckPinCodeVerifiedRequest{}
	if err := p.Request.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "checkPinCodeVerified_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedResult struct {
	Success *CheckPinCodeVerifiedResponse                         `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *secondaryqrcodeloginservice.SecondaryQrCodeException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedResult() *SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedResult {
	return &SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedResult{}
}

var SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedResult_Success_DEFAULT *CheckPinCodeVerifiedResponse

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedResult) GetSuccess() *CheckPinCodeVerifiedResponse {
	if !p.IsSetSuccess() {
		return SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedResult_Success_DEFAULT
	}
	return p.Success
}

var SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedResult_E_DEFAULT *secondaryqrcodeloginservice.SecondaryQrCodeException

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedResult) GetE() *secondaryqrcodeloginservice.SecondaryQrCodeException {
	if !p.IsSetE() {
		return SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedResult_E_DEFAULT
	}
	return p.E
}
func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedResult) IsSetE() bool {
	return p.E != nil
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &CheckPinCodeVerifiedResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &secondaryqrcodeloginservice.SecondaryQrCodeException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "checkPinCodeVerified_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedResult(%+v)", *p)
}
