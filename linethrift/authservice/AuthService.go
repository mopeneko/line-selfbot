// Code generated by Thrift Compiler (0.14.1). DO NOT EDIT.

package authservice

import(
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"time"
	"github.com/apache/thrift/lib/go/thrift"
	"talkservice"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

var _ = talkservice.GoUnusedProtection__
type LoginResultType int64
const (
  LoginResultType_SUCCESS LoginResultType = 1
  LoginResultType_REQUIRE_QRCODE LoginResultType = 2
  LoginResultType_REQUIRE_DEVICE_CONFIRM LoginResultType = 3
  LoginResultType_REQUIRE_SMS_CONFIRM LoginResultType = 4
)

func (p LoginResultType) String() string {
  switch p {
  case LoginResultType_SUCCESS: return "SUCCESS"
  case LoginResultType_REQUIRE_QRCODE: return "REQUIRE_QRCODE"
  case LoginResultType_REQUIRE_DEVICE_CONFIRM: return "REQUIRE_DEVICE_CONFIRM"
  case LoginResultType_REQUIRE_SMS_CONFIRM: return "REQUIRE_SMS_CONFIRM"
  }
  return "<UNSET>"
}

func LoginResultTypeFromString(s string) (LoginResultType, error) {
  switch s {
  case "SUCCESS": return LoginResultType_SUCCESS, nil 
  case "REQUIRE_QRCODE": return LoginResultType_REQUIRE_QRCODE, nil 
  case "REQUIRE_DEVICE_CONFIRM": return LoginResultType_REQUIRE_DEVICE_CONFIRM, nil 
  case "REQUIRE_SMS_CONFIRM": return LoginResultType_REQUIRE_SMS_CONFIRM, nil 
  }
  return LoginResultType(0), fmt.Errorf("not a valid LoginResultType string")
}


func LoginResultTypePtr(v LoginResultType) *LoginResultType { return &v }

func (p LoginResultType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *LoginResultType) UnmarshalText(text []byte) error {
q, err := LoginResultTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *LoginResultType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = LoginResultType(v)
return nil
}

func (p * LoginResultType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type LoginType int64
const (
  LoginType_ID_CREDENTIAL LoginType = 0
  LoginType_QRCODE LoginType = 1
  LoginType_ID_CREDENTIAL_WITH_E2EE LoginType = 2
)

func (p LoginType) String() string {
  switch p {
  case LoginType_ID_CREDENTIAL: return "ID_CREDENTIAL"
  case LoginType_QRCODE: return "QRCODE"
  case LoginType_ID_CREDENTIAL_WITH_E2EE: return "ID_CREDENTIAL_WITH_E2EE"
  }
  return "<UNSET>"
}

func LoginTypeFromString(s string) (LoginType, error) {
  switch s {
  case "ID_CREDENTIAL": return LoginType_ID_CREDENTIAL, nil 
  case "QRCODE": return LoginType_QRCODE, nil 
  case "ID_CREDENTIAL_WITH_E2EE": return LoginType_ID_CREDENTIAL_WITH_E2EE, nil 
  }
  return LoginType(0), fmt.Errorf("not a valid LoginType string")
}


func LoginTypePtr(v LoginType) *LoginType { return &v }

func (p LoginType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *LoginType) UnmarshalText(text []byte) error {
q, err := LoginTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *LoginType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = LoginType(v)
return nil
}

func (p * LoginType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type IdentityCredentialResponseType int64
const (
  IdentityCredentialResponseType_UNKNOWN IdentityCredentialResponseType = 0
  IdentityCredentialResponseType_SUCCESS IdentityCredentialResponseType = 1
  IdentityCredentialResponseType_REQUIRE_SERVER_SIDE_EMAIL IdentityCredentialResponseType = 2
  IdentityCredentialResponseType_REQUIRE_CLIENT_SIDE_EMAIL IdentityCredentialResponseType = 3
)

func (p IdentityCredentialResponseType) String() string {
  switch p {
  case IdentityCredentialResponseType_UNKNOWN: return "UNKNOWN"
  case IdentityCredentialResponseType_SUCCESS: return "SUCCESS"
  case IdentityCredentialResponseType_REQUIRE_SERVER_SIDE_EMAIL: return "REQUIRE_SERVER_SIDE_EMAIL"
  case IdentityCredentialResponseType_REQUIRE_CLIENT_SIDE_EMAIL: return "REQUIRE_CLIENT_SIDE_EMAIL"
  }
  return "<UNSET>"
}

func IdentityCredentialResponseTypeFromString(s string) (IdentityCredentialResponseType, error) {
  switch s {
  case "UNKNOWN": return IdentityCredentialResponseType_UNKNOWN, nil 
  case "SUCCESS": return IdentityCredentialResponseType_SUCCESS, nil 
  case "REQUIRE_SERVER_SIDE_EMAIL": return IdentityCredentialResponseType_REQUIRE_SERVER_SIDE_EMAIL, nil 
  case "REQUIRE_CLIENT_SIDE_EMAIL": return IdentityCredentialResponseType_REQUIRE_CLIENT_SIDE_EMAIL, nil 
  }
  return IdentityCredentialResponseType(0), fmt.Errorf("not a valid IdentityCredentialResponseType string")
}


func IdentityCredentialResponseTypePtr(v IdentityCredentialResponseType) *IdentityCredentialResponseType { return &v }

func (p IdentityCredentialResponseType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *IdentityCredentialResponseType) UnmarshalText(text []byte) error {
q, err := IdentityCredentialResponseTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *IdentityCredentialResponseType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = IdentityCredentialResponseType(v)
return nil
}

func (p * IdentityCredentialResponseType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type EncryptionKeyVersion int64
const (
  EncryptionKeyVersion_UNKNOWN EncryptionKeyVersion = 0
  EncryptionKeyVersion_V1 EncryptionKeyVersion = 1
)

func (p EncryptionKeyVersion) String() string {
  switch p {
  case EncryptionKeyVersion_UNKNOWN: return "UNKNOWN"
  case EncryptionKeyVersion_V1: return "V1"
  }
  return "<UNSET>"
}

func EncryptionKeyVersionFromString(s string) (EncryptionKeyVersion, error) {
  switch s {
  case "UNKNOWN": return EncryptionKeyVersion_UNKNOWN, nil 
  case "V1": return EncryptionKeyVersion_V1, nil 
  }
  return EncryptionKeyVersion(0), fmt.Errorf("not a valid EncryptionKeyVersion string")
}


func EncryptionKeyVersionPtr(v EncryptionKeyVersion) *EncryptionKeyVersion { return &v }

func (p EncryptionKeyVersion) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *EncryptionKeyVersion) UnmarshalText(text []byte) error {
q, err := EncryptionKeyVersionFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *EncryptionKeyVersion) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = EncryptionKeyVersion(v)
return nil
}

func (p * EncryptionKeyVersion) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - AccessToken
//  - RefreshToken
//  - AppId
type TokenIssueResult_ struct {
  AccessToken string `thrift:"accessToken,1" db:"accessToken" json:"accessToken"`
  RefreshToken string `thrift:"refreshToken,2" db:"refreshToken" json:"refreshToken"`
  AppId string `thrift:"appId,3" db:"appId" json:"appId"`
}

func NewTokenIssueResult_() *TokenIssueResult_ {
  return &TokenIssueResult_{}
}


func (p *TokenIssueResult_) GetAccessToken() string {
  return p.AccessToken
}

func (p *TokenIssueResult_) GetRefreshToken() string {
  return p.RefreshToken
}

func (p *TokenIssueResult_) GetAppId() string {
  return p.AppId
}
func (p *TokenIssueResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TokenIssueResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AccessToken = v
}
  return nil
}

func (p *TokenIssueResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RefreshToken = v
}
  return nil
}

func (p *TokenIssueResult_)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AppId = v
}
  return nil
}

func (p *TokenIssueResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TokenIssueResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TokenIssueResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "accessToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:accessToken: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AccessToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accessToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:accessToken: ", p), err) }
  return err
}

func (p *TokenIssueResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "refreshToken", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:refreshToken: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RefreshToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.refreshToken (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:refreshToken: ", p), err) }
  return err
}

func (p *TokenIssueResult_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "appId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:appId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:appId: ", p), err) }
  return err
}

func (p *TokenIssueResult_) Equals(other *TokenIssueResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AccessToken != other.AccessToken { return false }
  if p.RefreshToken != other.RefreshToken { return false }
  if p.AppId != other.AppId { return false }
  return true
}

func (p *TokenIssueResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TokenIssueResult_(%+v)", *p)
}

// Attributes:
//  - AuthToken
//  - Certificate
//  - Verifier
//  - PinCode
//  - Type
//  - LastPrimaryBindTime
//  - DisplayMessage
//  - SessionForSMSConfirm
//  - TokenIssueResult_
type LoginResult_ struct {
  AuthToken string `thrift:"authToken,1" db:"authToken" json:"authToken"`
  Certificate string `thrift:"certificate,2" db:"certificate" json:"certificate"`
  Verifier string `thrift:"verifier,3" db:"verifier" json:"verifier"`
  PinCode string `thrift:"pinCode,4" db:"pinCode" json:"pinCode"`
  Type LoginResultType `thrift:"type,5" db:"type" json:"type"`
  LastPrimaryBindTime int64 `thrift:"lastPrimaryBindTime,6" db:"lastPrimaryBindTime" json:"lastPrimaryBindTime"`
  DisplayMessage string `thrift:"displayMessage,7" db:"displayMessage" json:"displayMessage"`
  SessionForSMSConfirm *talkservice.VerificationSessionData `thrift:"sessionForSMSConfirm,8" db:"sessionForSMSConfirm" json:"sessionForSMSConfirm"`
  TokenIssueResult_ *TokenIssueResult_ `thrift:"tokenIssueResult,9" db:"tokenIssueResult" json:"tokenIssueResult"`
}

func NewLoginResult_() *LoginResult_ {
  return &LoginResult_{}
}


func (p *LoginResult_) GetAuthToken() string {
  return p.AuthToken
}

func (p *LoginResult_) GetCertificate() string {
  return p.Certificate
}

func (p *LoginResult_) GetVerifier() string {
  return p.Verifier
}

func (p *LoginResult_) GetPinCode() string {
  return p.PinCode
}

func (p *LoginResult_) GetType() LoginResultType {
  return p.Type
}

func (p *LoginResult_) GetLastPrimaryBindTime() int64 {
  return p.LastPrimaryBindTime
}

func (p *LoginResult_) GetDisplayMessage() string {
  return p.DisplayMessage
}
var LoginResult__SessionForSMSConfirm_DEFAULT *talkservice.VerificationSessionData
func (p *LoginResult_) GetSessionForSMSConfirm() *talkservice.VerificationSessionData {
  if !p.IsSetSessionForSMSConfirm() {
    return LoginResult__SessionForSMSConfirm_DEFAULT
  }
return p.SessionForSMSConfirm
}
var LoginResult__TokenIssueResult__DEFAULT *TokenIssueResult_
func (p *LoginResult_) GetTokenIssueResult_() *TokenIssueResult_ {
  if !p.IsSetTokenIssueResult_() {
    return LoginResult__TokenIssueResult__DEFAULT
  }
return p.TokenIssueResult_
}
func (p *LoginResult_) IsSetSessionForSMSConfirm() bool {
  return p.SessionForSMSConfirm != nil
}

func (p *LoginResult_) IsSetTokenIssueResult_() bool {
  return p.TokenIssueResult_ != nil
}

func (p *LoginResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LoginResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AuthToken = v
}
  return nil
}

func (p *LoginResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Certificate = v
}
  return nil
}

func (p *LoginResult_)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Verifier = v
}
  return nil
}

func (p *LoginResult_)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PinCode = v
}
  return nil
}

func (p *LoginResult_)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := LoginResultType(v)
  p.Type = temp
}
  return nil
}

func (p *LoginResult_)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.LastPrimaryBindTime = v
}
  return nil
}

func (p *LoginResult_)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.DisplayMessage = v
}
  return nil
}

func (p *LoginResult_)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  p.SessionForSMSConfirm = &talkservice.VerificationSessionData{}
  if err := p.SessionForSMSConfirm.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SessionForSMSConfirm), err)
  }
  return nil
}

func (p *LoginResult_)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  p.TokenIssueResult_ = &TokenIssueResult_{}
  if err := p.TokenIssueResult_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TokenIssueResult_), err)
  }
  return nil
}

func (p *LoginResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "LoginResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LoginResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "authToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authToken: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AuthToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authToken: ", p), err) }
  return err
}

func (p *LoginResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "certificate", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:certificate: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Certificate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.certificate (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:certificate: ", p), err) }
  return err
}

func (p *LoginResult_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "verifier", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:verifier: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Verifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.verifier (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:verifier: ", p), err) }
  return err
}

func (p *LoginResult_) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pinCode", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:pinCode: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PinCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pinCode (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:pinCode: ", p), err) }
  return err
}

func (p *LoginResult_) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:type: ", p), err) }
  return err
}

func (p *LoginResult_) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastPrimaryBindTime", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:lastPrimaryBindTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LastPrimaryBindTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastPrimaryBindTime (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:lastPrimaryBindTime: ", p), err) }
  return err
}

func (p *LoginResult_) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "displayMessage", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:displayMessage: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DisplayMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.displayMessage (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:displayMessage: ", p), err) }
  return err
}

func (p *LoginResult_) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sessionForSMSConfirm", thrift.STRUCT, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:sessionForSMSConfirm: ", p), err) }
  if err := p.SessionForSMSConfirm.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SessionForSMSConfirm), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:sessionForSMSConfirm: ", p), err) }
  return err
}

func (p *LoginResult_) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tokenIssueResult", thrift.STRUCT, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:tokenIssueResult: ", p), err) }
  if err := p.TokenIssueResult_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TokenIssueResult_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:tokenIssueResult: ", p), err) }
  return err
}

func (p *LoginResult_) Equals(other *LoginResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AuthToken != other.AuthToken { return false }
  if p.Certificate != other.Certificate { return false }
  if p.Verifier != other.Verifier { return false }
  if p.PinCode != other.PinCode { return false }
  if p.Type != other.Type { return false }
  if p.LastPrimaryBindTime != other.LastPrimaryBindTime { return false }
  if p.DisplayMessage != other.DisplayMessage { return false }
  if !p.SessionForSMSConfirm.Equals(other.SessionForSMSConfirm) { return false }
  if !p.TokenIssueResult_.Equals(other.TokenIssueResult_) { return false }
  return true
}

func (p *LoginResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LoginResult_(%+v)", *p)
}

// Attributes:
//  - E2eeVersion
//  - Type
//  - IdentityProvider
//  - Identifier
//  - Password
//  - KeepLoggedIn
//  - AccessLocation
//  - SystemName
//  - Certificate
//  - Verifier
//  - Secret
type LoginRequest struct {
  Type LoginType `thrift:"type,1" db:"type" json:"type"`
  IdentityProvider talkservice.IdentityProvider `thrift:"identityProvider,2" db:"identityProvider" json:"identityProvider"`
  Identifier string `thrift:"identifier,3" db:"identifier" json:"identifier"`
  Password string `thrift:"password,4" db:"password" json:"password"`
  KeepLoggedIn bool `thrift:"keepLoggedIn,5" db:"keepLoggedIn" json:"keepLoggedIn"`
  AccessLocation string `thrift:"accessLocation,6" db:"accessLocation" json:"accessLocation"`
  SystemName string `thrift:"systemName,7" db:"systemName" json:"systemName"`
  Certificate string `thrift:"certificate,8" db:"certificate" json:"certificate"`
  Verifier string `thrift:"verifier,9" db:"verifier" json:"verifier"`
  Secret string `thrift:"secret,10" db:"secret" json:"secret"`
  E2eeVersion int32 `thrift:"e2eeVersion,11" db:"e2eeVersion" json:"e2eeVersion"`
}

func NewLoginRequest() *LoginRequest {
  return &LoginRequest{}
}


func (p *LoginRequest) GetE2eeVersion() int32 {
  return p.E2eeVersion
}

func (p *LoginRequest) GetType() LoginType {
  return p.Type
}

func (p *LoginRequest) GetIdentityProvider() talkservice.IdentityProvider {
  return p.IdentityProvider
}

func (p *LoginRequest) GetIdentifier() string {
  return p.Identifier
}

func (p *LoginRequest) GetPassword() string {
  return p.Password
}

func (p *LoginRequest) GetKeepLoggedIn() bool {
  return p.KeepLoggedIn
}

func (p *LoginRequest) GetAccessLocation() string {
  return p.AccessLocation
}

func (p *LoginRequest) GetSystemName() string {
  return p.SystemName
}

func (p *LoginRequest) GetCertificate() string {
  return p.Certificate
}

func (p *LoginRequest) GetVerifier() string {
  return p.Verifier
}

func (p *LoginRequest) GetSecret() string {
  return p.Secret
}
func (p *LoginRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 11:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LoginRequest)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.E2eeVersion = v
}
  return nil
}

func (p *LoginRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := LoginType(v)
  p.Type = temp
}
  return nil
}

func (p *LoginRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := talkservice.IdentityProvider(v)
  p.IdentityProvider = temp
}
  return nil
}

func (p *LoginRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Identifier = v
}
  return nil
}

func (p *LoginRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *LoginRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.KeepLoggedIn = v
}
  return nil
}

func (p *LoginRequest)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.AccessLocation = v
}
  return nil
}

func (p *LoginRequest)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.SystemName = v
}
  return nil
}

func (p *LoginRequest)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Certificate = v
}
  return nil
}

func (p *LoginRequest)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Verifier = v
}
  return nil
}

func (p *LoginRequest)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Secret = v
}
  return nil
}

func (p *LoginRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "LoginRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LoginRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *LoginRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "identityProvider", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:identityProvider: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.IdentityProvider)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.identityProvider (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:identityProvider: ", p), err) }
  return err
}

func (p *LoginRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "identifier", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:identifier: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Identifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.identifier (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:identifier: ", p), err) }
  return err
}

func (p *LoginRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "password", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:password: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:password: ", p), err) }
  return err
}

func (p *LoginRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keepLoggedIn", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:keepLoggedIn: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.KeepLoggedIn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keepLoggedIn (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:keepLoggedIn: ", p), err) }
  return err
}

func (p *LoginRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "accessLocation", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:accessLocation: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AccessLocation)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accessLocation (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:accessLocation: ", p), err) }
  return err
}

func (p *LoginRequest) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "systemName", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:systemName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SystemName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.systemName (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:systemName: ", p), err) }
  return err
}

func (p *LoginRequest) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "certificate", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:certificate: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Certificate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.certificate (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:certificate: ", p), err) }
  return err
}

func (p *LoginRequest) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "verifier", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:verifier: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Verifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.verifier (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:verifier: ", p), err) }
  return err
}

func (p *LoginRequest) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "secret", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:secret: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Secret)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.secret (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:secret: ", p), err) }
  return err
}

func (p *LoginRequest) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "e2eeVersion", thrift.I32, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:e2eeVersion: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.E2eeVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.e2eeVersion (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:e2eeVersion: ", p), err) }
  return err
}

func (p *LoginRequest) Equals(other *LoginRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Type != other.Type { return false }
  if p.IdentityProvider != other.IdentityProvider { return false }
  if p.Identifier != other.Identifier { return false }
  if p.Password != other.Password { return false }
  if p.KeepLoggedIn != other.KeepLoggedIn { return false }
  if p.AccessLocation != other.AccessLocation { return false }
  if p.SystemName != other.SystemName { return false }
  if p.Certificate != other.Certificate { return false }
  if p.Verifier != other.Verifier { return false }
  if p.Secret != other.Secret { return false }
  if p.E2eeVersion != other.E2eeVersion { return false }
  return true
}

func (p *LoginRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LoginRequest(%+v)", *p)
}

// Attributes:
//  - MetaData
type AuthSessionRequest struct {
  MetaData map[string]string `thrift:"metaData,1" db:"metaData" json:"metaData"`
}

func NewAuthSessionRequest() *AuthSessionRequest {
  return &AuthSessionRequest{}
}


func (p *AuthSessionRequest) GetMetaData() map[string]string {
  return p.MetaData
}
func (p *AuthSessionRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AuthSessionRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.MetaData =  tMap
  for i := 0; i < size; i ++ {
var _key0 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key0 = v
}
var _val1 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val1 = v
}
    p.MetaData[_key0] = _val1
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AuthSessionRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AuthSessionRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthSessionRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "metaData", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:metaData: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.MetaData)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.MetaData {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:metaData: ", p), err) }
  return err
}

func (p *AuthSessionRequest) Equals(other *AuthSessionRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.MetaData) != len(other.MetaData) { return false }
  for k, _tgt := range p.MetaData {
    _src2 := other.MetaData[k]
    if _tgt != _src2 { return false }
  }
  return true
}

func (p *AuthSessionRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthSessionRequest(%+v)", *p)
}

// Attributes:
//  - MetaData
//  - ResponseType
//  - ConfirmationVerifier
//  - TimeoutInSeconds
type IdentityCredentialResponse struct {
  MetaData map[string]string `thrift:"metaData,1" db:"metaData" json:"metaData"`
  ResponseType IdentityCredentialResponseType `thrift:"responseType,2" db:"responseType" json:"responseType"`
  ConfirmationVerifier string `thrift:"confirmationVerifier,3" db:"confirmationVerifier" json:"confirmationVerifier"`
  TimeoutInSeconds int64 `thrift:"timeoutInSeconds,4" db:"timeoutInSeconds" json:"timeoutInSeconds"`
}

func NewIdentityCredentialResponse() *IdentityCredentialResponse {
  return &IdentityCredentialResponse{}
}


func (p *IdentityCredentialResponse) GetMetaData() map[string]string {
  return p.MetaData
}

func (p *IdentityCredentialResponse) GetResponseType() IdentityCredentialResponseType {
  return p.ResponseType
}

func (p *IdentityCredentialResponse) GetConfirmationVerifier() string {
  return p.ConfirmationVerifier
}

func (p *IdentityCredentialResponse) GetTimeoutInSeconds() int64 {
  return p.TimeoutInSeconds
}
func (p *IdentityCredentialResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IdentityCredentialResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.MetaData =  tMap
  for i := 0; i < size; i ++ {
var _key3 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key3 = v
}
var _val4 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val4 = v
}
    p.MetaData[_key3] = _val4
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *IdentityCredentialResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := IdentityCredentialResponseType(v)
  p.ResponseType = temp
}
  return nil
}

func (p *IdentityCredentialResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ConfirmationVerifier = v
}
  return nil
}

func (p *IdentityCredentialResponse)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.TimeoutInSeconds = v
}
  return nil
}

func (p *IdentityCredentialResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IdentityCredentialResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IdentityCredentialResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "metaData", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:metaData: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.MetaData)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.MetaData {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:metaData: ", p), err) }
  return err
}

func (p *IdentityCredentialResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "responseType", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:responseType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ResponseType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.responseType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:responseType: ", p), err) }
  return err
}

func (p *IdentityCredentialResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "confirmationVerifier", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:confirmationVerifier: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ConfirmationVerifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.confirmationVerifier (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:confirmationVerifier: ", p), err) }
  return err
}

func (p *IdentityCredentialResponse) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "timeoutInSeconds", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:timeoutInSeconds: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.TimeoutInSeconds)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timeoutInSeconds (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:timeoutInSeconds: ", p), err) }
  return err
}

func (p *IdentityCredentialResponse) Equals(other *IdentityCredentialResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.MetaData) != len(other.MetaData) { return false }
  for k, _tgt := range p.MetaData {
    _src5 := other.MetaData[k]
    if _tgt != _src5 { return false }
  }
  if p.ResponseType != other.ResponseType { return false }
  if p.ConfirmationVerifier != other.ConfirmationVerifier { return false }
  if p.TimeoutInSeconds != other.TimeoutInSeconds { return false }
  return true
}

func (p *IdentityCredentialResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IdentityCredentialResponse(%+v)", *p)
}

// Attributes:
//  - MetaData
//  - ForceRegistration
//  - VerificationCode
type IdentifierConfirmationRequest struct {
  MetaData map[string]string `thrift:"metaData,1" db:"metaData" json:"metaData"`
  ForceRegistration bool `thrift:"forceRegistration,2" db:"forceRegistration" json:"forceRegistration"`
  VerificationCode string `thrift:"verificationCode,3" db:"verificationCode" json:"verificationCode"`
}

func NewIdentifierConfirmationRequest() *IdentifierConfirmationRequest {
  return &IdentifierConfirmationRequest{}
}


func (p *IdentifierConfirmationRequest) GetMetaData() map[string]string {
  return p.MetaData
}

func (p *IdentifierConfirmationRequest) GetForceRegistration() bool {
  return p.ForceRegistration
}

func (p *IdentifierConfirmationRequest) GetVerificationCode() string {
  return p.VerificationCode
}
func (p *IdentifierConfirmationRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IdentifierConfirmationRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.MetaData =  tMap
  for i := 0; i < size; i ++ {
var _key6 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key6 = v
}
var _val7 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val7 = v
}
    p.MetaData[_key6] = _val7
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *IdentifierConfirmationRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ForceRegistration = v
}
  return nil
}

func (p *IdentifierConfirmationRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.VerificationCode = v
}
  return nil
}

func (p *IdentifierConfirmationRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IdentifierConfirmationRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IdentifierConfirmationRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "metaData", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:metaData: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.MetaData)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.MetaData {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:metaData: ", p), err) }
  return err
}

func (p *IdentifierConfirmationRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "forceRegistration", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:forceRegistration: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.ForceRegistration)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.forceRegistration (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:forceRegistration: ", p), err) }
  return err
}

func (p *IdentifierConfirmationRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "verificationCode", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:verificationCode: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.VerificationCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.verificationCode (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:verificationCode: ", p), err) }
  return err
}

func (p *IdentifierConfirmationRequest) Equals(other *IdentifierConfirmationRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.MetaData) != len(other.MetaData) { return false }
  for k, _tgt := range p.MetaData {
    _src8 := other.MetaData[k]
    if _tgt != _src8 { return false }
  }
  if p.ForceRegistration != other.ForceRegistration { return false }
  if p.VerificationCode != other.VerificationCode { return false }
  return true
}

func (p *IdentifierConfirmationRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IdentifierConfirmationRequest(%+v)", *p)
}

// Attributes:
//  - MetaData
//  - IdentityProvider
//  - CipherKeyId
//  - CipherText
//  - ConfirmationRequest
type IdentityCredentialRequest struct {
  MetaData map[string]string `thrift:"metaData,1" db:"metaData" json:"metaData"`
  IdentityProvider talkservice.IdentityProvider `thrift:"identityProvider,2" db:"identityProvider" json:"identityProvider"`
  CipherKeyId string `thrift:"cipherKeyId,3" db:"cipherKeyId" json:"cipherKeyId"`
  CipherText string `thrift:"cipherText,4" db:"cipherText" json:"cipherText"`
  ConfirmationRequest *IdentifierConfirmationRequest `thrift:"confirmationRequest,5" db:"confirmationRequest" json:"confirmationRequest"`
}

func NewIdentityCredentialRequest() *IdentityCredentialRequest {
  return &IdentityCredentialRequest{}
}


func (p *IdentityCredentialRequest) GetMetaData() map[string]string {
  return p.MetaData
}

func (p *IdentityCredentialRequest) GetIdentityProvider() talkservice.IdentityProvider {
  return p.IdentityProvider
}

func (p *IdentityCredentialRequest) GetCipherKeyId() string {
  return p.CipherKeyId
}

func (p *IdentityCredentialRequest) GetCipherText() string {
  return p.CipherText
}
var IdentityCredentialRequest_ConfirmationRequest_DEFAULT *IdentifierConfirmationRequest
func (p *IdentityCredentialRequest) GetConfirmationRequest() *IdentifierConfirmationRequest {
  if !p.IsSetConfirmationRequest() {
    return IdentityCredentialRequest_ConfirmationRequest_DEFAULT
  }
return p.ConfirmationRequest
}
func (p *IdentityCredentialRequest) IsSetConfirmationRequest() bool {
  return p.ConfirmationRequest != nil
}

func (p *IdentityCredentialRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IdentityCredentialRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.MetaData =  tMap
  for i := 0; i < size; i ++ {
var _key9 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key9 = v
}
var _val10 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val10 = v
}
    p.MetaData[_key9] = _val10
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *IdentityCredentialRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := talkservice.IdentityProvider(v)
  p.IdentityProvider = temp
}
  return nil
}

func (p *IdentityCredentialRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.CipherKeyId = v
}
  return nil
}

func (p *IdentityCredentialRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.CipherText = v
}
  return nil
}

func (p *IdentityCredentialRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  p.ConfirmationRequest = &IdentifierConfirmationRequest{}
  if err := p.ConfirmationRequest.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ConfirmationRequest), err)
  }
  return nil
}

func (p *IdentityCredentialRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IdentityCredentialRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IdentityCredentialRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "metaData", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:metaData: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.MetaData)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.MetaData {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:metaData: ", p), err) }
  return err
}

func (p *IdentityCredentialRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "identityProvider", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:identityProvider: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.IdentityProvider)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.identityProvider (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:identityProvider: ", p), err) }
  return err
}

func (p *IdentityCredentialRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cipherKeyId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:cipherKeyId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CipherKeyId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cipherKeyId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:cipherKeyId: ", p), err) }
  return err
}

func (p *IdentityCredentialRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cipherText", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:cipherText: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CipherText)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cipherText (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:cipherText: ", p), err) }
  return err
}

func (p *IdentityCredentialRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "confirmationRequest", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:confirmationRequest: ", p), err) }
  if err := p.ConfirmationRequest.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ConfirmationRequest), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:confirmationRequest: ", p), err) }
  return err
}

func (p *IdentityCredentialRequest) Equals(other *IdentityCredentialRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.MetaData) != len(other.MetaData) { return false }
  for k, _tgt := range p.MetaData {
    _src11 := other.MetaData[k]
    if _tgt != _src11 { return false }
  }
  if p.IdentityProvider != other.IdentityProvider { return false }
  if p.CipherKeyId != other.CipherKeyId { return false }
  if p.CipherText != other.CipherText { return false }
  if !p.ConfirmationRequest.Equals(other.ConfirmationRequest) { return false }
  return true
}

func (p *IdentityCredentialRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IdentityCredentialRequest(%+v)", *p)
}

// Attributes:
//  - URI
//  - Token
//  - CookiePath
//  - Skip
type SecurityCenterResult_ struct {
  URI string `thrift:"uri,1" db:"uri" json:"uri"`
  Token string `thrift:"token,2" db:"token" json:"token"`
  CookiePath string `thrift:"cookiePath,3" db:"cookiePath" json:"cookiePath"`
  Skip bool `thrift:"skip,4" db:"skip" json:"skip"`
}

func NewSecurityCenterResult_() *SecurityCenterResult_ {
  return &SecurityCenterResult_{}
}


func (p *SecurityCenterResult_) GetURI() string {
  return p.URI
}

func (p *SecurityCenterResult_) GetToken() string {
  return p.Token
}

func (p *SecurityCenterResult_) GetCookiePath() string {
  return p.CookiePath
}

func (p *SecurityCenterResult_) GetSkip() bool {
  return p.Skip
}
func (p *SecurityCenterResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SecurityCenterResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.URI = v
}
  return nil
}

func (p *SecurityCenterResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *SecurityCenterResult_)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.CookiePath = v
}
  return nil
}

func (p *SecurityCenterResult_)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Skip = v
}
  return nil
}

func (p *SecurityCenterResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SecurityCenterResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SecurityCenterResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "uri", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uri: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.URI)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uri (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uri: ", p), err) }
  return err
}

func (p *SecurityCenterResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:token: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:token: ", p), err) }
  return err
}

func (p *SecurityCenterResult_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cookiePath", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:cookiePath: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CookiePath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cookiePath (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:cookiePath: ", p), err) }
  return err
}

func (p *SecurityCenterResult_) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "skip", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:skip: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Skip)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.skip (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:skip: ", p), err) }
  return err
}

func (p *SecurityCenterResult_) Equals(other *SecurityCenterResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.URI != other.URI { return false }
  if p.Token != other.Token { return false }
  if p.CookiePath != other.CookiePath { return false }
  if p.Skip != other.Skip { return false }
  return true
}

func (p *SecurityCenterResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SecurityCenterResult_(%+v)", *p)
}

type SetPasswordResponse struct {
}

func NewSetPasswordResponse() *SetPasswordResponse {
  return &SetPasswordResponse{}
}

func (p *SetPasswordResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SetPasswordResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SetPasswordResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SetPasswordResponse) Equals(other *SetPasswordResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *SetPasswordResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SetPasswordResponse(%+v)", *p)
}

// Attributes:
//  - EncryptionKeyVersion
//  - CipherText
type EncryptedPassword struct {
  EncryptionKeyVersion EncryptionKeyVersion `thrift:"encryptionKeyVersion,1" db:"encryptionKeyVersion" json:"encryptionKeyVersion"`
  CipherText string `thrift:"cipherText,2" db:"cipherText" json:"cipherText"`
}

func NewEncryptedPassword() *EncryptedPassword {
  return &EncryptedPassword{}
}


func (p *EncryptedPassword) GetEncryptionKeyVersion() EncryptionKeyVersion {
  return p.EncryptionKeyVersion
}

func (p *EncryptedPassword) GetCipherText() string {
  return p.CipherText
}
func (p *EncryptedPassword) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EncryptedPassword)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := EncryptionKeyVersion(v)
  p.EncryptionKeyVersion = temp
}
  return nil
}

func (p *EncryptedPassword)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CipherText = v
}
  return nil
}

func (p *EncryptedPassword) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "EncryptedPassword"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EncryptedPassword) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "encryptionKeyVersion", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:encryptionKeyVersion: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.EncryptionKeyVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.encryptionKeyVersion (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:encryptionKeyVersion: ", p), err) }
  return err
}

func (p *EncryptedPassword) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cipherText", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cipherText: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CipherText)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cipherText (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cipherText: ", p), err) }
  return err
}

func (p *EncryptedPassword) Equals(other *EncryptedPassword) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.EncryptionKeyVersion != other.EncryptionKeyVersion { return false }
  if p.CipherText != other.CipherText { return false }
  return true
}

func (p *EncryptedPassword) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EncryptedPassword(%+v)", *p)
}

type AuthService interface {
  // Parameters:
  //  - LoginRequest
  LoginZ(ctx context.Context, loginRequest *LoginRequest) (_r *LoginResult_, _err error)
  // Parameters:
  //  - Verifier
  //  - DeviceSecret
  ConfirmE2EELogin(ctx context.Context, verifier string, deviceSecret string) (_r string, _err error)
  // Parameters:
  //  - Verifier
  //  - PublicKey
  //  - EncryptedKeyChain
  //  - HashKeyChain
  //  - ErrorCode
  RespondE2EELoginRequest(ctx context.Context, verifier string, publicKey *talkservice.E2EEPublicKey, encryptedKeyChain string, hashKeyChain string, errorCode talkservice.ErrorCode) (_err error)
  // Parameters:
  //  - Request
  OpenAuthSession(ctx context.Context, request *AuthSessionRequest) (_r string, _err error)
  // Parameters:
  //  - AuthSessionId
  //  - Request
  UpdatePassword(ctx context.Context, authSessionId string, request *IdentityCredentialRequest) (_r *IdentityCredentialResponse, _err error)
  LogoutZ(ctx context.Context) (_err error)
  // Parameters:
  //  - Verifier
  //  - PinCode
  //  - ErrorCode
  //  - PublicKey
  //  - EncryptedKeyChain
  //  - HashKeyChain
  VerifyQrcodeWithE2EE(ctx context.Context, verifier string, pinCode string, errorCode talkservice.ErrorCode, publicKey *talkservice.E2EEPublicKey, encryptedKeyChain string, hashKeyChain string) (_r string, _err error)
  // Parameters:
  //  - AuthSessionId
  //  - IdentityProvider
  GetAuthRSAKey(ctx context.Context, authSessionId string, identityProvider talkservice.IdentityProvider) (_r *talkservice.RSAKey, _err error)
  // Parameters:
  //  - Enforce
  IssueTokenForAccountMigrationSettings(ctx context.Context, enforce bool) (_r *SecurityCenterResult_, _err error)
  // Parameters:
  //  - AuthSessionId
  //  - EncryptedPassword
  SetPassword(ctx context.Context, authSessionId string, encryptedPassword *EncryptedPassword) (_r *SetPasswordResponse, _err error)
  // Parameters:
  //  - AuthSessionId
  //  - Request
  ConfirmIdentifier(ctx context.Context, authSessionId string, request *IdentityCredentialRequest) (_r *IdentityCredentialResponse, _err error)
  // Parameters:
  //  - AuthSessionId
  //  - Request
  SetIdentifier(ctx context.Context, authSessionId string, request *IdentityCredentialRequest) (_r *IdentityCredentialResponse, _err error)
  // Parameters:
  //  - AuthSessionId
  //  - Request
  SetIdentifierAndPassword(ctx context.Context, authSessionId string, request *IdentityCredentialRequest) (_r *IdentityCredentialResponse, _err error)
  // Parameters:
  //  - AuthSessionId
  //  - Request
  UpdateIdentifier(ctx context.Context, authSessionId string, request *IdentityCredentialRequest) (_r *IdentityCredentialResponse, _err error)
  // Parameters:
  //  - AuthSessionId
  //  - Request
  ResendIdentifierConfirmation(ctx context.Context, authSessionId string, request *IdentityCredentialRequest) (_r *IdentityCredentialResponse, _err error)
  // Parameters:
  //  - AuthSessionId
  //  - Request
  RemoveIdentifier(ctx context.Context, authSessionId string, request *IdentityCredentialRequest) (_r *IdentityCredentialResponse, _err error)
}

type AuthServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewAuthServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *AuthServiceClient {
  return &AuthServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewAuthServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *AuthServiceClient {
  return &AuthServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewAuthServiceClient(c thrift.TClient) *AuthServiceClient {
  return &AuthServiceClient{
    c: c,
  }
}

func (p *AuthServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *AuthServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *AuthServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - LoginRequest
func (p *AuthServiceClient) LoginZ(ctx context.Context, loginRequest *LoginRequest) (_r *LoginResult_, _err error) {
  var _args12 AuthServiceLoginZArgs
  _args12.LoginRequest = loginRequest
  var _result14 AuthServiceLoginZResult
  var _meta13 thrift.ResponseMeta
  _meta13, _err = p.Client_().Call(ctx, "loginZ", &_args12, &_result14)
  p.SetLastResponseMeta_(_meta13)
  if _err != nil {
    return
  }
  switch {
  case _result14.E!= nil:
    return _r, _result14.E
  }

  return _result14.GetSuccess(), nil
}

// Parameters:
//  - Verifier
//  - DeviceSecret
func (p *AuthServiceClient) ConfirmE2EELogin(ctx context.Context, verifier string, deviceSecret string) (_r string, _err error) {
  var _args15 AuthServiceConfirmE2EELoginArgs
  _args15.Verifier = verifier
  _args15.DeviceSecret = deviceSecret
  var _result17 AuthServiceConfirmE2EELoginResult
  var _meta16 thrift.ResponseMeta
  _meta16, _err = p.Client_().Call(ctx, "confirmE2EELogin", &_args15, &_result17)
  p.SetLastResponseMeta_(_meta16)
  if _err != nil {
    return
  }
  switch {
  case _result17.E!= nil:
    return _r, _result17.E
  }

  return _result17.GetSuccess(), nil
}

// Parameters:
//  - Verifier
//  - PublicKey
//  - EncryptedKeyChain
//  - HashKeyChain
//  - ErrorCode
func (p *AuthServiceClient) RespondE2EELoginRequest(ctx context.Context, verifier string, publicKey *talkservice.E2EEPublicKey, encryptedKeyChain string, hashKeyChain string, errorCode talkservice.ErrorCode) (_err error) {
  var _args18 AuthServiceRespondE2EELoginRequestArgs
  _args18.Verifier = verifier
  _args18.PublicKey = publicKey
  _args18.EncryptedKeyChain = encryptedKeyChain
  _args18.HashKeyChain = hashKeyChain
  _args18.ErrorCode = errorCode
  var _result20 AuthServiceRespondE2EELoginRequestResult
  var _meta19 thrift.ResponseMeta
  _meta19, _err = p.Client_().Call(ctx, "respondE2EELoginRequest", &_args18, &_result20)
  p.SetLastResponseMeta_(_meta19)
  if _err != nil {
    return
  }
  switch {
  case _result20.E!= nil:
    return _result20.E
  }

  return nil
}

// Parameters:
//  - Request
func (p *AuthServiceClient) OpenAuthSession(ctx context.Context, request *AuthSessionRequest) (_r string, _err error) {
  var _args21 AuthServiceOpenAuthSessionArgs
  _args21.Request = request
  var _result23 AuthServiceOpenAuthSessionResult
  var _meta22 thrift.ResponseMeta
  _meta22, _err = p.Client_().Call(ctx, "openAuthSession", &_args21, &_result23)
  p.SetLastResponseMeta_(_meta22)
  if _err != nil {
    return
  }
  switch {
  case _result23.E!= nil:
    return _r, _result23.E
  }

  return _result23.GetSuccess(), nil
}

// Parameters:
//  - AuthSessionId
//  - Request
func (p *AuthServiceClient) UpdatePassword(ctx context.Context, authSessionId string, request *IdentityCredentialRequest) (_r *IdentityCredentialResponse, _err error) {
  var _args24 AuthServiceUpdatePasswordArgs
  _args24.AuthSessionId = authSessionId
  _args24.Request = request
  var _result26 AuthServiceUpdatePasswordResult
  var _meta25 thrift.ResponseMeta
  _meta25, _err = p.Client_().Call(ctx, "updatePassword", &_args24, &_result26)
  p.SetLastResponseMeta_(_meta25)
  if _err != nil {
    return
  }
  switch {
  case _result26.E!= nil:
    return _r, _result26.E
  }

  return _result26.GetSuccess(), nil
}

func (p *AuthServiceClient) LogoutZ(ctx context.Context) (_err error) {
  var _args27 AuthServiceLogoutZArgs
  var _result29 AuthServiceLogoutZResult
  var _meta28 thrift.ResponseMeta
  _meta28, _err = p.Client_().Call(ctx, "logoutZ", &_args27, &_result29)
  p.SetLastResponseMeta_(_meta28)
  if _err != nil {
    return
  }
  switch {
  case _result29.E!= nil:
    return _result29.E
  }

  return nil
}

// Parameters:
//  - Verifier
//  - PinCode
//  - ErrorCode
//  - PublicKey
//  - EncryptedKeyChain
//  - HashKeyChain
func (p *AuthServiceClient) VerifyQrcodeWithE2EE(ctx context.Context, verifier string, pinCode string, errorCode talkservice.ErrorCode, publicKey *talkservice.E2EEPublicKey, encryptedKeyChain string, hashKeyChain string) (_r string, _err error) {
  var _args30 AuthServiceVerifyQrcodeWithE2EEArgs
  _args30.Verifier = verifier
  _args30.PinCode = pinCode
  _args30.ErrorCode = errorCode
  _args30.PublicKey = publicKey
  _args30.EncryptedKeyChain = encryptedKeyChain
  _args30.HashKeyChain = hashKeyChain
  var _result32 AuthServiceVerifyQrcodeWithE2EEResult
  var _meta31 thrift.ResponseMeta
  _meta31, _err = p.Client_().Call(ctx, "verifyQrcodeWithE2EE", &_args30, &_result32)
  p.SetLastResponseMeta_(_meta31)
  if _err != nil {
    return
  }
  switch {
  case _result32.E!= nil:
    return _r, _result32.E
  }

  return _result32.GetSuccess(), nil
}

// Parameters:
//  - AuthSessionId
//  - IdentityProvider
func (p *AuthServiceClient) GetAuthRSAKey(ctx context.Context, authSessionId string, identityProvider talkservice.IdentityProvider) (_r *talkservice.RSAKey, _err error) {
  var _args33 AuthServiceGetAuthRSAKeyArgs
  _args33.AuthSessionId = authSessionId
  _args33.IdentityProvider = identityProvider
  var _result35 AuthServiceGetAuthRSAKeyResult
  var _meta34 thrift.ResponseMeta
  _meta34, _err = p.Client_().Call(ctx, "getAuthRSAKey", &_args33, &_result35)
  p.SetLastResponseMeta_(_meta34)
  if _err != nil {
    return
  }
  switch {
  case _result35.E!= nil:
    return _r, _result35.E
  }

  return _result35.GetSuccess(), nil
}

// Parameters:
//  - Enforce
func (p *AuthServiceClient) IssueTokenForAccountMigrationSettings(ctx context.Context, enforce bool) (_r *SecurityCenterResult_, _err error) {
  var _args36 AuthServiceIssueTokenForAccountMigrationSettingsArgs
  _args36.Enforce = enforce
  var _result38 AuthServiceIssueTokenForAccountMigrationSettingsResult
  var _meta37 thrift.ResponseMeta
  _meta37, _err = p.Client_().Call(ctx, "issueTokenForAccountMigrationSettings", &_args36, &_result38)
  p.SetLastResponseMeta_(_meta37)
  if _err != nil {
    return
  }
  switch {
  case _result38.E!= nil:
    return _r, _result38.E
  }

  return _result38.GetSuccess(), nil
}

// Parameters:
//  - AuthSessionId
//  - EncryptedPassword
func (p *AuthServiceClient) SetPassword(ctx context.Context, authSessionId string, encryptedPassword *EncryptedPassword) (_r *SetPasswordResponse, _err error) {
  var _args39 AuthServiceSetPasswordArgs
  _args39.AuthSessionId = authSessionId
  _args39.EncryptedPassword = encryptedPassword
  var _result41 AuthServiceSetPasswordResult
  var _meta40 thrift.ResponseMeta
  _meta40, _err = p.Client_().Call(ctx, "setPassword", &_args39, &_result41)
  p.SetLastResponseMeta_(_meta40)
  if _err != nil {
    return
  }
  switch {
  case _result41.E!= nil:
    return _r, _result41.E
  }

  return _result41.GetSuccess(), nil
}

// Parameters:
//  - AuthSessionId
//  - Request
func (p *AuthServiceClient) ConfirmIdentifier(ctx context.Context, authSessionId string, request *IdentityCredentialRequest) (_r *IdentityCredentialResponse, _err error) {
  var _args42 AuthServiceConfirmIdentifierArgs
  _args42.AuthSessionId = authSessionId
  _args42.Request = request
  var _result44 AuthServiceConfirmIdentifierResult
  var _meta43 thrift.ResponseMeta
  _meta43, _err = p.Client_().Call(ctx, "confirmIdentifier", &_args42, &_result44)
  p.SetLastResponseMeta_(_meta43)
  if _err != nil {
    return
  }
  switch {
  case _result44.E!= nil:
    return _r, _result44.E
  }

  return _result44.GetSuccess(), nil
}

// Parameters:
//  - AuthSessionId
//  - Request
func (p *AuthServiceClient) SetIdentifier(ctx context.Context, authSessionId string, request *IdentityCredentialRequest) (_r *IdentityCredentialResponse, _err error) {
  var _args45 AuthServiceSetIdentifierArgs
  _args45.AuthSessionId = authSessionId
  _args45.Request = request
  var _result47 AuthServiceSetIdentifierResult
  var _meta46 thrift.ResponseMeta
  _meta46, _err = p.Client_().Call(ctx, "setIdentifier", &_args45, &_result47)
  p.SetLastResponseMeta_(_meta46)
  if _err != nil {
    return
  }
  switch {
  case _result47.E!= nil:
    return _r, _result47.E
  }

  return _result47.GetSuccess(), nil
}

// Parameters:
//  - AuthSessionId
//  - Request
func (p *AuthServiceClient) SetIdentifierAndPassword(ctx context.Context, authSessionId string, request *IdentityCredentialRequest) (_r *IdentityCredentialResponse, _err error) {
  var _args48 AuthServiceSetIdentifierAndPasswordArgs
  _args48.AuthSessionId = authSessionId
  _args48.Request = request
  var _result50 AuthServiceSetIdentifierAndPasswordResult
  var _meta49 thrift.ResponseMeta
  _meta49, _err = p.Client_().Call(ctx, "setIdentifierAndPassword", &_args48, &_result50)
  p.SetLastResponseMeta_(_meta49)
  if _err != nil {
    return
  }
  switch {
  case _result50.E!= nil:
    return _r, _result50.E
  }

  return _result50.GetSuccess(), nil
}

// Parameters:
//  - AuthSessionId
//  - Request
func (p *AuthServiceClient) UpdateIdentifier(ctx context.Context, authSessionId string, request *IdentityCredentialRequest) (_r *IdentityCredentialResponse, _err error) {
  var _args51 AuthServiceUpdateIdentifierArgs
  _args51.AuthSessionId = authSessionId
  _args51.Request = request
  var _result53 AuthServiceUpdateIdentifierResult
  var _meta52 thrift.ResponseMeta
  _meta52, _err = p.Client_().Call(ctx, "updateIdentifier", &_args51, &_result53)
  p.SetLastResponseMeta_(_meta52)
  if _err != nil {
    return
  }
  switch {
  case _result53.E!= nil:
    return _r, _result53.E
  }

  return _result53.GetSuccess(), nil
}

// Parameters:
//  - AuthSessionId
//  - Request
func (p *AuthServiceClient) ResendIdentifierConfirmation(ctx context.Context, authSessionId string, request *IdentityCredentialRequest) (_r *IdentityCredentialResponse, _err error) {
  var _args54 AuthServiceResendIdentifierConfirmationArgs
  _args54.AuthSessionId = authSessionId
  _args54.Request = request
  var _result56 AuthServiceResendIdentifierConfirmationResult
  var _meta55 thrift.ResponseMeta
  _meta55, _err = p.Client_().Call(ctx, "resendIdentifierConfirmation", &_args54, &_result56)
  p.SetLastResponseMeta_(_meta55)
  if _err != nil {
    return
  }
  switch {
  case _result56.E!= nil:
    return _r, _result56.E
  }

  return _result56.GetSuccess(), nil
}

// Parameters:
//  - AuthSessionId
//  - Request
func (p *AuthServiceClient) RemoveIdentifier(ctx context.Context, authSessionId string, request *IdentityCredentialRequest) (_r *IdentityCredentialResponse, _err error) {
  var _args57 AuthServiceRemoveIdentifierArgs
  _args57.AuthSessionId = authSessionId
  _args57.Request = request
  var _result59 AuthServiceRemoveIdentifierResult
  var _meta58 thrift.ResponseMeta
  _meta58, _err = p.Client_().Call(ctx, "removeIdentifier", &_args57, &_result59)
  p.SetLastResponseMeta_(_meta58)
  if _err != nil {
    return
  }
  switch {
  case _result59.E!= nil:
    return _r, _result59.E
  }

  return _result59.GetSuccess(), nil
}

type AuthServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler AuthService
}

func (p *AuthServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *AuthServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *AuthServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewAuthServiceProcessor(handler AuthService) *AuthServiceProcessor {

  self60 := &AuthServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self60.processorMap["loginZ"] = &authServiceProcessorLoginZ{handler:handler}
  self60.processorMap["confirmE2EELogin"] = &authServiceProcessorConfirmE2EELogin{handler:handler}
  self60.processorMap["respondE2EELoginRequest"] = &authServiceProcessorRespondE2EELoginRequest{handler:handler}
  self60.processorMap["openAuthSession"] = &authServiceProcessorOpenAuthSession{handler:handler}
  self60.processorMap["updatePassword"] = &authServiceProcessorUpdatePassword{handler:handler}
  self60.processorMap["logoutZ"] = &authServiceProcessorLogoutZ{handler:handler}
  self60.processorMap["verifyQrcodeWithE2EE"] = &authServiceProcessorVerifyQrcodeWithE2EE{handler:handler}
  self60.processorMap["getAuthRSAKey"] = &authServiceProcessorGetAuthRSAKey{handler:handler}
  self60.processorMap["issueTokenForAccountMigrationSettings"] = &authServiceProcessorIssueTokenForAccountMigrationSettings{handler:handler}
  self60.processorMap["setPassword"] = &authServiceProcessorSetPassword{handler:handler}
  self60.processorMap["confirmIdentifier"] = &authServiceProcessorConfirmIdentifier{handler:handler}
  self60.processorMap["setIdentifier"] = &authServiceProcessorSetIdentifier{handler:handler}
  self60.processorMap["setIdentifierAndPassword"] = &authServiceProcessorSetIdentifierAndPassword{handler:handler}
  self60.processorMap["updateIdentifier"] = &authServiceProcessorUpdateIdentifier{handler:handler}
  self60.processorMap["resendIdentifierConfirmation"] = &authServiceProcessorResendIdentifierConfirmation{handler:handler}
  self60.processorMap["removeIdentifier"] = &authServiceProcessorRemoveIdentifier{handler:handler}
return self60
}

func (p *AuthServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x61 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x61.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x61

}

type authServiceProcessorLoginZ struct {
  handler AuthService
}

func (p *authServiceProcessorLoginZ) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AuthServiceLoginZArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "loginZ", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AuthServiceLoginZResult{}
  var retval *LoginResult_
  if retval, err2 = p.handler.LoginZ(ctx, args.LoginRequest); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *talkservice.TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing loginZ: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "loginZ", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "loginZ", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type authServiceProcessorConfirmE2EELogin struct {
  handler AuthService
}

func (p *authServiceProcessorConfirmE2EELogin) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AuthServiceConfirmE2EELoginArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "confirmE2EELogin", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AuthServiceConfirmE2EELoginResult{}
  var retval string
  if retval, err2 = p.handler.ConfirmE2EELogin(ctx, args.Verifier, args.DeviceSecret); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *talkservice.TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing confirmE2EELogin: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "confirmE2EELogin", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "confirmE2EELogin", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type authServiceProcessorRespondE2EELoginRequest struct {
  handler AuthService
}

func (p *authServiceProcessorRespondE2EELoginRequest) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AuthServiceRespondE2EELoginRequestArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "respondE2EELoginRequest", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AuthServiceRespondE2EELoginRequestResult{}
  if err2 = p.handler.RespondE2EELoginRequest(ctx, args.Verifier, args.PublicKey, args.EncryptedKeyChain, args.HashKeyChain, args.ErrorCode); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *talkservice.TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing respondE2EELoginRequest: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "respondE2EELoginRequest", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "respondE2EELoginRequest", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type authServiceProcessorOpenAuthSession struct {
  handler AuthService
}

func (p *authServiceProcessorOpenAuthSession) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AuthServiceOpenAuthSessionArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "openAuthSession", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AuthServiceOpenAuthSessionResult{}
  var retval string
  if retval, err2 = p.handler.OpenAuthSession(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *talkservice.TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing openAuthSession: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "openAuthSession", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "openAuthSession", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type authServiceProcessorUpdatePassword struct {
  handler AuthService
}

func (p *authServiceProcessorUpdatePassword) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AuthServiceUpdatePasswordArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "updatePassword", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AuthServiceUpdatePasswordResult{}
  var retval *IdentityCredentialResponse
  if retval, err2 = p.handler.UpdatePassword(ctx, args.AuthSessionId, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *talkservice.TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updatePassword: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "updatePassword", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "updatePassword", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type authServiceProcessorLogoutZ struct {
  handler AuthService
}

func (p *authServiceProcessorLogoutZ) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AuthServiceLogoutZArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "logoutZ", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AuthServiceLogoutZResult{}
  if err2 = p.handler.LogoutZ(ctx); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *talkservice.TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing logoutZ: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "logoutZ", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "logoutZ", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type authServiceProcessorVerifyQrcodeWithE2EE struct {
  handler AuthService
}

func (p *authServiceProcessorVerifyQrcodeWithE2EE) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AuthServiceVerifyQrcodeWithE2EEArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "verifyQrcodeWithE2EE", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AuthServiceVerifyQrcodeWithE2EEResult{}
  var retval string
  if retval, err2 = p.handler.VerifyQrcodeWithE2EE(ctx, args.Verifier, args.PinCode, args.ErrorCode, args.PublicKey, args.EncryptedKeyChain, args.HashKeyChain); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *talkservice.TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing verifyQrcodeWithE2EE: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "verifyQrcodeWithE2EE", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "verifyQrcodeWithE2EE", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type authServiceProcessorGetAuthRSAKey struct {
  handler AuthService
}

func (p *authServiceProcessorGetAuthRSAKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AuthServiceGetAuthRSAKeyArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getAuthRSAKey", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AuthServiceGetAuthRSAKeyResult{}
  var retval *talkservice.RSAKey
  if retval, err2 = p.handler.GetAuthRSAKey(ctx, args.AuthSessionId, args.IdentityProvider); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *talkservice.TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAuthRSAKey: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getAuthRSAKey", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getAuthRSAKey", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type authServiceProcessorIssueTokenForAccountMigrationSettings struct {
  handler AuthService
}

func (p *authServiceProcessorIssueTokenForAccountMigrationSettings) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AuthServiceIssueTokenForAccountMigrationSettingsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "issueTokenForAccountMigrationSettings", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AuthServiceIssueTokenForAccountMigrationSettingsResult{}
  var retval *SecurityCenterResult_
  if retval, err2 = p.handler.IssueTokenForAccountMigrationSettings(ctx, args.Enforce); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *talkservice.TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing issueTokenForAccountMigrationSettings: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "issueTokenForAccountMigrationSettings", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "issueTokenForAccountMigrationSettings", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type authServiceProcessorSetPassword struct {
  handler AuthService
}

func (p *authServiceProcessorSetPassword) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AuthServiceSetPasswordArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "setPassword", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AuthServiceSetPasswordResult{}
  var retval *SetPasswordResponse
  if retval, err2 = p.handler.SetPassword(ctx, args.AuthSessionId, args.EncryptedPassword); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *talkservice.TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setPassword: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "setPassword", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "setPassword", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type authServiceProcessorConfirmIdentifier struct {
  handler AuthService
}

func (p *authServiceProcessorConfirmIdentifier) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AuthServiceConfirmIdentifierArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "confirmIdentifier", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AuthServiceConfirmIdentifierResult{}
  var retval *IdentityCredentialResponse
  if retval, err2 = p.handler.ConfirmIdentifier(ctx, args.AuthSessionId, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *talkservice.TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing confirmIdentifier: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "confirmIdentifier", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "confirmIdentifier", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type authServiceProcessorSetIdentifier struct {
  handler AuthService
}

func (p *authServiceProcessorSetIdentifier) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AuthServiceSetIdentifierArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "setIdentifier", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AuthServiceSetIdentifierResult{}
  var retval *IdentityCredentialResponse
  if retval, err2 = p.handler.SetIdentifier(ctx, args.AuthSessionId, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *talkservice.TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setIdentifier: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "setIdentifier", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "setIdentifier", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type authServiceProcessorSetIdentifierAndPassword struct {
  handler AuthService
}

func (p *authServiceProcessorSetIdentifierAndPassword) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AuthServiceSetIdentifierAndPasswordArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "setIdentifierAndPassword", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AuthServiceSetIdentifierAndPasswordResult{}
  var retval *IdentityCredentialResponse
  if retval, err2 = p.handler.SetIdentifierAndPassword(ctx, args.AuthSessionId, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *talkservice.TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setIdentifierAndPassword: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "setIdentifierAndPassword", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "setIdentifierAndPassword", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type authServiceProcessorUpdateIdentifier struct {
  handler AuthService
}

func (p *authServiceProcessorUpdateIdentifier) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AuthServiceUpdateIdentifierArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "updateIdentifier", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AuthServiceUpdateIdentifierResult{}
  var retval *IdentityCredentialResponse
  if retval, err2 = p.handler.UpdateIdentifier(ctx, args.AuthSessionId, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *talkservice.TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateIdentifier: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "updateIdentifier", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "updateIdentifier", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type authServiceProcessorResendIdentifierConfirmation struct {
  handler AuthService
}

func (p *authServiceProcessorResendIdentifierConfirmation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AuthServiceResendIdentifierConfirmationArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "resendIdentifierConfirmation", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AuthServiceResendIdentifierConfirmationResult{}
  var retval *IdentityCredentialResponse
  if retval, err2 = p.handler.ResendIdentifierConfirmation(ctx, args.AuthSessionId, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *talkservice.TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing resendIdentifierConfirmation: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "resendIdentifierConfirmation", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "resendIdentifierConfirmation", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type authServiceProcessorRemoveIdentifier struct {
  handler AuthService
}

func (p *authServiceProcessorRemoveIdentifier) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AuthServiceRemoveIdentifierArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "removeIdentifier", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AuthServiceRemoveIdentifierResult{}
  var retval *IdentityCredentialResponse
  if retval, err2 = p.handler.RemoveIdentifier(ctx, args.AuthSessionId, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *talkservice.TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeIdentifier: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "removeIdentifier", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "removeIdentifier", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - LoginRequest
type AuthServiceLoginZArgs struct {
  // unused field # 1
  LoginRequest *LoginRequest `thrift:"loginRequest,2" db:"loginRequest" json:"loginRequest"`
}

func NewAuthServiceLoginZArgs() *AuthServiceLoginZArgs {
  return &AuthServiceLoginZArgs{}
}

var AuthServiceLoginZArgs_LoginRequest_DEFAULT *LoginRequest
func (p *AuthServiceLoginZArgs) GetLoginRequest() *LoginRequest {
  if !p.IsSetLoginRequest() {
    return AuthServiceLoginZArgs_LoginRequest_DEFAULT
  }
return p.LoginRequest
}
func (p *AuthServiceLoginZArgs) IsSetLoginRequest() bool {
  return p.LoginRequest != nil
}

func (p *AuthServiceLoginZArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AuthServiceLoginZArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.LoginRequest = &LoginRequest{}
  if err := p.LoginRequest.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LoginRequest), err)
  }
  return nil
}

func (p *AuthServiceLoginZArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "loginZ_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthServiceLoginZArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "loginRequest", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:loginRequest: ", p), err) }
  if err := p.LoginRequest.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LoginRequest), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:loginRequest: ", p), err) }
  return err
}

func (p *AuthServiceLoginZArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthServiceLoginZArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type AuthServiceLoginZResult struct {
  Success *LoginResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *talkservice.TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewAuthServiceLoginZResult() *AuthServiceLoginZResult {
  return &AuthServiceLoginZResult{}
}

var AuthServiceLoginZResult_Success_DEFAULT *LoginResult_
func (p *AuthServiceLoginZResult) GetSuccess() *LoginResult_ {
  if !p.IsSetSuccess() {
    return AuthServiceLoginZResult_Success_DEFAULT
  }
return p.Success
}
var AuthServiceLoginZResult_E_DEFAULT *talkservice.TalkException
func (p *AuthServiceLoginZResult) GetE() *talkservice.TalkException {
  if !p.IsSetE() {
    return AuthServiceLoginZResult_E_DEFAULT
  }
return p.E
}
func (p *AuthServiceLoginZResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AuthServiceLoginZResult) IsSetE() bool {
  return p.E != nil
}

func (p *AuthServiceLoginZResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AuthServiceLoginZResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &LoginResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AuthServiceLoginZResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &talkservice.TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *AuthServiceLoginZResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "loginZ_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthServiceLoginZResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AuthServiceLoginZResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *AuthServiceLoginZResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthServiceLoginZResult(%+v)", *p)
}

// Attributes:
//  - Verifier
//  - DeviceSecret
type AuthServiceConfirmE2EELoginArgs struct {
  Verifier string `thrift:"verifier,1" db:"verifier" json:"verifier"`
  DeviceSecret string `thrift:"deviceSecret,2" db:"deviceSecret" json:"deviceSecret"`
}

func NewAuthServiceConfirmE2EELoginArgs() *AuthServiceConfirmE2EELoginArgs {
  return &AuthServiceConfirmE2EELoginArgs{}
}


func (p *AuthServiceConfirmE2EELoginArgs) GetVerifier() string {
  return p.Verifier
}

func (p *AuthServiceConfirmE2EELoginArgs) GetDeviceSecret() string {
  return p.DeviceSecret
}
func (p *AuthServiceConfirmE2EELoginArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AuthServiceConfirmE2EELoginArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Verifier = v
}
  return nil
}

func (p *AuthServiceConfirmE2EELoginArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DeviceSecret = v
}
  return nil
}

func (p *AuthServiceConfirmE2EELoginArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "confirmE2EELogin_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthServiceConfirmE2EELoginArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "verifier", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:verifier: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Verifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.verifier (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:verifier: ", p), err) }
  return err
}

func (p *AuthServiceConfirmE2EELoginArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "deviceSecret", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:deviceSecret: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DeviceSecret)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deviceSecret (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:deviceSecret: ", p), err) }
  return err
}

func (p *AuthServiceConfirmE2EELoginArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthServiceConfirmE2EELoginArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type AuthServiceConfirmE2EELoginResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *talkservice.TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewAuthServiceConfirmE2EELoginResult() *AuthServiceConfirmE2EELoginResult {
  return &AuthServiceConfirmE2EELoginResult{}
}

var AuthServiceConfirmE2EELoginResult_Success_DEFAULT string
func (p *AuthServiceConfirmE2EELoginResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return AuthServiceConfirmE2EELoginResult_Success_DEFAULT
  }
return *p.Success
}
var AuthServiceConfirmE2EELoginResult_E_DEFAULT *talkservice.TalkException
func (p *AuthServiceConfirmE2EELoginResult) GetE() *talkservice.TalkException {
  if !p.IsSetE() {
    return AuthServiceConfirmE2EELoginResult_E_DEFAULT
  }
return p.E
}
func (p *AuthServiceConfirmE2EELoginResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AuthServiceConfirmE2EELoginResult) IsSetE() bool {
  return p.E != nil
}

func (p *AuthServiceConfirmE2EELoginResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AuthServiceConfirmE2EELoginResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AuthServiceConfirmE2EELoginResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &talkservice.TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *AuthServiceConfirmE2EELoginResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "confirmE2EELogin_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthServiceConfirmE2EELoginResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AuthServiceConfirmE2EELoginResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *AuthServiceConfirmE2EELoginResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthServiceConfirmE2EELoginResult(%+v)", *p)
}

// Attributes:
//  - Verifier
//  - PublicKey
//  - EncryptedKeyChain
//  - HashKeyChain
//  - ErrorCode
type AuthServiceRespondE2EELoginRequestArgs struct {
  Verifier string `thrift:"verifier,1" db:"verifier" json:"verifier"`
  PublicKey *talkservice.E2EEPublicKey `thrift:"publicKey,2" db:"publicKey" json:"publicKey"`
  EncryptedKeyChain string `thrift:"encryptedKeyChain,3" db:"encryptedKeyChain" json:"encryptedKeyChain"`
  HashKeyChain string `thrift:"hashKeyChain,4" db:"hashKeyChain" json:"hashKeyChain"`
  ErrorCode talkservice.ErrorCode `thrift:"errorCode,5" db:"errorCode" json:"errorCode"`
}

func NewAuthServiceRespondE2EELoginRequestArgs() *AuthServiceRespondE2EELoginRequestArgs {
  return &AuthServiceRespondE2EELoginRequestArgs{}
}


func (p *AuthServiceRespondE2EELoginRequestArgs) GetVerifier() string {
  return p.Verifier
}
var AuthServiceRespondE2EELoginRequestArgs_PublicKey_DEFAULT *talkservice.E2EEPublicKey
func (p *AuthServiceRespondE2EELoginRequestArgs) GetPublicKey() *talkservice.E2EEPublicKey {
  if !p.IsSetPublicKey() {
    return AuthServiceRespondE2EELoginRequestArgs_PublicKey_DEFAULT
  }
return p.PublicKey
}

func (p *AuthServiceRespondE2EELoginRequestArgs) GetEncryptedKeyChain() string {
  return p.EncryptedKeyChain
}

func (p *AuthServiceRespondE2EELoginRequestArgs) GetHashKeyChain() string {
  return p.HashKeyChain
}

func (p *AuthServiceRespondE2EELoginRequestArgs) GetErrorCode() talkservice.ErrorCode {
  return p.ErrorCode
}
func (p *AuthServiceRespondE2EELoginRequestArgs) IsSetPublicKey() bool {
  return p.PublicKey != nil
}

func (p *AuthServiceRespondE2EELoginRequestArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AuthServiceRespondE2EELoginRequestArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Verifier = v
}
  return nil
}

func (p *AuthServiceRespondE2EELoginRequestArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.PublicKey = &talkservice.E2EEPublicKey{}
  if err := p.PublicKey.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PublicKey), err)
  }
  return nil
}

func (p *AuthServiceRespondE2EELoginRequestArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.EncryptedKeyChain = v
}
  return nil
}

func (p *AuthServiceRespondE2EELoginRequestArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.HashKeyChain = v
}
  return nil
}

func (p *AuthServiceRespondE2EELoginRequestArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := talkservice.ErrorCode(v)
  p.ErrorCode = temp
}
  return nil
}

func (p *AuthServiceRespondE2EELoginRequestArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "respondE2EELoginRequest_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthServiceRespondE2EELoginRequestArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "verifier", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:verifier: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Verifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.verifier (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:verifier: ", p), err) }
  return err
}

func (p *AuthServiceRespondE2EELoginRequestArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "publicKey", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:publicKey: ", p), err) }
  if err := p.PublicKey.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PublicKey), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:publicKey: ", p), err) }
  return err
}

func (p *AuthServiceRespondE2EELoginRequestArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "encryptedKeyChain", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:encryptedKeyChain: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.EncryptedKeyChain)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.encryptedKeyChain (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:encryptedKeyChain: ", p), err) }
  return err
}

func (p *AuthServiceRespondE2EELoginRequestArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hashKeyChain", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:hashKeyChain: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.HashKeyChain)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hashKeyChain (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:hashKeyChain: ", p), err) }
  return err
}

func (p *AuthServiceRespondE2EELoginRequestArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "errorCode", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:errorCode: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.errorCode (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:errorCode: ", p), err) }
  return err
}

func (p *AuthServiceRespondE2EELoginRequestArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthServiceRespondE2EELoginRequestArgs(%+v)", *p)
}

// Attributes:
//  - E
type AuthServiceRespondE2EELoginRequestResult struct {
  E *talkservice.TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewAuthServiceRespondE2EELoginRequestResult() *AuthServiceRespondE2EELoginRequestResult {
  return &AuthServiceRespondE2EELoginRequestResult{}
}

var AuthServiceRespondE2EELoginRequestResult_E_DEFAULT *talkservice.TalkException
func (p *AuthServiceRespondE2EELoginRequestResult) GetE() *talkservice.TalkException {
  if !p.IsSetE() {
    return AuthServiceRespondE2EELoginRequestResult_E_DEFAULT
  }
return p.E
}
func (p *AuthServiceRespondE2EELoginRequestResult) IsSetE() bool {
  return p.E != nil
}

func (p *AuthServiceRespondE2EELoginRequestResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AuthServiceRespondE2EELoginRequestResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &talkservice.TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *AuthServiceRespondE2EELoginRequestResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "respondE2EELoginRequest_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthServiceRespondE2EELoginRequestResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *AuthServiceRespondE2EELoginRequestResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthServiceRespondE2EELoginRequestResult(%+v)", *p)
}

// Attributes:
//  - Request
type AuthServiceOpenAuthSessionArgs struct {
  // unused field # 1
  Request *AuthSessionRequest `thrift:"request,2" db:"request" json:"request"`
}

func NewAuthServiceOpenAuthSessionArgs() *AuthServiceOpenAuthSessionArgs {
  return &AuthServiceOpenAuthSessionArgs{}
}

var AuthServiceOpenAuthSessionArgs_Request_DEFAULT *AuthSessionRequest
func (p *AuthServiceOpenAuthSessionArgs) GetRequest() *AuthSessionRequest {
  if !p.IsSetRequest() {
    return AuthServiceOpenAuthSessionArgs_Request_DEFAULT
  }
return p.Request
}
func (p *AuthServiceOpenAuthSessionArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *AuthServiceOpenAuthSessionArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AuthServiceOpenAuthSessionArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &AuthSessionRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *AuthServiceOpenAuthSessionArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "openAuthSession_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthServiceOpenAuthSessionArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:request: ", p), err) }
  return err
}

func (p *AuthServiceOpenAuthSessionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthServiceOpenAuthSessionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type AuthServiceOpenAuthSessionResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *talkservice.TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewAuthServiceOpenAuthSessionResult() *AuthServiceOpenAuthSessionResult {
  return &AuthServiceOpenAuthSessionResult{}
}

var AuthServiceOpenAuthSessionResult_Success_DEFAULT string
func (p *AuthServiceOpenAuthSessionResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return AuthServiceOpenAuthSessionResult_Success_DEFAULT
  }
return *p.Success
}
var AuthServiceOpenAuthSessionResult_E_DEFAULT *talkservice.TalkException
func (p *AuthServiceOpenAuthSessionResult) GetE() *talkservice.TalkException {
  if !p.IsSetE() {
    return AuthServiceOpenAuthSessionResult_E_DEFAULT
  }
return p.E
}
func (p *AuthServiceOpenAuthSessionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AuthServiceOpenAuthSessionResult) IsSetE() bool {
  return p.E != nil
}

func (p *AuthServiceOpenAuthSessionResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AuthServiceOpenAuthSessionResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AuthServiceOpenAuthSessionResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &talkservice.TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *AuthServiceOpenAuthSessionResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "openAuthSession_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthServiceOpenAuthSessionResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AuthServiceOpenAuthSessionResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *AuthServiceOpenAuthSessionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthServiceOpenAuthSessionResult(%+v)", *p)
}

// Attributes:
//  - AuthSessionId
//  - Request
type AuthServiceUpdatePasswordArgs struct {
  // unused field # 1
  AuthSessionId string `thrift:"authSessionId,2" db:"authSessionId" json:"authSessionId"`
  Request *IdentityCredentialRequest `thrift:"request,3" db:"request" json:"request"`
}

func NewAuthServiceUpdatePasswordArgs() *AuthServiceUpdatePasswordArgs {
  return &AuthServiceUpdatePasswordArgs{}
}


func (p *AuthServiceUpdatePasswordArgs) GetAuthSessionId() string {
  return p.AuthSessionId
}
var AuthServiceUpdatePasswordArgs_Request_DEFAULT *IdentityCredentialRequest
func (p *AuthServiceUpdatePasswordArgs) GetRequest() *IdentityCredentialRequest {
  if !p.IsSetRequest() {
    return AuthServiceUpdatePasswordArgs_Request_DEFAULT
  }
return p.Request
}
func (p *AuthServiceUpdatePasswordArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *AuthServiceUpdatePasswordArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AuthServiceUpdatePasswordArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AuthSessionId = v
}
  return nil
}

func (p *AuthServiceUpdatePasswordArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &IdentityCredentialRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *AuthServiceUpdatePasswordArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updatePassword_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthServiceUpdatePasswordArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "authSessionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:authSessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AuthSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authSessionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:authSessionId: ", p), err) }
  return err
}

func (p *AuthServiceUpdatePasswordArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:request: ", p), err) }
  return err
}

func (p *AuthServiceUpdatePasswordArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthServiceUpdatePasswordArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type AuthServiceUpdatePasswordResult struct {
  Success *IdentityCredentialResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *talkservice.TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewAuthServiceUpdatePasswordResult() *AuthServiceUpdatePasswordResult {
  return &AuthServiceUpdatePasswordResult{}
}

var AuthServiceUpdatePasswordResult_Success_DEFAULT *IdentityCredentialResponse
func (p *AuthServiceUpdatePasswordResult) GetSuccess() *IdentityCredentialResponse {
  if !p.IsSetSuccess() {
    return AuthServiceUpdatePasswordResult_Success_DEFAULT
  }
return p.Success
}
var AuthServiceUpdatePasswordResult_E_DEFAULT *talkservice.TalkException
func (p *AuthServiceUpdatePasswordResult) GetE() *talkservice.TalkException {
  if !p.IsSetE() {
    return AuthServiceUpdatePasswordResult_E_DEFAULT
  }
return p.E
}
func (p *AuthServiceUpdatePasswordResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AuthServiceUpdatePasswordResult) IsSetE() bool {
  return p.E != nil
}

func (p *AuthServiceUpdatePasswordResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AuthServiceUpdatePasswordResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IdentityCredentialResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AuthServiceUpdatePasswordResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &talkservice.TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *AuthServiceUpdatePasswordResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updatePassword_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthServiceUpdatePasswordResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AuthServiceUpdatePasswordResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *AuthServiceUpdatePasswordResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthServiceUpdatePasswordResult(%+v)", *p)
}

type AuthServiceLogoutZArgs struct {
}

func NewAuthServiceLogoutZArgs() *AuthServiceLogoutZArgs {
  return &AuthServiceLogoutZArgs{}
}

func (p *AuthServiceLogoutZArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AuthServiceLogoutZArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "logoutZ_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthServiceLogoutZArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthServiceLogoutZArgs(%+v)", *p)
}

// Attributes:
//  - E
type AuthServiceLogoutZResult struct {
  E *talkservice.TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewAuthServiceLogoutZResult() *AuthServiceLogoutZResult {
  return &AuthServiceLogoutZResult{}
}

var AuthServiceLogoutZResult_E_DEFAULT *talkservice.TalkException
func (p *AuthServiceLogoutZResult) GetE() *talkservice.TalkException {
  if !p.IsSetE() {
    return AuthServiceLogoutZResult_E_DEFAULT
  }
return p.E
}
func (p *AuthServiceLogoutZResult) IsSetE() bool {
  return p.E != nil
}

func (p *AuthServiceLogoutZResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AuthServiceLogoutZResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &talkservice.TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *AuthServiceLogoutZResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "logoutZ_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthServiceLogoutZResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *AuthServiceLogoutZResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthServiceLogoutZResult(%+v)", *p)
}

// Attributes:
//  - Verifier
//  - PinCode
//  - ErrorCode
//  - PublicKey
//  - EncryptedKeyChain
//  - HashKeyChain
type AuthServiceVerifyQrcodeWithE2EEArgs struct {
  // unused field # 1
  Verifier string `thrift:"verifier,2" db:"verifier" json:"verifier"`
  PinCode string `thrift:"pinCode,3" db:"pinCode" json:"pinCode"`
  ErrorCode talkservice.ErrorCode `thrift:"errorCode,4" db:"errorCode" json:"errorCode"`
  PublicKey *talkservice.E2EEPublicKey `thrift:"publicKey,5" db:"publicKey" json:"publicKey"`
  EncryptedKeyChain string `thrift:"encryptedKeyChain,6" db:"encryptedKeyChain" json:"encryptedKeyChain"`
  HashKeyChain string `thrift:"hashKeyChain,7" db:"hashKeyChain" json:"hashKeyChain"`
}

func NewAuthServiceVerifyQrcodeWithE2EEArgs() *AuthServiceVerifyQrcodeWithE2EEArgs {
  return &AuthServiceVerifyQrcodeWithE2EEArgs{}
}


func (p *AuthServiceVerifyQrcodeWithE2EEArgs) GetVerifier() string {
  return p.Verifier
}

func (p *AuthServiceVerifyQrcodeWithE2EEArgs) GetPinCode() string {
  return p.PinCode
}

func (p *AuthServiceVerifyQrcodeWithE2EEArgs) GetErrorCode() talkservice.ErrorCode {
  return p.ErrorCode
}
var AuthServiceVerifyQrcodeWithE2EEArgs_PublicKey_DEFAULT *talkservice.E2EEPublicKey
func (p *AuthServiceVerifyQrcodeWithE2EEArgs) GetPublicKey() *talkservice.E2EEPublicKey {
  if !p.IsSetPublicKey() {
    return AuthServiceVerifyQrcodeWithE2EEArgs_PublicKey_DEFAULT
  }
return p.PublicKey
}

func (p *AuthServiceVerifyQrcodeWithE2EEArgs) GetEncryptedKeyChain() string {
  return p.EncryptedKeyChain
}

func (p *AuthServiceVerifyQrcodeWithE2EEArgs) GetHashKeyChain() string {
  return p.HashKeyChain
}
func (p *AuthServiceVerifyQrcodeWithE2EEArgs) IsSetPublicKey() bool {
  return p.PublicKey != nil
}

func (p *AuthServiceVerifyQrcodeWithE2EEArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AuthServiceVerifyQrcodeWithE2EEArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Verifier = v
}
  return nil
}

func (p *AuthServiceVerifyQrcodeWithE2EEArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PinCode = v
}
  return nil
}

func (p *AuthServiceVerifyQrcodeWithE2EEArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := talkservice.ErrorCode(v)
  p.ErrorCode = temp
}
  return nil
}

func (p *AuthServiceVerifyQrcodeWithE2EEArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  p.PublicKey = &talkservice.E2EEPublicKey{}
  if err := p.PublicKey.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PublicKey), err)
  }
  return nil
}

func (p *AuthServiceVerifyQrcodeWithE2EEArgs)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.EncryptedKeyChain = v
}
  return nil
}

func (p *AuthServiceVerifyQrcodeWithE2EEArgs)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.HashKeyChain = v
}
  return nil
}

func (p *AuthServiceVerifyQrcodeWithE2EEArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "verifyQrcodeWithE2EE_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthServiceVerifyQrcodeWithE2EEArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "verifier", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:verifier: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Verifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.verifier (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:verifier: ", p), err) }
  return err
}

func (p *AuthServiceVerifyQrcodeWithE2EEArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pinCode", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pinCode: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PinCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pinCode (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pinCode: ", p), err) }
  return err
}

func (p *AuthServiceVerifyQrcodeWithE2EEArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "errorCode", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:errorCode: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.errorCode (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:errorCode: ", p), err) }
  return err
}

func (p *AuthServiceVerifyQrcodeWithE2EEArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "publicKey", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:publicKey: ", p), err) }
  if err := p.PublicKey.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PublicKey), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:publicKey: ", p), err) }
  return err
}

func (p *AuthServiceVerifyQrcodeWithE2EEArgs) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "encryptedKeyChain", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:encryptedKeyChain: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.EncryptedKeyChain)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.encryptedKeyChain (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:encryptedKeyChain: ", p), err) }
  return err
}

func (p *AuthServiceVerifyQrcodeWithE2EEArgs) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hashKeyChain", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:hashKeyChain: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.HashKeyChain)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hashKeyChain (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:hashKeyChain: ", p), err) }
  return err
}

func (p *AuthServiceVerifyQrcodeWithE2EEArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthServiceVerifyQrcodeWithE2EEArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type AuthServiceVerifyQrcodeWithE2EEResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *talkservice.TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewAuthServiceVerifyQrcodeWithE2EEResult() *AuthServiceVerifyQrcodeWithE2EEResult {
  return &AuthServiceVerifyQrcodeWithE2EEResult{}
}

var AuthServiceVerifyQrcodeWithE2EEResult_Success_DEFAULT string
func (p *AuthServiceVerifyQrcodeWithE2EEResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return AuthServiceVerifyQrcodeWithE2EEResult_Success_DEFAULT
  }
return *p.Success
}
var AuthServiceVerifyQrcodeWithE2EEResult_E_DEFAULT *talkservice.TalkException
func (p *AuthServiceVerifyQrcodeWithE2EEResult) GetE() *talkservice.TalkException {
  if !p.IsSetE() {
    return AuthServiceVerifyQrcodeWithE2EEResult_E_DEFAULT
  }
return p.E
}
func (p *AuthServiceVerifyQrcodeWithE2EEResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AuthServiceVerifyQrcodeWithE2EEResult) IsSetE() bool {
  return p.E != nil
}

func (p *AuthServiceVerifyQrcodeWithE2EEResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AuthServiceVerifyQrcodeWithE2EEResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AuthServiceVerifyQrcodeWithE2EEResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &talkservice.TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *AuthServiceVerifyQrcodeWithE2EEResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "verifyQrcodeWithE2EE_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthServiceVerifyQrcodeWithE2EEResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AuthServiceVerifyQrcodeWithE2EEResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *AuthServiceVerifyQrcodeWithE2EEResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthServiceVerifyQrcodeWithE2EEResult(%+v)", *p)
}

// Attributes:
//  - AuthSessionId
//  - IdentityProvider
type AuthServiceGetAuthRSAKeyArgs struct {
  // unused field # 1
  AuthSessionId string `thrift:"authSessionId,2" db:"authSessionId" json:"authSessionId"`
  IdentityProvider talkservice.IdentityProvider `thrift:"identityProvider,3" db:"identityProvider" json:"identityProvider"`
}

func NewAuthServiceGetAuthRSAKeyArgs() *AuthServiceGetAuthRSAKeyArgs {
  return &AuthServiceGetAuthRSAKeyArgs{}
}


func (p *AuthServiceGetAuthRSAKeyArgs) GetAuthSessionId() string {
  return p.AuthSessionId
}

func (p *AuthServiceGetAuthRSAKeyArgs) GetIdentityProvider() talkservice.IdentityProvider {
  return p.IdentityProvider
}
func (p *AuthServiceGetAuthRSAKeyArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AuthServiceGetAuthRSAKeyArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AuthSessionId = v
}
  return nil
}

func (p *AuthServiceGetAuthRSAKeyArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := talkservice.IdentityProvider(v)
  p.IdentityProvider = temp
}
  return nil
}

func (p *AuthServiceGetAuthRSAKeyArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getAuthRSAKey_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthServiceGetAuthRSAKeyArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "authSessionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:authSessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AuthSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authSessionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:authSessionId: ", p), err) }
  return err
}

func (p *AuthServiceGetAuthRSAKeyArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "identityProvider", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:identityProvider: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.IdentityProvider)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.identityProvider (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:identityProvider: ", p), err) }
  return err
}

func (p *AuthServiceGetAuthRSAKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthServiceGetAuthRSAKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type AuthServiceGetAuthRSAKeyResult struct {
  Success *talkservice.RSAKey `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *talkservice.TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewAuthServiceGetAuthRSAKeyResult() *AuthServiceGetAuthRSAKeyResult {
  return &AuthServiceGetAuthRSAKeyResult{}
}

var AuthServiceGetAuthRSAKeyResult_Success_DEFAULT *talkservice.RSAKey
func (p *AuthServiceGetAuthRSAKeyResult) GetSuccess() *talkservice.RSAKey {
  if !p.IsSetSuccess() {
    return AuthServiceGetAuthRSAKeyResult_Success_DEFAULT
  }
return p.Success
}
var AuthServiceGetAuthRSAKeyResult_E_DEFAULT *talkservice.TalkException
func (p *AuthServiceGetAuthRSAKeyResult) GetE() *talkservice.TalkException {
  if !p.IsSetE() {
    return AuthServiceGetAuthRSAKeyResult_E_DEFAULT
  }
return p.E
}
func (p *AuthServiceGetAuthRSAKeyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AuthServiceGetAuthRSAKeyResult) IsSetE() bool {
  return p.E != nil
}

func (p *AuthServiceGetAuthRSAKeyResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AuthServiceGetAuthRSAKeyResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &talkservice.RSAKey{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AuthServiceGetAuthRSAKeyResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &talkservice.TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *AuthServiceGetAuthRSAKeyResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getAuthRSAKey_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthServiceGetAuthRSAKeyResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AuthServiceGetAuthRSAKeyResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *AuthServiceGetAuthRSAKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthServiceGetAuthRSAKeyResult(%+v)", *p)
}

// Attributes:
//  - Enforce
type AuthServiceIssueTokenForAccountMigrationSettingsArgs struct {
  // unused field # 1
  Enforce bool `thrift:"enforce,2" db:"enforce" json:"enforce"`
}

func NewAuthServiceIssueTokenForAccountMigrationSettingsArgs() *AuthServiceIssueTokenForAccountMigrationSettingsArgs {
  return &AuthServiceIssueTokenForAccountMigrationSettingsArgs{}
}


func (p *AuthServiceIssueTokenForAccountMigrationSettingsArgs) GetEnforce() bool {
  return p.Enforce
}
func (p *AuthServiceIssueTokenForAccountMigrationSettingsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AuthServiceIssueTokenForAccountMigrationSettingsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Enforce = v
}
  return nil
}

func (p *AuthServiceIssueTokenForAccountMigrationSettingsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "issueTokenForAccountMigrationSettings_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthServiceIssueTokenForAccountMigrationSettingsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "enforce", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:enforce: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Enforce)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.enforce (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:enforce: ", p), err) }
  return err
}

func (p *AuthServiceIssueTokenForAccountMigrationSettingsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthServiceIssueTokenForAccountMigrationSettingsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type AuthServiceIssueTokenForAccountMigrationSettingsResult struct {
  Success *SecurityCenterResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *talkservice.TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewAuthServiceIssueTokenForAccountMigrationSettingsResult() *AuthServiceIssueTokenForAccountMigrationSettingsResult {
  return &AuthServiceIssueTokenForAccountMigrationSettingsResult{}
}

var AuthServiceIssueTokenForAccountMigrationSettingsResult_Success_DEFAULT *SecurityCenterResult_
func (p *AuthServiceIssueTokenForAccountMigrationSettingsResult) GetSuccess() *SecurityCenterResult_ {
  if !p.IsSetSuccess() {
    return AuthServiceIssueTokenForAccountMigrationSettingsResult_Success_DEFAULT
  }
return p.Success
}
var AuthServiceIssueTokenForAccountMigrationSettingsResult_E_DEFAULT *talkservice.TalkException
func (p *AuthServiceIssueTokenForAccountMigrationSettingsResult) GetE() *talkservice.TalkException {
  if !p.IsSetE() {
    return AuthServiceIssueTokenForAccountMigrationSettingsResult_E_DEFAULT
  }
return p.E
}
func (p *AuthServiceIssueTokenForAccountMigrationSettingsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AuthServiceIssueTokenForAccountMigrationSettingsResult) IsSetE() bool {
  return p.E != nil
}

func (p *AuthServiceIssueTokenForAccountMigrationSettingsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AuthServiceIssueTokenForAccountMigrationSettingsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &SecurityCenterResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AuthServiceIssueTokenForAccountMigrationSettingsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &talkservice.TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *AuthServiceIssueTokenForAccountMigrationSettingsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "issueTokenForAccountMigrationSettings_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthServiceIssueTokenForAccountMigrationSettingsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AuthServiceIssueTokenForAccountMigrationSettingsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *AuthServiceIssueTokenForAccountMigrationSettingsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthServiceIssueTokenForAccountMigrationSettingsResult(%+v)", *p)
}

// Attributes:
//  - AuthSessionId
//  - EncryptedPassword
type AuthServiceSetPasswordArgs struct {
  AuthSessionId string `thrift:"authSessionId,1" db:"authSessionId" json:"authSessionId"`
  EncryptedPassword *EncryptedPassword `thrift:"encryptedPassword,2" db:"encryptedPassword" json:"encryptedPassword"`
}

func NewAuthServiceSetPasswordArgs() *AuthServiceSetPasswordArgs {
  return &AuthServiceSetPasswordArgs{}
}


func (p *AuthServiceSetPasswordArgs) GetAuthSessionId() string {
  return p.AuthSessionId
}
var AuthServiceSetPasswordArgs_EncryptedPassword_DEFAULT *EncryptedPassword
func (p *AuthServiceSetPasswordArgs) GetEncryptedPassword() *EncryptedPassword {
  if !p.IsSetEncryptedPassword() {
    return AuthServiceSetPasswordArgs_EncryptedPassword_DEFAULT
  }
return p.EncryptedPassword
}
func (p *AuthServiceSetPasswordArgs) IsSetEncryptedPassword() bool {
  return p.EncryptedPassword != nil
}

func (p *AuthServiceSetPasswordArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AuthServiceSetPasswordArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AuthSessionId = v
}
  return nil
}

func (p *AuthServiceSetPasswordArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.EncryptedPassword = &EncryptedPassword{}
  if err := p.EncryptedPassword.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EncryptedPassword), err)
  }
  return nil
}

func (p *AuthServiceSetPasswordArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "setPassword_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthServiceSetPasswordArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "authSessionId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authSessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AuthSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authSessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authSessionId: ", p), err) }
  return err
}

func (p *AuthServiceSetPasswordArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "encryptedPassword", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:encryptedPassword: ", p), err) }
  if err := p.EncryptedPassword.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EncryptedPassword), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:encryptedPassword: ", p), err) }
  return err
}

func (p *AuthServiceSetPasswordArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthServiceSetPasswordArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type AuthServiceSetPasswordResult struct {
  Success *SetPasswordResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *talkservice.TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewAuthServiceSetPasswordResult() *AuthServiceSetPasswordResult {
  return &AuthServiceSetPasswordResult{}
}

var AuthServiceSetPasswordResult_Success_DEFAULT *SetPasswordResponse
func (p *AuthServiceSetPasswordResult) GetSuccess() *SetPasswordResponse {
  if !p.IsSetSuccess() {
    return AuthServiceSetPasswordResult_Success_DEFAULT
  }
return p.Success
}
var AuthServiceSetPasswordResult_E_DEFAULT *talkservice.TalkException
func (p *AuthServiceSetPasswordResult) GetE() *talkservice.TalkException {
  if !p.IsSetE() {
    return AuthServiceSetPasswordResult_E_DEFAULT
  }
return p.E
}
func (p *AuthServiceSetPasswordResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AuthServiceSetPasswordResult) IsSetE() bool {
  return p.E != nil
}

func (p *AuthServiceSetPasswordResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AuthServiceSetPasswordResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &SetPasswordResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AuthServiceSetPasswordResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &talkservice.TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *AuthServiceSetPasswordResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "setPassword_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthServiceSetPasswordResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AuthServiceSetPasswordResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *AuthServiceSetPasswordResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthServiceSetPasswordResult(%+v)", *p)
}

// Attributes:
//  - AuthSessionId
//  - Request
type AuthServiceConfirmIdentifierArgs struct {
  // unused field # 1
  AuthSessionId string `thrift:"authSessionId,2" db:"authSessionId" json:"authSessionId"`
  Request *IdentityCredentialRequest `thrift:"request,3" db:"request" json:"request"`
}

func NewAuthServiceConfirmIdentifierArgs() *AuthServiceConfirmIdentifierArgs {
  return &AuthServiceConfirmIdentifierArgs{}
}


func (p *AuthServiceConfirmIdentifierArgs) GetAuthSessionId() string {
  return p.AuthSessionId
}
var AuthServiceConfirmIdentifierArgs_Request_DEFAULT *IdentityCredentialRequest
func (p *AuthServiceConfirmIdentifierArgs) GetRequest() *IdentityCredentialRequest {
  if !p.IsSetRequest() {
    return AuthServiceConfirmIdentifierArgs_Request_DEFAULT
  }
return p.Request
}
func (p *AuthServiceConfirmIdentifierArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *AuthServiceConfirmIdentifierArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AuthServiceConfirmIdentifierArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AuthSessionId = v
}
  return nil
}

func (p *AuthServiceConfirmIdentifierArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &IdentityCredentialRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *AuthServiceConfirmIdentifierArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "confirmIdentifier_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthServiceConfirmIdentifierArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "authSessionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:authSessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AuthSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authSessionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:authSessionId: ", p), err) }
  return err
}

func (p *AuthServiceConfirmIdentifierArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:request: ", p), err) }
  return err
}

func (p *AuthServiceConfirmIdentifierArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthServiceConfirmIdentifierArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type AuthServiceConfirmIdentifierResult struct {
  Success *IdentityCredentialResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *talkservice.TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewAuthServiceConfirmIdentifierResult() *AuthServiceConfirmIdentifierResult {
  return &AuthServiceConfirmIdentifierResult{}
}

var AuthServiceConfirmIdentifierResult_Success_DEFAULT *IdentityCredentialResponse
func (p *AuthServiceConfirmIdentifierResult) GetSuccess() *IdentityCredentialResponse {
  if !p.IsSetSuccess() {
    return AuthServiceConfirmIdentifierResult_Success_DEFAULT
  }
return p.Success
}
var AuthServiceConfirmIdentifierResult_E_DEFAULT *talkservice.TalkException
func (p *AuthServiceConfirmIdentifierResult) GetE() *talkservice.TalkException {
  if !p.IsSetE() {
    return AuthServiceConfirmIdentifierResult_E_DEFAULT
  }
return p.E
}
func (p *AuthServiceConfirmIdentifierResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AuthServiceConfirmIdentifierResult) IsSetE() bool {
  return p.E != nil
}

func (p *AuthServiceConfirmIdentifierResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AuthServiceConfirmIdentifierResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IdentityCredentialResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AuthServiceConfirmIdentifierResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &talkservice.TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *AuthServiceConfirmIdentifierResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "confirmIdentifier_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthServiceConfirmIdentifierResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AuthServiceConfirmIdentifierResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *AuthServiceConfirmIdentifierResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthServiceConfirmIdentifierResult(%+v)", *p)
}

// Attributes:
//  - AuthSessionId
//  - Request
type AuthServiceSetIdentifierArgs struct {
  // unused field # 1
  AuthSessionId string `thrift:"authSessionId,2" db:"authSessionId" json:"authSessionId"`
  Request *IdentityCredentialRequest `thrift:"request,3" db:"request" json:"request"`
}

func NewAuthServiceSetIdentifierArgs() *AuthServiceSetIdentifierArgs {
  return &AuthServiceSetIdentifierArgs{}
}


func (p *AuthServiceSetIdentifierArgs) GetAuthSessionId() string {
  return p.AuthSessionId
}
var AuthServiceSetIdentifierArgs_Request_DEFAULT *IdentityCredentialRequest
func (p *AuthServiceSetIdentifierArgs) GetRequest() *IdentityCredentialRequest {
  if !p.IsSetRequest() {
    return AuthServiceSetIdentifierArgs_Request_DEFAULT
  }
return p.Request
}
func (p *AuthServiceSetIdentifierArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *AuthServiceSetIdentifierArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AuthServiceSetIdentifierArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AuthSessionId = v
}
  return nil
}

func (p *AuthServiceSetIdentifierArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &IdentityCredentialRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *AuthServiceSetIdentifierArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "setIdentifier_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthServiceSetIdentifierArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "authSessionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:authSessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AuthSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authSessionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:authSessionId: ", p), err) }
  return err
}

func (p *AuthServiceSetIdentifierArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:request: ", p), err) }
  return err
}

func (p *AuthServiceSetIdentifierArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthServiceSetIdentifierArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type AuthServiceSetIdentifierResult struct {
  Success *IdentityCredentialResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *talkservice.TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewAuthServiceSetIdentifierResult() *AuthServiceSetIdentifierResult {
  return &AuthServiceSetIdentifierResult{}
}

var AuthServiceSetIdentifierResult_Success_DEFAULT *IdentityCredentialResponse
func (p *AuthServiceSetIdentifierResult) GetSuccess() *IdentityCredentialResponse {
  if !p.IsSetSuccess() {
    return AuthServiceSetIdentifierResult_Success_DEFAULT
  }
return p.Success
}
var AuthServiceSetIdentifierResult_E_DEFAULT *talkservice.TalkException
func (p *AuthServiceSetIdentifierResult) GetE() *talkservice.TalkException {
  if !p.IsSetE() {
    return AuthServiceSetIdentifierResult_E_DEFAULT
  }
return p.E
}
func (p *AuthServiceSetIdentifierResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AuthServiceSetIdentifierResult) IsSetE() bool {
  return p.E != nil
}

func (p *AuthServiceSetIdentifierResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AuthServiceSetIdentifierResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IdentityCredentialResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AuthServiceSetIdentifierResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &talkservice.TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *AuthServiceSetIdentifierResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "setIdentifier_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthServiceSetIdentifierResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AuthServiceSetIdentifierResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *AuthServiceSetIdentifierResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthServiceSetIdentifierResult(%+v)", *p)
}

// Attributes:
//  - AuthSessionId
//  - Request
type AuthServiceSetIdentifierAndPasswordArgs struct {
  // unused field # 1
  AuthSessionId string `thrift:"authSessionId,2" db:"authSessionId" json:"authSessionId"`
  Request *IdentityCredentialRequest `thrift:"request,3" db:"request" json:"request"`
}

func NewAuthServiceSetIdentifierAndPasswordArgs() *AuthServiceSetIdentifierAndPasswordArgs {
  return &AuthServiceSetIdentifierAndPasswordArgs{}
}


func (p *AuthServiceSetIdentifierAndPasswordArgs) GetAuthSessionId() string {
  return p.AuthSessionId
}
var AuthServiceSetIdentifierAndPasswordArgs_Request_DEFAULT *IdentityCredentialRequest
func (p *AuthServiceSetIdentifierAndPasswordArgs) GetRequest() *IdentityCredentialRequest {
  if !p.IsSetRequest() {
    return AuthServiceSetIdentifierAndPasswordArgs_Request_DEFAULT
  }
return p.Request
}
func (p *AuthServiceSetIdentifierAndPasswordArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *AuthServiceSetIdentifierAndPasswordArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AuthServiceSetIdentifierAndPasswordArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AuthSessionId = v
}
  return nil
}

func (p *AuthServiceSetIdentifierAndPasswordArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &IdentityCredentialRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *AuthServiceSetIdentifierAndPasswordArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "setIdentifierAndPassword_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthServiceSetIdentifierAndPasswordArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "authSessionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:authSessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AuthSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authSessionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:authSessionId: ", p), err) }
  return err
}

func (p *AuthServiceSetIdentifierAndPasswordArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:request: ", p), err) }
  return err
}

func (p *AuthServiceSetIdentifierAndPasswordArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthServiceSetIdentifierAndPasswordArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type AuthServiceSetIdentifierAndPasswordResult struct {
  Success *IdentityCredentialResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *talkservice.TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewAuthServiceSetIdentifierAndPasswordResult() *AuthServiceSetIdentifierAndPasswordResult {
  return &AuthServiceSetIdentifierAndPasswordResult{}
}

var AuthServiceSetIdentifierAndPasswordResult_Success_DEFAULT *IdentityCredentialResponse
func (p *AuthServiceSetIdentifierAndPasswordResult) GetSuccess() *IdentityCredentialResponse {
  if !p.IsSetSuccess() {
    return AuthServiceSetIdentifierAndPasswordResult_Success_DEFAULT
  }
return p.Success
}
var AuthServiceSetIdentifierAndPasswordResult_E_DEFAULT *talkservice.TalkException
func (p *AuthServiceSetIdentifierAndPasswordResult) GetE() *talkservice.TalkException {
  if !p.IsSetE() {
    return AuthServiceSetIdentifierAndPasswordResult_E_DEFAULT
  }
return p.E
}
func (p *AuthServiceSetIdentifierAndPasswordResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AuthServiceSetIdentifierAndPasswordResult) IsSetE() bool {
  return p.E != nil
}

func (p *AuthServiceSetIdentifierAndPasswordResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AuthServiceSetIdentifierAndPasswordResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IdentityCredentialResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AuthServiceSetIdentifierAndPasswordResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &talkservice.TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *AuthServiceSetIdentifierAndPasswordResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "setIdentifierAndPassword_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthServiceSetIdentifierAndPasswordResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AuthServiceSetIdentifierAndPasswordResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *AuthServiceSetIdentifierAndPasswordResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthServiceSetIdentifierAndPasswordResult(%+v)", *p)
}

// Attributes:
//  - AuthSessionId
//  - Request
type AuthServiceUpdateIdentifierArgs struct {
  // unused field # 1
  AuthSessionId string `thrift:"authSessionId,2" db:"authSessionId" json:"authSessionId"`
  Request *IdentityCredentialRequest `thrift:"request,3" db:"request" json:"request"`
}

func NewAuthServiceUpdateIdentifierArgs() *AuthServiceUpdateIdentifierArgs {
  return &AuthServiceUpdateIdentifierArgs{}
}


func (p *AuthServiceUpdateIdentifierArgs) GetAuthSessionId() string {
  return p.AuthSessionId
}
var AuthServiceUpdateIdentifierArgs_Request_DEFAULT *IdentityCredentialRequest
func (p *AuthServiceUpdateIdentifierArgs) GetRequest() *IdentityCredentialRequest {
  if !p.IsSetRequest() {
    return AuthServiceUpdateIdentifierArgs_Request_DEFAULT
  }
return p.Request
}
func (p *AuthServiceUpdateIdentifierArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *AuthServiceUpdateIdentifierArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AuthServiceUpdateIdentifierArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AuthSessionId = v
}
  return nil
}

func (p *AuthServiceUpdateIdentifierArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &IdentityCredentialRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *AuthServiceUpdateIdentifierArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateIdentifier_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthServiceUpdateIdentifierArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "authSessionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:authSessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AuthSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authSessionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:authSessionId: ", p), err) }
  return err
}

func (p *AuthServiceUpdateIdentifierArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:request: ", p), err) }
  return err
}

func (p *AuthServiceUpdateIdentifierArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthServiceUpdateIdentifierArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type AuthServiceUpdateIdentifierResult struct {
  Success *IdentityCredentialResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *talkservice.TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewAuthServiceUpdateIdentifierResult() *AuthServiceUpdateIdentifierResult {
  return &AuthServiceUpdateIdentifierResult{}
}

var AuthServiceUpdateIdentifierResult_Success_DEFAULT *IdentityCredentialResponse
func (p *AuthServiceUpdateIdentifierResult) GetSuccess() *IdentityCredentialResponse {
  if !p.IsSetSuccess() {
    return AuthServiceUpdateIdentifierResult_Success_DEFAULT
  }
return p.Success
}
var AuthServiceUpdateIdentifierResult_E_DEFAULT *talkservice.TalkException
func (p *AuthServiceUpdateIdentifierResult) GetE() *talkservice.TalkException {
  if !p.IsSetE() {
    return AuthServiceUpdateIdentifierResult_E_DEFAULT
  }
return p.E
}
func (p *AuthServiceUpdateIdentifierResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AuthServiceUpdateIdentifierResult) IsSetE() bool {
  return p.E != nil
}

func (p *AuthServiceUpdateIdentifierResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AuthServiceUpdateIdentifierResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IdentityCredentialResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AuthServiceUpdateIdentifierResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &talkservice.TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *AuthServiceUpdateIdentifierResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateIdentifier_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthServiceUpdateIdentifierResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AuthServiceUpdateIdentifierResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *AuthServiceUpdateIdentifierResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthServiceUpdateIdentifierResult(%+v)", *p)
}

// Attributes:
//  - AuthSessionId
//  - Request
type AuthServiceResendIdentifierConfirmationArgs struct {
  // unused field # 1
  AuthSessionId string `thrift:"authSessionId,2" db:"authSessionId" json:"authSessionId"`
  Request *IdentityCredentialRequest `thrift:"request,3" db:"request" json:"request"`
}

func NewAuthServiceResendIdentifierConfirmationArgs() *AuthServiceResendIdentifierConfirmationArgs {
  return &AuthServiceResendIdentifierConfirmationArgs{}
}


func (p *AuthServiceResendIdentifierConfirmationArgs) GetAuthSessionId() string {
  return p.AuthSessionId
}
var AuthServiceResendIdentifierConfirmationArgs_Request_DEFAULT *IdentityCredentialRequest
func (p *AuthServiceResendIdentifierConfirmationArgs) GetRequest() *IdentityCredentialRequest {
  if !p.IsSetRequest() {
    return AuthServiceResendIdentifierConfirmationArgs_Request_DEFAULT
  }
return p.Request
}
func (p *AuthServiceResendIdentifierConfirmationArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *AuthServiceResendIdentifierConfirmationArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AuthServiceResendIdentifierConfirmationArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AuthSessionId = v
}
  return nil
}

func (p *AuthServiceResendIdentifierConfirmationArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &IdentityCredentialRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *AuthServiceResendIdentifierConfirmationArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "resendIdentifierConfirmation_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthServiceResendIdentifierConfirmationArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "authSessionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:authSessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AuthSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authSessionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:authSessionId: ", p), err) }
  return err
}

func (p *AuthServiceResendIdentifierConfirmationArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:request: ", p), err) }
  return err
}

func (p *AuthServiceResendIdentifierConfirmationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthServiceResendIdentifierConfirmationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type AuthServiceResendIdentifierConfirmationResult struct {
  Success *IdentityCredentialResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *talkservice.TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewAuthServiceResendIdentifierConfirmationResult() *AuthServiceResendIdentifierConfirmationResult {
  return &AuthServiceResendIdentifierConfirmationResult{}
}

var AuthServiceResendIdentifierConfirmationResult_Success_DEFAULT *IdentityCredentialResponse
func (p *AuthServiceResendIdentifierConfirmationResult) GetSuccess() *IdentityCredentialResponse {
  if !p.IsSetSuccess() {
    return AuthServiceResendIdentifierConfirmationResult_Success_DEFAULT
  }
return p.Success
}
var AuthServiceResendIdentifierConfirmationResult_E_DEFAULT *talkservice.TalkException
func (p *AuthServiceResendIdentifierConfirmationResult) GetE() *talkservice.TalkException {
  if !p.IsSetE() {
    return AuthServiceResendIdentifierConfirmationResult_E_DEFAULT
  }
return p.E
}
func (p *AuthServiceResendIdentifierConfirmationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AuthServiceResendIdentifierConfirmationResult) IsSetE() bool {
  return p.E != nil
}

func (p *AuthServiceResendIdentifierConfirmationResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AuthServiceResendIdentifierConfirmationResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IdentityCredentialResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AuthServiceResendIdentifierConfirmationResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &talkservice.TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *AuthServiceResendIdentifierConfirmationResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "resendIdentifierConfirmation_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthServiceResendIdentifierConfirmationResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AuthServiceResendIdentifierConfirmationResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *AuthServiceResendIdentifierConfirmationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthServiceResendIdentifierConfirmationResult(%+v)", *p)
}

// Attributes:
//  - AuthSessionId
//  - Request
type AuthServiceRemoveIdentifierArgs struct {
  // unused field # 1
  AuthSessionId string `thrift:"authSessionId,2" db:"authSessionId" json:"authSessionId"`
  Request *IdentityCredentialRequest `thrift:"request,3" db:"request" json:"request"`
}

func NewAuthServiceRemoveIdentifierArgs() *AuthServiceRemoveIdentifierArgs {
  return &AuthServiceRemoveIdentifierArgs{}
}


func (p *AuthServiceRemoveIdentifierArgs) GetAuthSessionId() string {
  return p.AuthSessionId
}
var AuthServiceRemoveIdentifierArgs_Request_DEFAULT *IdentityCredentialRequest
func (p *AuthServiceRemoveIdentifierArgs) GetRequest() *IdentityCredentialRequest {
  if !p.IsSetRequest() {
    return AuthServiceRemoveIdentifierArgs_Request_DEFAULT
  }
return p.Request
}
func (p *AuthServiceRemoveIdentifierArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *AuthServiceRemoveIdentifierArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AuthServiceRemoveIdentifierArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AuthSessionId = v
}
  return nil
}

func (p *AuthServiceRemoveIdentifierArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &IdentityCredentialRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *AuthServiceRemoveIdentifierArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "removeIdentifier_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthServiceRemoveIdentifierArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "authSessionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:authSessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AuthSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authSessionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:authSessionId: ", p), err) }
  return err
}

func (p *AuthServiceRemoveIdentifierArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:request: ", p), err) }
  return err
}

func (p *AuthServiceRemoveIdentifierArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthServiceRemoveIdentifierArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type AuthServiceRemoveIdentifierResult struct {
  Success *IdentityCredentialResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *talkservice.TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewAuthServiceRemoveIdentifierResult() *AuthServiceRemoveIdentifierResult {
  return &AuthServiceRemoveIdentifierResult{}
}

var AuthServiceRemoveIdentifierResult_Success_DEFAULT *IdentityCredentialResponse
func (p *AuthServiceRemoveIdentifierResult) GetSuccess() *IdentityCredentialResponse {
  if !p.IsSetSuccess() {
    return AuthServiceRemoveIdentifierResult_Success_DEFAULT
  }
return p.Success
}
var AuthServiceRemoveIdentifierResult_E_DEFAULT *talkservice.TalkException
func (p *AuthServiceRemoveIdentifierResult) GetE() *talkservice.TalkException {
  if !p.IsSetE() {
    return AuthServiceRemoveIdentifierResult_E_DEFAULT
  }
return p.E
}
func (p *AuthServiceRemoveIdentifierResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AuthServiceRemoveIdentifierResult) IsSetE() bool {
  return p.E != nil
}

func (p *AuthServiceRemoveIdentifierResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AuthServiceRemoveIdentifierResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &IdentityCredentialResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AuthServiceRemoveIdentifierResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &talkservice.TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *AuthServiceRemoveIdentifierResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "removeIdentifier_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthServiceRemoveIdentifierResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AuthServiceRemoveIdentifierResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *AuthServiceRemoveIdentifierResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthServiceRemoveIdentifierResult(%+v)", *p)
}


