// Code generated by Thrift Compiler (0.14.1). DO NOT EDIT.

package talkservice

import(
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"time"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

type ErrorCode int64
const (
  ErrorCode_ILLEGAL_ARGUMENT ErrorCode = 0
  ErrorCode_AUTHENTICATION_FAILED ErrorCode = 1
  ErrorCode_DB_FAILED ErrorCode = 2
  ErrorCode_INVALID_STATE ErrorCode = 3
  ErrorCode_EXCESSIVE_ACCESS ErrorCode = 4
  ErrorCode_NOT_FOUND ErrorCode = 5
  ErrorCode_INVALID_MID ErrorCode = 9
  ErrorCode_NOT_A_MEMBER ErrorCode = 10
  ErrorCode_INVALID_LENGTH ErrorCode = 6
  ErrorCode_NOT_AVAILABLE_USER ErrorCode = 7
  ErrorCode_NOT_AUTHORIZED_DEVICE ErrorCode = 8
  ErrorCode_NOT_AUTHORIZED_SESSION ErrorCode = 14
  ErrorCode_INCOMPATIBLE_APP_VERSION ErrorCode = 11
  ErrorCode_NOT_READY ErrorCode = 12
  ErrorCode_NOT_AVAILABLE_SESSION ErrorCode = 13
  ErrorCode_SYSTEM_ERROR ErrorCode = 15
  ErrorCode_NO_AVAILABLE_VERIFICATION_METHOD ErrorCode = 16
  ErrorCode_NOT_AUTHENTICATED ErrorCode = 17
  ErrorCode_INVALID_IDENTITY_CREDENTIAL ErrorCode = 18
  ErrorCode_NOT_AVAILABLE_IDENTITY_IDENTIFIER ErrorCode = 19
  ErrorCode_INTERNAL_ERROR ErrorCode = 20
  ErrorCode_NO_SUCH_IDENTITY_IDENFIER ErrorCode = 21
  ErrorCode_DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY ErrorCode = 22
  ErrorCode_ILLEGAL_IDENTITY_CREDENTIAL ErrorCode = 23
  ErrorCode_UNKNOWN_CHANNEL ErrorCode = 24
  ErrorCode_NO_SUCH_MESSAGE_BOX ErrorCode = 25
  ErrorCode_NOT_AVAILABLE_MESSAGE_BOX ErrorCode = 26
  ErrorCode_CHANNEL_DOES_NOT_MATCH ErrorCode = 27
  ErrorCode_NOT_YOUR_MESSAGE ErrorCode = 28
  ErrorCode_MESSAGE_DEFINED_ERROR ErrorCode = 29
  ErrorCode_USER_CANNOT_ACCEPT_PRESENTS ErrorCode = 30
  ErrorCode_USER_NOT_STICKER_OWNER ErrorCode = 32
  ErrorCode_MAINTENANCE_ERROR ErrorCode = 33
  ErrorCode_ACCOUNT_NOT_MATCHED ErrorCode = 34
  ErrorCode_ABUSE_BLOCK ErrorCode = 35
  ErrorCode_NOT_FRIEND ErrorCode = 36
  ErrorCode_NOT_ALLOWED_CALL ErrorCode = 37
  ErrorCode_BLOCK_FRIEND ErrorCode = 38
  ErrorCode_INCOMPATIBLE_VOIP_VERSION ErrorCode = 39
  ErrorCode_INVALID_SNS_ACCESS_TOKEN ErrorCode = 40
  ErrorCode_EXTERNAL_SERVICE_NOT_AVAILABLE ErrorCode = 41
  ErrorCode_NOT_ALLOWED_ADD_CONTACT ErrorCode = 42
  ErrorCode_NOT_CERTIFICATED ErrorCode = 43
  ErrorCode_NOT_ALLOWED_SECONDARY_DEVICE ErrorCode = 44
  ErrorCode_INVALID_PIN_CODE ErrorCode = 45
  ErrorCode_NOT_FOUND_IDENTITY_CREDENTIAL ErrorCode = 46
  ErrorCode_EXCEED_FILE_MAX_SIZE ErrorCode = 47
  ErrorCode_EXCEED_DAILY_QUOTA ErrorCode = 48
  ErrorCode_NOT_SUPPORT_SEND_FILE ErrorCode = 49
  ErrorCode_MUST_UPGRADE ErrorCode = 50
  ErrorCode_NOT_AVAILABLE_PIN_CODE_SESSION ErrorCode = 51
  ErrorCode_EXPIRED_REVISION ErrorCode = 52
  ErrorCode_NOT_YET_PHONE_NUMBER ErrorCode = 54
  ErrorCode_BAD_CALL_NUMBER ErrorCode = 55
  ErrorCode_UNAVAILABLE_CALL_NUMBER ErrorCode = 56
  ErrorCode_NOT_SUPPORT_CALL_SERVICE ErrorCode = 57
  ErrorCode_CONGESTION_CONTROL ErrorCode = 58
  ErrorCode_NO_BALANCE ErrorCode = 59
  ErrorCode_NOT_PERMITTED_CALLER_ID ErrorCode = 60
  ErrorCode_NO_CALLER_ID_LIMIT_EXCEEDED ErrorCode = 61
  ErrorCode_CALLER_ID_VERIFICATION_REQUIRED ErrorCode = 62
  ErrorCode_NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED ErrorCode = 63
  ErrorCode_MESSAGE_NOT_FOUND ErrorCode = 64
  ErrorCode_INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT ErrorCode = 65
  ErrorCode_ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED ErrorCode = 66
  ErrorCode_ACCOUNT_MIGRATION_PINCODE_BLOCKED ErrorCode = 67
  ErrorCode_INVALID_PASSWORD_FORMAT ErrorCode = 69
  ErrorCode_FEATURE_RESTRICTED ErrorCode = 70
  ErrorCode_MESSAGE_NOT_DESTRUCTIBLE ErrorCode = 71
  ErrorCode_PAID_CALL_REDEEM_FAILED ErrorCode = 72
  ErrorCode_PREVENTED_JOIN_BY_TICKET ErrorCode = 73
  ErrorCode_SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT ErrorCode = 75
  ErrorCode_SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY ErrorCode = 76
  ErrorCode_SECURITY_CENTER_NOT_VERIFIED ErrorCode = 77
  ErrorCode_SECURITY_CENTER_BLOCKED_BY_SETTING ErrorCode = 78
  ErrorCode_SECURITY_CENTER_BLOCKED ErrorCode = 79
  ErrorCode_TALK_PROXY_EXCEPTION ErrorCode = 80
  ErrorCode_E2EE_INVALID_PROTOCOL ErrorCode = 81
  ErrorCode_E2EE_RETRY_ENCRYPT ErrorCode = 82
  ErrorCode_E2EE_UPDATE_SENDER_KEY ErrorCode = 83
  ErrorCode_E2EE_UPDATE_RECEIVER_KEY ErrorCode = 84
  ErrorCode_E2EE_INVALID_ARGUMENT ErrorCode = 85
  ErrorCode_E2EE_INVALID_VERSION ErrorCode = 86
  ErrorCode_E2EE_SENDER_DISABLED ErrorCode = 87
  ErrorCode_E2EE_RECEIVER_DISABLED ErrorCode = 88
  ErrorCode_E2EE_SENDER_NOT_ALLOWED ErrorCode = 89
  ErrorCode_E2EE_RECEIVER_NOT_ALLOWED ErrorCode = 90
  ErrorCode_E2EE_RESEND_FAIL ErrorCode = 91
  ErrorCode_E2EE_RESEND_OK ErrorCode = 92
  ErrorCode_HITOKOTO_BACKUP_NO_AVAILABLE_DATA ErrorCode = 93
  ErrorCode_E2EE_UPDATE_PRIMARY_DEVICE ErrorCode = 94
  ErrorCode_SUCCESS ErrorCode = 95
  ErrorCode_CANCEL ErrorCode = 96
  ErrorCode_E2EE_PRIMARY_NOT_SUPPORT ErrorCode = 97
  ErrorCode_E2EE_RETRY_PLAIN ErrorCode = 98
  ErrorCode_E2EE_RECREATE_GROUP_KEY ErrorCode = 99
  ErrorCode_E2EE_GROUP_TOO_MANY_MEMBERS ErrorCode = 100
  ErrorCode_SERVER_BUSY ErrorCode = 101
  ErrorCode_NOT_ALLOWED_ADD_FOLLOW ErrorCode = 102
  ErrorCode_INCOMING_FRIEND_REQUEST_LIMIT ErrorCode = 103
  ErrorCode_OUTGOING_FRIEND_REQUEST_LIMIT ErrorCode = 104
  ErrorCode_OUTGOING_FRIEND_REQUEST_QUOTA ErrorCode = 105
  ErrorCode_DUPLICATED ErrorCode = 106
  ErrorCode_BANNED ErrorCode = 107
  ErrorCode_NOT_AN_INVITEE ErrorCode = 108
  ErrorCode_NOT_AN_OUTSIDER ErrorCode = 109
  ErrorCode_EMPTY_GROUP ErrorCode = 111
  ErrorCode_EXCEED_FOLLOW_LIMIT ErrorCode = 112
  ErrorCode_UNSUPPORTED_ACCOUNT_TYPE ErrorCode = 113
)

func (p ErrorCode) String() string {
  switch p {
  case ErrorCode_ILLEGAL_ARGUMENT: return "ILLEGAL_ARGUMENT"
  case ErrorCode_AUTHENTICATION_FAILED: return "AUTHENTICATION_FAILED"
  case ErrorCode_DB_FAILED: return "DB_FAILED"
  case ErrorCode_INVALID_STATE: return "INVALID_STATE"
  case ErrorCode_EXCESSIVE_ACCESS: return "EXCESSIVE_ACCESS"
  case ErrorCode_NOT_FOUND: return "NOT_FOUND"
  case ErrorCode_INVALID_MID: return "INVALID_MID"
  case ErrorCode_NOT_A_MEMBER: return "NOT_A_MEMBER"
  case ErrorCode_INVALID_LENGTH: return "INVALID_LENGTH"
  case ErrorCode_NOT_AVAILABLE_USER: return "NOT_AVAILABLE_USER"
  case ErrorCode_NOT_AUTHORIZED_DEVICE: return "NOT_AUTHORIZED_DEVICE"
  case ErrorCode_NOT_AUTHORIZED_SESSION: return "NOT_AUTHORIZED_SESSION"
  case ErrorCode_INCOMPATIBLE_APP_VERSION: return "INCOMPATIBLE_APP_VERSION"
  case ErrorCode_NOT_READY: return "NOT_READY"
  case ErrorCode_NOT_AVAILABLE_SESSION: return "NOT_AVAILABLE_SESSION"
  case ErrorCode_SYSTEM_ERROR: return "SYSTEM_ERROR"
  case ErrorCode_NO_AVAILABLE_VERIFICATION_METHOD: return "NO_AVAILABLE_VERIFICATION_METHOD"
  case ErrorCode_NOT_AUTHENTICATED: return "NOT_AUTHENTICATED"
  case ErrorCode_INVALID_IDENTITY_CREDENTIAL: return "INVALID_IDENTITY_CREDENTIAL"
  case ErrorCode_NOT_AVAILABLE_IDENTITY_IDENTIFIER: return "NOT_AVAILABLE_IDENTITY_IDENTIFIER"
  case ErrorCode_INTERNAL_ERROR: return "INTERNAL_ERROR"
  case ErrorCode_NO_SUCH_IDENTITY_IDENFIER: return "NO_SUCH_IDENTITY_IDENFIER"
  case ErrorCode_DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY: return "DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY"
  case ErrorCode_ILLEGAL_IDENTITY_CREDENTIAL: return "ILLEGAL_IDENTITY_CREDENTIAL"
  case ErrorCode_UNKNOWN_CHANNEL: return "UNKNOWN_CHANNEL"
  case ErrorCode_NO_SUCH_MESSAGE_BOX: return "NO_SUCH_MESSAGE_BOX"
  case ErrorCode_NOT_AVAILABLE_MESSAGE_BOX: return "NOT_AVAILABLE_MESSAGE_BOX"
  case ErrorCode_CHANNEL_DOES_NOT_MATCH: return "CHANNEL_DOES_NOT_MATCH"
  case ErrorCode_NOT_YOUR_MESSAGE: return "NOT_YOUR_MESSAGE"
  case ErrorCode_MESSAGE_DEFINED_ERROR: return "MESSAGE_DEFINED_ERROR"
  case ErrorCode_USER_CANNOT_ACCEPT_PRESENTS: return "USER_CANNOT_ACCEPT_PRESENTS"
  case ErrorCode_USER_NOT_STICKER_OWNER: return "USER_NOT_STICKER_OWNER"
  case ErrorCode_MAINTENANCE_ERROR: return "MAINTENANCE_ERROR"
  case ErrorCode_ACCOUNT_NOT_MATCHED: return "ACCOUNT_NOT_MATCHED"
  case ErrorCode_ABUSE_BLOCK: return "ABUSE_BLOCK"
  case ErrorCode_NOT_FRIEND: return "NOT_FRIEND"
  case ErrorCode_NOT_ALLOWED_CALL: return "NOT_ALLOWED_CALL"
  case ErrorCode_BLOCK_FRIEND: return "BLOCK_FRIEND"
  case ErrorCode_INCOMPATIBLE_VOIP_VERSION: return "INCOMPATIBLE_VOIP_VERSION"
  case ErrorCode_INVALID_SNS_ACCESS_TOKEN: return "INVALID_SNS_ACCESS_TOKEN"
  case ErrorCode_EXTERNAL_SERVICE_NOT_AVAILABLE: return "EXTERNAL_SERVICE_NOT_AVAILABLE"
  case ErrorCode_NOT_ALLOWED_ADD_CONTACT: return "NOT_ALLOWED_ADD_CONTACT"
  case ErrorCode_NOT_CERTIFICATED: return "NOT_CERTIFICATED"
  case ErrorCode_NOT_ALLOWED_SECONDARY_DEVICE: return "NOT_ALLOWED_SECONDARY_DEVICE"
  case ErrorCode_INVALID_PIN_CODE: return "INVALID_PIN_CODE"
  case ErrorCode_NOT_FOUND_IDENTITY_CREDENTIAL: return "NOT_FOUND_IDENTITY_CREDENTIAL"
  case ErrorCode_EXCEED_FILE_MAX_SIZE: return "EXCEED_FILE_MAX_SIZE"
  case ErrorCode_EXCEED_DAILY_QUOTA: return "EXCEED_DAILY_QUOTA"
  case ErrorCode_NOT_SUPPORT_SEND_FILE: return "NOT_SUPPORT_SEND_FILE"
  case ErrorCode_MUST_UPGRADE: return "MUST_UPGRADE"
  case ErrorCode_NOT_AVAILABLE_PIN_CODE_SESSION: return "NOT_AVAILABLE_PIN_CODE_SESSION"
  case ErrorCode_EXPIRED_REVISION: return "EXPIRED_REVISION"
  case ErrorCode_NOT_YET_PHONE_NUMBER: return "NOT_YET_PHONE_NUMBER"
  case ErrorCode_BAD_CALL_NUMBER: return "BAD_CALL_NUMBER"
  case ErrorCode_UNAVAILABLE_CALL_NUMBER: return "UNAVAILABLE_CALL_NUMBER"
  case ErrorCode_NOT_SUPPORT_CALL_SERVICE: return "NOT_SUPPORT_CALL_SERVICE"
  case ErrorCode_CONGESTION_CONTROL: return "CONGESTION_CONTROL"
  case ErrorCode_NO_BALANCE: return "NO_BALANCE"
  case ErrorCode_NOT_PERMITTED_CALLER_ID: return "NOT_PERMITTED_CALLER_ID"
  case ErrorCode_NO_CALLER_ID_LIMIT_EXCEEDED: return "NO_CALLER_ID_LIMIT_EXCEEDED"
  case ErrorCode_CALLER_ID_VERIFICATION_REQUIRED: return "CALLER_ID_VERIFICATION_REQUIRED"
  case ErrorCode_NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED: return "NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED"
  case ErrorCode_MESSAGE_NOT_FOUND: return "MESSAGE_NOT_FOUND"
  case ErrorCode_INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT: return "INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT"
  case ErrorCode_ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED: return "ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED"
  case ErrorCode_ACCOUNT_MIGRATION_PINCODE_BLOCKED: return "ACCOUNT_MIGRATION_PINCODE_BLOCKED"
  case ErrorCode_INVALID_PASSWORD_FORMAT: return "INVALID_PASSWORD_FORMAT"
  case ErrorCode_FEATURE_RESTRICTED: return "FEATURE_RESTRICTED"
  case ErrorCode_MESSAGE_NOT_DESTRUCTIBLE: return "MESSAGE_NOT_DESTRUCTIBLE"
  case ErrorCode_PAID_CALL_REDEEM_FAILED: return "PAID_CALL_REDEEM_FAILED"
  case ErrorCode_PREVENTED_JOIN_BY_TICKET: return "PREVENTED_JOIN_BY_TICKET"
  case ErrorCode_SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT: return "SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT"
  case ErrorCode_SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY: return "SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY"
  case ErrorCode_SECURITY_CENTER_NOT_VERIFIED: return "SECURITY_CENTER_NOT_VERIFIED"
  case ErrorCode_SECURITY_CENTER_BLOCKED_BY_SETTING: return "SECURITY_CENTER_BLOCKED_BY_SETTING"
  case ErrorCode_SECURITY_CENTER_BLOCKED: return "SECURITY_CENTER_BLOCKED"
  case ErrorCode_TALK_PROXY_EXCEPTION: return "TALK_PROXY_EXCEPTION"
  case ErrorCode_E2EE_INVALID_PROTOCOL: return "E2EE_INVALID_PROTOCOL"
  case ErrorCode_E2EE_RETRY_ENCRYPT: return "E2EE_RETRY_ENCRYPT"
  case ErrorCode_E2EE_UPDATE_SENDER_KEY: return "E2EE_UPDATE_SENDER_KEY"
  case ErrorCode_E2EE_UPDATE_RECEIVER_KEY: return "E2EE_UPDATE_RECEIVER_KEY"
  case ErrorCode_E2EE_INVALID_ARGUMENT: return "E2EE_INVALID_ARGUMENT"
  case ErrorCode_E2EE_INVALID_VERSION: return "E2EE_INVALID_VERSION"
  case ErrorCode_E2EE_SENDER_DISABLED: return "E2EE_SENDER_DISABLED"
  case ErrorCode_E2EE_RECEIVER_DISABLED: return "E2EE_RECEIVER_DISABLED"
  case ErrorCode_E2EE_SENDER_NOT_ALLOWED: return "E2EE_SENDER_NOT_ALLOWED"
  case ErrorCode_E2EE_RECEIVER_NOT_ALLOWED: return "E2EE_RECEIVER_NOT_ALLOWED"
  case ErrorCode_E2EE_RESEND_FAIL: return "E2EE_RESEND_FAIL"
  case ErrorCode_E2EE_RESEND_OK: return "E2EE_RESEND_OK"
  case ErrorCode_HITOKOTO_BACKUP_NO_AVAILABLE_DATA: return "HITOKOTO_BACKUP_NO_AVAILABLE_DATA"
  case ErrorCode_E2EE_UPDATE_PRIMARY_DEVICE: return "E2EE_UPDATE_PRIMARY_DEVICE"
  case ErrorCode_SUCCESS: return "SUCCESS"
  case ErrorCode_CANCEL: return "CANCEL"
  case ErrorCode_E2EE_PRIMARY_NOT_SUPPORT: return "E2EE_PRIMARY_NOT_SUPPORT"
  case ErrorCode_E2EE_RETRY_PLAIN: return "E2EE_RETRY_PLAIN"
  case ErrorCode_E2EE_RECREATE_GROUP_KEY: return "E2EE_RECREATE_GROUP_KEY"
  case ErrorCode_E2EE_GROUP_TOO_MANY_MEMBERS: return "E2EE_GROUP_TOO_MANY_MEMBERS"
  case ErrorCode_SERVER_BUSY: return "SERVER_BUSY"
  case ErrorCode_NOT_ALLOWED_ADD_FOLLOW: return "NOT_ALLOWED_ADD_FOLLOW"
  case ErrorCode_INCOMING_FRIEND_REQUEST_LIMIT: return "INCOMING_FRIEND_REQUEST_LIMIT"
  case ErrorCode_OUTGOING_FRIEND_REQUEST_LIMIT: return "OUTGOING_FRIEND_REQUEST_LIMIT"
  case ErrorCode_OUTGOING_FRIEND_REQUEST_QUOTA: return "OUTGOING_FRIEND_REQUEST_QUOTA"
  case ErrorCode_DUPLICATED: return "DUPLICATED"
  case ErrorCode_BANNED: return "BANNED"
  case ErrorCode_NOT_AN_INVITEE: return "NOT_AN_INVITEE"
  case ErrorCode_NOT_AN_OUTSIDER: return "NOT_AN_OUTSIDER"
  case ErrorCode_EMPTY_GROUP: return "EMPTY_GROUP"
  case ErrorCode_EXCEED_FOLLOW_LIMIT: return "EXCEED_FOLLOW_LIMIT"
  case ErrorCode_UNSUPPORTED_ACCOUNT_TYPE: return "UNSUPPORTED_ACCOUNT_TYPE"
  }
  return "<UNSET>"
}

func ErrorCodeFromString(s string) (ErrorCode, error) {
  switch s {
  case "ILLEGAL_ARGUMENT": return ErrorCode_ILLEGAL_ARGUMENT, nil 
  case "AUTHENTICATION_FAILED": return ErrorCode_AUTHENTICATION_FAILED, nil 
  case "DB_FAILED": return ErrorCode_DB_FAILED, nil 
  case "INVALID_STATE": return ErrorCode_INVALID_STATE, nil 
  case "EXCESSIVE_ACCESS": return ErrorCode_EXCESSIVE_ACCESS, nil 
  case "NOT_FOUND": return ErrorCode_NOT_FOUND, nil 
  case "INVALID_MID": return ErrorCode_INVALID_MID, nil 
  case "NOT_A_MEMBER": return ErrorCode_NOT_A_MEMBER, nil 
  case "INVALID_LENGTH": return ErrorCode_INVALID_LENGTH, nil 
  case "NOT_AVAILABLE_USER": return ErrorCode_NOT_AVAILABLE_USER, nil 
  case "NOT_AUTHORIZED_DEVICE": return ErrorCode_NOT_AUTHORIZED_DEVICE, nil 
  case "NOT_AUTHORIZED_SESSION": return ErrorCode_NOT_AUTHORIZED_SESSION, nil 
  case "INCOMPATIBLE_APP_VERSION": return ErrorCode_INCOMPATIBLE_APP_VERSION, nil 
  case "NOT_READY": return ErrorCode_NOT_READY, nil 
  case "NOT_AVAILABLE_SESSION": return ErrorCode_NOT_AVAILABLE_SESSION, nil 
  case "SYSTEM_ERROR": return ErrorCode_SYSTEM_ERROR, nil 
  case "NO_AVAILABLE_VERIFICATION_METHOD": return ErrorCode_NO_AVAILABLE_VERIFICATION_METHOD, nil 
  case "NOT_AUTHENTICATED": return ErrorCode_NOT_AUTHENTICATED, nil 
  case "INVALID_IDENTITY_CREDENTIAL": return ErrorCode_INVALID_IDENTITY_CREDENTIAL, nil 
  case "NOT_AVAILABLE_IDENTITY_IDENTIFIER": return ErrorCode_NOT_AVAILABLE_IDENTITY_IDENTIFIER, nil 
  case "INTERNAL_ERROR": return ErrorCode_INTERNAL_ERROR, nil 
  case "NO_SUCH_IDENTITY_IDENFIER": return ErrorCode_NO_SUCH_IDENTITY_IDENFIER, nil 
  case "DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY": return ErrorCode_DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY, nil 
  case "ILLEGAL_IDENTITY_CREDENTIAL": return ErrorCode_ILLEGAL_IDENTITY_CREDENTIAL, nil 
  case "UNKNOWN_CHANNEL": return ErrorCode_UNKNOWN_CHANNEL, nil 
  case "NO_SUCH_MESSAGE_BOX": return ErrorCode_NO_SUCH_MESSAGE_BOX, nil 
  case "NOT_AVAILABLE_MESSAGE_BOX": return ErrorCode_NOT_AVAILABLE_MESSAGE_BOX, nil 
  case "CHANNEL_DOES_NOT_MATCH": return ErrorCode_CHANNEL_DOES_NOT_MATCH, nil 
  case "NOT_YOUR_MESSAGE": return ErrorCode_NOT_YOUR_MESSAGE, nil 
  case "MESSAGE_DEFINED_ERROR": return ErrorCode_MESSAGE_DEFINED_ERROR, nil 
  case "USER_CANNOT_ACCEPT_PRESENTS": return ErrorCode_USER_CANNOT_ACCEPT_PRESENTS, nil 
  case "USER_NOT_STICKER_OWNER": return ErrorCode_USER_NOT_STICKER_OWNER, nil 
  case "MAINTENANCE_ERROR": return ErrorCode_MAINTENANCE_ERROR, nil 
  case "ACCOUNT_NOT_MATCHED": return ErrorCode_ACCOUNT_NOT_MATCHED, nil 
  case "ABUSE_BLOCK": return ErrorCode_ABUSE_BLOCK, nil 
  case "NOT_FRIEND": return ErrorCode_NOT_FRIEND, nil 
  case "NOT_ALLOWED_CALL": return ErrorCode_NOT_ALLOWED_CALL, nil 
  case "BLOCK_FRIEND": return ErrorCode_BLOCK_FRIEND, nil 
  case "INCOMPATIBLE_VOIP_VERSION": return ErrorCode_INCOMPATIBLE_VOIP_VERSION, nil 
  case "INVALID_SNS_ACCESS_TOKEN": return ErrorCode_INVALID_SNS_ACCESS_TOKEN, nil 
  case "EXTERNAL_SERVICE_NOT_AVAILABLE": return ErrorCode_EXTERNAL_SERVICE_NOT_AVAILABLE, nil 
  case "NOT_ALLOWED_ADD_CONTACT": return ErrorCode_NOT_ALLOWED_ADD_CONTACT, nil 
  case "NOT_CERTIFICATED": return ErrorCode_NOT_CERTIFICATED, nil 
  case "NOT_ALLOWED_SECONDARY_DEVICE": return ErrorCode_NOT_ALLOWED_SECONDARY_DEVICE, nil 
  case "INVALID_PIN_CODE": return ErrorCode_INVALID_PIN_CODE, nil 
  case "NOT_FOUND_IDENTITY_CREDENTIAL": return ErrorCode_NOT_FOUND_IDENTITY_CREDENTIAL, nil 
  case "EXCEED_FILE_MAX_SIZE": return ErrorCode_EXCEED_FILE_MAX_SIZE, nil 
  case "EXCEED_DAILY_QUOTA": return ErrorCode_EXCEED_DAILY_QUOTA, nil 
  case "NOT_SUPPORT_SEND_FILE": return ErrorCode_NOT_SUPPORT_SEND_FILE, nil 
  case "MUST_UPGRADE": return ErrorCode_MUST_UPGRADE, nil 
  case "NOT_AVAILABLE_PIN_CODE_SESSION": return ErrorCode_NOT_AVAILABLE_PIN_CODE_SESSION, nil 
  case "EXPIRED_REVISION": return ErrorCode_EXPIRED_REVISION, nil 
  case "NOT_YET_PHONE_NUMBER": return ErrorCode_NOT_YET_PHONE_NUMBER, nil 
  case "BAD_CALL_NUMBER": return ErrorCode_BAD_CALL_NUMBER, nil 
  case "UNAVAILABLE_CALL_NUMBER": return ErrorCode_UNAVAILABLE_CALL_NUMBER, nil 
  case "NOT_SUPPORT_CALL_SERVICE": return ErrorCode_NOT_SUPPORT_CALL_SERVICE, nil 
  case "CONGESTION_CONTROL": return ErrorCode_CONGESTION_CONTROL, nil 
  case "NO_BALANCE": return ErrorCode_NO_BALANCE, nil 
  case "NOT_PERMITTED_CALLER_ID": return ErrorCode_NOT_PERMITTED_CALLER_ID, nil 
  case "NO_CALLER_ID_LIMIT_EXCEEDED": return ErrorCode_NO_CALLER_ID_LIMIT_EXCEEDED, nil 
  case "CALLER_ID_VERIFICATION_REQUIRED": return ErrorCode_CALLER_ID_VERIFICATION_REQUIRED, nil 
  case "NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED": return ErrorCode_NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED, nil 
  case "MESSAGE_NOT_FOUND": return ErrorCode_MESSAGE_NOT_FOUND, nil 
  case "INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT": return ErrorCode_INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT, nil 
  case "ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED": return ErrorCode_ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED, nil 
  case "ACCOUNT_MIGRATION_PINCODE_BLOCKED": return ErrorCode_ACCOUNT_MIGRATION_PINCODE_BLOCKED, nil 
  case "INVALID_PASSWORD_FORMAT": return ErrorCode_INVALID_PASSWORD_FORMAT, nil 
  case "FEATURE_RESTRICTED": return ErrorCode_FEATURE_RESTRICTED, nil 
  case "MESSAGE_NOT_DESTRUCTIBLE": return ErrorCode_MESSAGE_NOT_DESTRUCTIBLE, nil 
  case "PAID_CALL_REDEEM_FAILED": return ErrorCode_PAID_CALL_REDEEM_FAILED, nil 
  case "PREVENTED_JOIN_BY_TICKET": return ErrorCode_PREVENTED_JOIN_BY_TICKET, nil 
  case "SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT": return ErrorCode_SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT, nil 
  case "SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY": return ErrorCode_SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY, nil 
  case "SECURITY_CENTER_NOT_VERIFIED": return ErrorCode_SECURITY_CENTER_NOT_VERIFIED, nil 
  case "SECURITY_CENTER_BLOCKED_BY_SETTING": return ErrorCode_SECURITY_CENTER_BLOCKED_BY_SETTING, nil 
  case "SECURITY_CENTER_BLOCKED": return ErrorCode_SECURITY_CENTER_BLOCKED, nil 
  case "TALK_PROXY_EXCEPTION": return ErrorCode_TALK_PROXY_EXCEPTION, nil 
  case "E2EE_INVALID_PROTOCOL": return ErrorCode_E2EE_INVALID_PROTOCOL, nil 
  case "E2EE_RETRY_ENCRYPT": return ErrorCode_E2EE_RETRY_ENCRYPT, nil 
  case "E2EE_UPDATE_SENDER_KEY": return ErrorCode_E2EE_UPDATE_SENDER_KEY, nil 
  case "E2EE_UPDATE_RECEIVER_KEY": return ErrorCode_E2EE_UPDATE_RECEIVER_KEY, nil 
  case "E2EE_INVALID_ARGUMENT": return ErrorCode_E2EE_INVALID_ARGUMENT, nil 
  case "E2EE_INVALID_VERSION": return ErrorCode_E2EE_INVALID_VERSION, nil 
  case "E2EE_SENDER_DISABLED": return ErrorCode_E2EE_SENDER_DISABLED, nil 
  case "E2EE_RECEIVER_DISABLED": return ErrorCode_E2EE_RECEIVER_DISABLED, nil 
  case "E2EE_SENDER_NOT_ALLOWED": return ErrorCode_E2EE_SENDER_NOT_ALLOWED, nil 
  case "E2EE_RECEIVER_NOT_ALLOWED": return ErrorCode_E2EE_RECEIVER_NOT_ALLOWED, nil 
  case "E2EE_RESEND_FAIL": return ErrorCode_E2EE_RESEND_FAIL, nil 
  case "E2EE_RESEND_OK": return ErrorCode_E2EE_RESEND_OK, nil 
  case "HITOKOTO_BACKUP_NO_AVAILABLE_DATA": return ErrorCode_HITOKOTO_BACKUP_NO_AVAILABLE_DATA, nil 
  case "E2EE_UPDATE_PRIMARY_DEVICE": return ErrorCode_E2EE_UPDATE_PRIMARY_DEVICE, nil 
  case "SUCCESS": return ErrorCode_SUCCESS, nil 
  case "CANCEL": return ErrorCode_CANCEL, nil 
  case "E2EE_PRIMARY_NOT_SUPPORT": return ErrorCode_E2EE_PRIMARY_NOT_SUPPORT, nil 
  case "E2EE_RETRY_PLAIN": return ErrorCode_E2EE_RETRY_PLAIN, nil 
  case "E2EE_RECREATE_GROUP_KEY": return ErrorCode_E2EE_RECREATE_GROUP_KEY, nil 
  case "E2EE_GROUP_TOO_MANY_MEMBERS": return ErrorCode_E2EE_GROUP_TOO_MANY_MEMBERS, nil 
  case "SERVER_BUSY": return ErrorCode_SERVER_BUSY, nil 
  case "NOT_ALLOWED_ADD_FOLLOW": return ErrorCode_NOT_ALLOWED_ADD_FOLLOW, nil 
  case "INCOMING_FRIEND_REQUEST_LIMIT": return ErrorCode_INCOMING_FRIEND_REQUEST_LIMIT, nil 
  case "OUTGOING_FRIEND_REQUEST_LIMIT": return ErrorCode_OUTGOING_FRIEND_REQUEST_LIMIT, nil 
  case "OUTGOING_FRIEND_REQUEST_QUOTA": return ErrorCode_OUTGOING_FRIEND_REQUEST_QUOTA, nil 
  case "DUPLICATED": return ErrorCode_DUPLICATED, nil 
  case "BANNED": return ErrorCode_BANNED, nil 
  case "NOT_AN_INVITEE": return ErrorCode_NOT_AN_INVITEE, nil 
  case "NOT_AN_OUTSIDER": return ErrorCode_NOT_AN_OUTSIDER, nil 
  case "EMPTY_GROUP": return ErrorCode_EMPTY_GROUP, nil 
  case "EXCEED_FOLLOW_LIMIT": return ErrorCode_EXCEED_FOLLOW_LIMIT, nil 
  case "UNSUPPORTED_ACCOUNT_TYPE": return ErrorCode_UNSUPPORTED_ACCOUNT_TYPE, nil 
  }
  return ErrorCode(0), fmt.Errorf("not a valid ErrorCode string")
}


func ErrorCodePtr(v ErrorCode) *ErrorCode { return &v }

func (p ErrorCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ErrorCode) UnmarshalText(text []byte) error {
q, err := ErrorCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ErrorCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ErrorCode(v)
return nil
}

func (p * ErrorCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ProfileAttribute int64
const (
  ProfileAttribute_ALL ProfileAttribute = 511
  ProfileAttribute_EMAIL ProfileAttribute = 1
  ProfileAttribute_DISPLAY_NAME ProfileAttribute = 2
  ProfileAttribute_PHONETIC_NAME ProfileAttribute = 4
  ProfileAttribute_PICTURE ProfileAttribute = 8
  ProfileAttribute_STATUS_MESSAGE ProfileAttribute = 16
  ProfileAttribute_ALLOW_SEARCH_BY_USERID ProfileAttribute = 32
  ProfileAttribute_ALLOW_SEARCH_BY_EMAIL ProfileAttribute = 64
  ProfileAttribute_BUDDY_STATUS ProfileAttribute = 128
  ProfileAttribute_MUSIC_PROFILE ProfileAttribute = 256
  ProfileAttribute_AVATAR_PROFILE ProfileAttribute = 512
)

func (p ProfileAttribute) String() string {
  switch p {
  case ProfileAttribute_ALL: return "ALL"
  case ProfileAttribute_EMAIL: return "EMAIL"
  case ProfileAttribute_DISPLAY_NAME: return "DISPLAY_NAME"
  case ProfileAttribute_PHONETIC_NAME: return "PHONETIC_NAME"
  case ProfileAttribute_PICTURE: return "PICTURE"
  case ProfileAttribute_STATUS_MESSAGE: return "STATUS_MESSAGE"
  case ProfileAttribute_ALLOW_SEARCH_BY_USERID: return "ALLOW_SEARCH_BY_USERID"
  case ProfileAttribute_ALLOW_SEARCH_BY_EMAIL: return "ALLOW_SEARCH_BY_EMAIL"
  case ProfileAttribute_BUDDY_STATUS: return "BUDDY_STATUS"
  case ProfileAttribute_MUSIC_PROFILE: return "MUSIC_PROFILE"
  case ProfileAttribute_AVATAR_PROFILE: return "AVATAR_PROFILE"
  }
  return "<UNSET>"
}

func ProfileAttributeFromString(s string) (ProfileAttribute, error) {
  switch s {
  case "ALL": return ProfileAttribute_ALL, nil 
  case "EMAIL": return ProfileAttribute_EMAIL, nil 
  case "DISPLAY_NAME": return ProfileAttribute_DISPLAY_NAME, nil 
  case "PHONETIC_NAME": return ProfileAttribute_PHONETIC_NAME, nil 
  case "PICTURE": return ProfileAttribute_PICTURE, nil 
  case "STATUS_MESSAGE": return ProfileAttribute_STATUS_MESSAGE, nil 
  case "ALLOW_SEARCH_BY_USERID": return ProfileAttribute_ALLOW_SEARCH_BY_USERID, nil 
  case "ALLOW_SEARCH_BY_EMAIL": return ProfileAttribute_ALLOW_SEARCH_BY_EMAIL, nil 
  case "BUDDY_STATUS": return ProfileAttribute_BUDDY_STATUS, nil 
  case "MUSIC_PROFILE": return ProfileAttribute_MUSIC_PROFILE, nil 
  case "AVATAR_PROFILE": return ProfileAttribute_AVATAR_PROFILE, nil 
  }
  return ProfileAttribute(0), fmt.Errorf("not a valid ProfileAttribute string")
}


func ProfileAttributePtr(v ProfileAttribute) *ProfileAttribute { return &v }

func (p ProfileAttribute) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ProfileAttribute) UnmarshalText(text []byte) error {
q, err := ProfileAttributeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ProfileAttribute) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ProfileAttribute(v)
return nil
}

func (p * ProfileAttribute) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type SettingsAttributeEx int64
const (
  SettingsAttributeEx_NOTIFICATION_ENABLE SettingsAttributeEx = 0
  SettingsAttributeEx_NOTIFICATION_MUTE_EXPIRATION SettingsAttributeEx = 1
  SettingsAttributeEx_NOTIFICATION_NEW_MESSAGE SettingsAttributeEx = 2
  SettingsAttributeEx_NOTIFICATION_GROUP_INVITATION SettingsAttributeEx = 3
  SettingsAttributeEx_NOTIFICATION_SHOW_MESSAGE SettingsAttributeEx = 4
  SettingsAttributeEx_NOTIFICATION_INCOMING_CALL SettingsAttributeEx = 5
  SettingsAttributeEx_NOTIFICATION_SOUND_MESSAGE SettingsAttributeEx = 8
  SettingsAttributeEx_NOTIFICATION_SOUND_GROUP SettingsAttributeEx = 9
  SettingsAttributeEx_NOTIFICATION_DISABLED_WITH_SUB SettingsAttributeEx = 16
  SettingsAttributeEx_NOTIFICATION_PAYMENT SettingsAttributeEx = 17
  SettingsAttributeEx_NOTIFICATION_MENTION SettingsAttributeEx = 40
  SettingsAttributeEx_NOTIFICATION_THUMBNAIL SettingsAttributeEx = 45
  SettingsAttributeEx_PRIVACY_SYNC_CONTACTS SettingsAttributeEx = 6
  SettingsAttributeEx_PRIVACY_SEARCH_BY_PHONE_NUMBER SettingsAttributeEx = 7
  SettingsAttributeEx_PRIVACY_SEARCH_BY_USERID SettingsAttributeEx = 13
  SettingsAttributeEx_PRIVACY_SEARCH_BY_EMAIL SettingsAttributeEx = 14
  SettingsAttributeEx_PRIVACY_SHARE_PERSONAL_INFO_TO_FRIENDS SettingsAttributeEx = 51
  SettingsAttributeEx_PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN SettingsAttributeEx = 21
  SettingsAttributeEx_PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME SettingsAttributeEx = 23
  SettingsAttributeEx_PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME SettingsAttributeEx = 35
  SettingsAttributeEx_PRIVACY_PROFILE_HISTORY SettingsAttributeEx = 57
  SettingsAttributeEx_PRIVACY_STATUS_MESSAGE_HISTORY SettingsAttributeEx = 54
  SettingsAttributeEx_PRIVACY_ALLOW_FRIEND_REQUEST SettingsAttributeEx = 30
  SettingsAttributeEx_PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND SettingsAttributeEx = 25
  SettingsAttributeEx_PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL SettingsAttributeEx = 26
  SettingsAttributeEx_PRIVACY_AGREE_USE_PAIDCALL SettingsAttributeEx = 27
  SettingsAttributeEx_PRIVACY_AGE_RESULT SettingsAttributeEx = 60
  SettingsAttributeEx_PRIVACY_AGE_RESULT_RECEIVED SettingsAttributeEx = 61
  SettingsAttributeEx_PRIVACY_ALLOW_FOLLOW SettingsAttributeEx = 63
  SettingsAttributeEx_PRIVACY_SHOW_FOLLOW_LIST SettingsAttributeEx = 64
  SettingsAttributeEx_CONTACT_MY_TICKET SettingsAttributeEx = 10
  SettingsAttributeEx_IDENTITY_PROVIDER SettingsAttributeEx = 11
  SettingsAttributeEx_IDENTITY_IDENTIFIER SettingsAttributeEx = 12
  SettingsAttributeEx_SNS_ACCOUNT SettingsAttributeEx = 19
  SettingsAttributeEx_PHONE_REGISTRATION SettingsAttributeEx = 20
  SettingsAttributeEx_PREFERENCE_LOCALE SettingsAttributeEx = 15
  SettingsAttributeEx_CUSTOM_MODE SettingsAttributeEx = 22
  SettingsAttributeEx_EMAIL_CONFIRMATION_STATUS SettingsAttributeEx = 24
  SettingsAttributeEx_ACCOUNT_MIGRATION_PINCODE SettingsAttributeEx = 28
  SettingsAttributeEx_ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE SettingsAttributeEx = 29
  SettingsAttributeEx_SECURITY_CENTER_SETTINGS SettingsAttributeEx = 18
  SettingsAttributeEx_E2EE_ENABLE SettingsAttributeEx = 33
  SettingsAttributeEx_HITOKOTO_BACKUP_REQUESTED SettingsAttributeEx = 34
  SettingsAttributeEx_CONTACT_ALLOW_FOLLOWING SettingsAttributeEx = 36
  SettingsAttributeEx_PRIVACY_ALLOW_NEARBY SettingsAttributeEx = 37
  SettingsAttributeEx_AGREEMENT_NEARBY SettingsAttributeEx = 38
  SettingsAttributeEx_AGREEMENT_SQUARE SettingsAttributeEx = 39
  SettingsAttributeEx_ALLOW_UNREGISTRATION_SECONDARY_DEVICE SettingsAttributeEx = 41
  SettingsAttributeEx_AGREEMENT_BOT_USE SettingsAttributeEx = 42
  SettingsAttributeEx_AGREEMENT_SHAKE_FUNCTION SettingsAttributeEx = 43
  SettingsAttributeEx_AGREEMENT_MOBILE_CONTACT_NAME SettingsAttributeEx = 44
  SettingsAttributeEx_AGREEMENT_SOUND_TO_TEXT SettingsAttributeEx = 46
  SettingsAttributeEx_AGREEMENT_PRIVACY_POLICY_VERSION SettingsAttributeEx = 47
  SettingsAttributeEx_AGREEMENT_AD_BY_WEB_ACCESS SettingsAttributeEx = 48
  SettingsAttributeEx_AGREEMENT_PHONE_NUMBER_MATCHING SettingsAttributeEx = 49
  SettingsAttributeEx_AGREEMENT_COMMUNICATION_INFO SettingsAttributeEx = 50
  SettingsAttributeEx_AGREEMENT_THINGS_WIRELESS_COMMUNICATION SettingsAttributeEx = 52
  SettingsAttributeEx_AGREEMENT_GDPR SettingsAttributeEx = 53
  SettingsAttributeEx_AGREEMENT_PROVIDE_LOCATION SettingsAttributeEx = 55
  SettingsAttributeEx_AGREEMENT_BEACON SettingsAttributeEx = 56
  SettingsAttributeEx_AGREEMENT_CONTENTS_SUGGEST SettingsAttributeEx = 58
  SettingsAttributeEx_AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION SettingsAttributeEx = 59
  SettingsAttributeEx_AGREEMENT_OCR_IMAGE_COLLECTION SettingsAttributeEx = 62
)

func (p SettingsAttributeEx) String() string {
  switch p {
  case SettingsAttributeEx_NOTIFICATION_ENABLE: return "NOTIFICATION_ENABLE"
  case SettingsAttributeEx_NOTIFICATION_MUTE_EXPIRATION: return "NOTIFICATION_MUTE_EXPIRATION"
  case SettingsAttributeEx_NOTIFICATION_NEW_MESSAGE: return "NOTIFICATION_NEW_MESSAGE"
  case SettingsAttributeEx_NOTIFICATION_GROUP_INVITATION: return "NOTIFICATION_GROUP_INVITATION"
  case SettingsAttributeEx_NOTIFICATION_SHOW_MESSAGE: return "NOTIFICATION_SHOW_MESSAGE"
  case SettingsAttributeEx_NOTIFICATION_INCOMING_CALL: return "NOTIFICATION_INCOMING_CALL"
  case SettingsAttributeEx_NOTIFICATION_SOUND_MESSAGE: return "NOTIFICATION_SOUND_MESSAGE"
  case SettingsAttributeEx_NOTIFICATION_SOUND_GROUP: return "NOTIFICATION_SOUND_GROUP"
  case SettingsAttributeEx_NOTIFICATION_DISABLED_WITH_SUB: return "NOTIFICATION_DISABLED_WITH_SUB"
  case SettingsAttributeEx_NOTIFICATION_PAYMENT: return "NOTIFICATION_PAYMENT"
  case SettingsAttributeEx_NOTIFICATION_MENTION: return "NOTIFICATION_MENTION"
  case SettingsAttributeEx_NOTIFICATION_THUMBNAIL: return "NOTIFICATION_THUMBNAIL"
  case SettingsAttributeEx_PRIVACY_SYNC_CONTACTS: return "PRIVACY_SYNC_CONTACTS"
  case SettingsAttributeEx_PRIVACY_SEARCH_BY_PHONE_NUMBER: return "PRIVACY_SEARCH_BY_PHONE_NUMBER"
  case SettingsAttributeEx_PRIVACY_SEARCH_BY_USERID: return "PRIVACY_SEARCH_BY_USERID"
  case SettingsAttributeEx_PRIVACY_SEARCH_BY_EMAIL: return "PRIVACY_SEARCH_BY_EMAIL"
  case SettingsAttributeEx_PRIVACY_SHARE_PERSONAL_INFO_TO_FRIENDS: return "PRIVACY_SHARE_PERSONAL_INFO_TO_FRIENDS"
  case SettingsAttributeEx_PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN: return "PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN"
  case SettingsAttributeEx_PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME: return "PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME"
  case SettingsAttributeEx_PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME: return "PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME"
  case SettingsAttributeEx_PRIVACY_PROFILE_HISTORY: return "PRIVACY_PROFILE_HISTORY"
  case SettingsAttributeEx_PRIVACY_STATUS_MESSAGE_HISTORY: return "PRIVACY_STATUS_MESSAGE_HISTORY"
  case SettingsAttributeEx_PRIVACY_ALLOW_FRIEND_REQUEST: return "PRIVACY_ALLOW_FRIEND_REQUEST"
  case SettingsAttributeEx_PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND: return "PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND"
  case SettingsAttributeEx_PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL: return "PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL"
  case SettingsAttributeEx_PRIVACY_AGREE_USE_PAIDCALL: return "PRIVACY_AGREE_USE_PAIDCALL"
  case SettingsAttributeEx_PRIVACY_AGE_RESULT: return "PRIVACY_AGE_RESULT"
  case SettingsAttributeEx_PRIVACY_AGE_RESULT_RECEIVED: return "PRIVACY_AGE_RESULT_RECEIVED"
  case SettingsAttributeEx_PRIVACY_ALLOW_FOLLOW: return "PRIVACY_ALLOW_FOLLOW"
  case SettingsAttributeEx_PRIVACY_SHOW_FOLLOW_LIST: return "PRIVACY_SHOW_FOLLOW_LIST"
  case SettingsAttributeEx_CONTACT_MY_TICKET: return "CONTACT_MY_TICKET"
  case SettingsAttributeEx_IDENTITY_PROVIDER: return "IDENTITY_PROVIDER"
  case SettingsAttributeEx_IDENTITY_IDENTIFIER: return "IDENTITY_IDENTIFIER"
  case SettingsAttributeEx_SNS_ACCOUNT: return "SNS_ACCOUNT"
  case SettingsAttributeEx_PHONE_REGISTRATION: return "PHONE_REGISTRATION"
  case SettingsAttributeEx_PREFERENCE_LOCALE: return "PREFERENCE_LOCALE"
  case SettingsAttributeEx_CUSTOM_MODE: return "CUSTOM_MODE"
  case SettingsAttributeEx_EMAIL_CONFIRMATION_STATUS: return "EMAIL_CONFIRMATION_STATUS"
  case SettingsAttributeEx_ACCOUNT_MIGRATION_PINCODE: return "ACCOUNT_MIGRATION_PINCODE"
  case SettingsAttributeEx_ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE: return "ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE"
  case SettingsAttributeEx_SECURITY_CENTER_SETTINGS: return "SECURITY_CENTER_SETTINGS"
  case SettingsAttributeEx_E2EE_ENABLE: return "E2EE_ENABLE"
  case SettingsAttributeEx_HITOKOTO_BACKUP_REQUESTED: return "HITOKOTO_BACKUP_REQUESTED"
  case SettingsAttributeEx_CONTACT_ALLOW_FOLLOWING: return "CONTACT_ALLOW_FOLLOWING"
  case SettingsAttributeEx_PRIVACY_ALLOW_NEARBY: return "PRIVACY_ALLOW_NEARBY"
  case SettingsAttributeEx_AGREEMENT_NEARBY: return "AGREEMENT_NEARBY"
  case SettingsAttributeEx_AGREEMENT_SQUARE: return "AGREEMENT_SQUARE"
  case SettingsAttributeEx_ALLOW_UNREGISTRATION_SECONDARY_DEVICE: return "ALLOW_UNREGISTRATION_SECONDARY_DEVICE"
  case SettingsAttributeEx_AGREEMENT_BOT_USE: return "AGREEMENT_BOT_USE"
  case SettingsAttributeEx_AGREEMENT_SHAKE_FUNCTION: return "AGREEMENT_SHAKE_FUNCTION"
  case SettingsAttributeEx_AGREEMENT_MOBILE_CONTACT_NAME: return "AGREEMENT_MOBILE_CONTACT_NAME"
  case SettingsAttributeEx_AGREEMENT_SOUND_TO_TEXT: return "AGREEMENT_SOUND_TO_TEXT"
  case SettingsAttributeEx_AGREEMENT_PRIVACY_POLICY_VERSION: return "AGREEMENT_PRIVACY_POLICY_VERSION"
  case SettingsAttributeEx_AGREEMENT_AD_BY_WEB_ACCESS: return "AGREEMENT_AD_BY_WEB_ACCESS"
  case SettingsAttributeEx_AGREEMENT_PHONE_NUMBER_MATCHING: return "AGREEMENT_PHONE_NUMBER_MATCHING"
  case SettingsAttributeEx_AGREEMENT_COMMUNICATION_INFO: return "AGREEMENT_COMMUNICATION_INFO"
  case SettingsAttributeEx_AGREEMENT_THINGS_WIRELESS_COMMUNICATION: return "AGREEMENT_THINGS_WIRELESS_COMMUNICATION"
  case SettingsAttributeEx_AGREEMENT_GDPR: return "AGREEMENT_GDPR"
  case SettingsAttributeEx_AGREEMENT_PROVIDE_LOCATION: return "AGREEMENT_PROVIDE_LOCATION"
  case SettingsAttributeEx_AGREEMENT_BEACON: return "AGREEMENT_BEACON"
  case SettingsAttributeEx_AGREEMENT_CONTENTS_SUGGEST: return "AGREEMENT_CONTENTS_SUGGEST"
  case SettingsAttributeEx_AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION: return "AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION"
  case SettingsAttributeEx_AGREEMENT_OCR_IMAGE_COLLECTION: return "AGREEMENT_OCR_IMAGE_COLLECTION"
  }
  return "<UNSET>"
}

func SettingsAttributeExFromString(s string) (SettingsAttributeEx, error) {
  switch s {
  case "NOTIFICATION_ENABLE": return SettingsAttributeEx_NOTIFICATION_ENABLE, nil 
  case "NOTIFICATION_MUTE_EXPIRATION": return SettingsAttributeEx_NOTIFICATION_MUTE_EXPIRATION, nil 
  case "NOTIFICATION_NEW_MESSAGE": return SettingsAttributeEx_NOTIFICATION_NEW_MESSAGE, nil 
  case "NOTIFICATION_GROUP_INVITATION": return SettingsAttributeEx_NOTIFICATION_GROUP_INVITATION, nil 
  case "NOTIFICATION_SHOW_MESSAGE": return SettingsAttributeEx_NOTIFICATION_SHOW_MESSAGE, nil 
  case "NOTIFICATION_INCOMING_CALL": return SettingsAttributeEx_NOTIFICATION_INCOMING_CALL, nil 
  case "NOTIFICATION_SOUND_MESSAGE": return SettingsAttributeEx_NOTIFICATION_SOUND_MESSAGE, nil 
  case "NOTIFICATION_SOUND_GROUP": return SettingsAttributeEx_NOTIFICATION_SOUND_GROUP, nil 
  case "NOTIFICATION_DISABLED_WITH_SUB": return SettingsAttributeEx_NOTIFICATION_DISABLED_WITH_SUB, nil 
  case "NOTIFICATION_PAYMENT": return SettingsAttributeEx_NOTIFICATION_PAYMENT, nil 
  case "NOTIFICATION_MENTION": return SettingsAttributeEx_NOTIFICATION_MENTION, nil 
  case "NOTIFICATION_THUMBNAIL": return SettingsAttributeEx_NOTIFICATION_THUMBNAIL, nil 
  case "PRIVACY_SYNC_CONTACTS": return SettingsAttributeEx_PRIVACY_SYNC_CONTACTS, nil 
  case "PRIVACY_SEARCH_BY_PHONE_NUMBER": return SettingsAttributeEx_PRIVACY_SEARCH_BY_PHONE_NUMBER, nil 
  case "PRIVACY_SEARCH_BY_USERID": return SettingsAttributeEx_PRIVACY_SEARCH_BY_USERID, nil 
  case "PRIVACY_SEARCH_BY_EMAIL": return SettingsAttributeEx_PRIVACY_SEARCH_BY_EMAIL, nil 
  case "PRIVACY_SHARE_PERSONAL_INFO_TO_FRIENDS": return SettingsAttributeEx_PRIVACY_SHARE_PERSONAL_INFO_TO_FRIENDS, nil 
  case "PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN": return SettingsAttributeEx_PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN, nil 
  case "PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME": return SettingsAttributeEx_PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME, nil 
  case "PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME": return SettingsAttributeEx_PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME, nil 
  case "PRIVACY_PROFILE_HISTORY": return SettingsAttributeEx_PRIVACY_PROFILE_HISTORY, nil 
  case "PRIVACY_STATUS_MESSAGE_HISTORY": return SettingsAttributeEx_PRIVACY_STATUS_MESSAGE_HISTORY, nil 
  case "PRIVACY_ALLOW_FRIEND_REQUEST": return SettingsAttributeEx_PRIVACY_ALLOW_FRIEND_REQUEST, nil 
  case "PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND": return SettingsAttributeEx_PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND, nil 
  case "PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL": return SettingsAttributeEx_PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL, nil 
  case "PRIVACY_AGREE_USE_PAIDCALL": return SettingsAttributeEx_PRIVACY_AGREE_USE_PAIDCALL, nil 
  case "PRIVACY_AGE_RESULT": return SettingsAttributeEx_PRIVACY_AGE_RESULT, nil 
  case "PRIVACY_AGE_RESULT_RECEIVED": return SettingsAttributeEx_PRIVACY_AGE_RESULT_RECEIVED, nil 
  case "PRIVACY_ALLOW_FOLLOW": return SettingsAttributeEx_PRIVACY_ALLOW_FOLLOW, nil 
  case "PRIVACY_SHOW_FOLLOW_LIST": return SettingsAttributeEx_PRIVACY_SHOW_FOLLOW_LIST, nil 
  case "CONTACT_MY_TICKET": return SettingsAttributeEx_CONTACT_MY_TICKET, nil 
  case "IDENTITY_PROVIDER": return SettingsAttributeEx_IDENTITY_PROVIDER, nil 
  case "IDENTITY_IDENTIFIER": return SettingsAttributeEx_IDENTITY_IDENTIFIER, nil 
  case "SNS_ACCOUNT": return SettingsAttributeEx_SNS_ACCOUNT, nil 
  case "PHONE_REGISTRATION": return SettingsAttributeEx_PHONE_REGISTRATION, nil 
  case "PREFERENCE_LOCALE": return SettingsAttributeEx_PREFERENCE_LOCALE, nil 
  case "CUSTOM_MODE": return SettingsAttributeEx_CUSTOM_MODE, nil 
  case "EMAIL_CONFIRMATION_STATUS": return SettingsAttributeEx_EMAIL_CONFIRMATION_STATUS, nil 
  case "ACCOUNT_MIGRATION_PINCODE": return SettingsAttributeEx_ACCOUNT_MIGRATION_PINCODE, nil 
  case "ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE": return SettingsAttributeEx_ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE, nil 
  case "SECURITY_CENTER_SETTINGS": return SettingsAttributeEx_SECURITY_CENTER_SETTINGS, nil 
  case "E2EE_ENABLE": return SettingsAttributeEx_E2EE_ENABLE, nil 
  case "HITOKOTO_BACKUP_REQUESTED": return SettingsAttributeEx_HITOKOTO_BACKUP_REQUESTED, nil 
  case "CONTACT_ALLOW_FOLLOWING": return SettingsAttributeEx_CONTACT_ALLOW_FOLLOWING, nil 
  case "PRIVACY_ALLOW_NEARBY": return SettingsAttributeEx_PRIVACY_ALLOW_NEARBY, nil 
  case "AGREEMENT_NEARBY": return SettingsAttributeEx_AGREEMENT_NEARBY, nil 
  case "AGREEMENT_SQUARE": return SettingsAttributeEx_AGREEMENT_SQUARE, nil 
  case "ALLOW_UNREGISTRATION_SECONDARY_DEVICE": return SettingsAttributeEx_ALLOW_UNREGISTRATION_SECONDARY_DEVICE, nil 
  case "AGREEMENT_BOT_USE": return SettingsAttributeEx_AGREEMENT_BOT_USE, nil 
  case "AGREEMENT_SHAKE_FUNCTION": return SettingsAttributeEx_AGREEMENT_SHAKE_FUNCTION, nil 
  case "AGREEMENT_MOBILE_CONTACT_NAME": return SettingsAttributeEx_AGREEMENT_MOBILE_CONTACT_NAME, nil 
  case "AGREEMENT_SOUND_TO_TEXT": return SettingsAttributeEx_AGREEMENT_SOUND_TO_TEXT, nil 
  case "AGREEMENT_PRIVACY_POLICY_VERSION": return SettingsAttributeEx_AGREEMENT_PRIVACY_POLICY_VERSION, nil 
  case "AGREEMENT_AD_BY_WEB_ACCESS": return SettingsAttributeEx_AGREEMENT_AD_BY_WEB_ACCESS, nil 
  case "AGREEMENT_PHONE_NUMBER_MATCHING": return SettingsAttributeEx_AGREEMENT_PHONE_NUMBER_MATCHING, nil 
  case "AGREEMENT_COMMUNICATION_INFO": return SettingsAttributeEx_AGREEMENT_COMMUNICATION_INFO, nil 
  case "AGREEMENT_THINGS_WIRELESS_COMMUNICATION": return SettingsAttributeEx_AGREEMENT_THINGS_WIRELESS_COMMUNICATION, nil 
  case "AGREEMENT_GDPR": return SettingsAttributeEx_AGREEMENT_GDPR, nil 
  case "AGREEMENT_PROVIDE_LOCATION": return SettingsAttributeEx_AGREEMENT_PROVIDE_LOCATION, nil 
  case "AGREEMENT_BEACON": return SettingsAttributeEx_AGREEMENT_BEACON, nil 
  case "AGREEMENT_CONTENTS_SUGGEST": return SettingsAttributeEx_AGREEMENT_CONTENTS_SUGGEST, nil 
  case "AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION": return SettingsAttributeEx_AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION, nil 
  case "AGREEMENT_OCR_IMAGE_COLLECTION": return SettingsAttributeEx_AGREEMENT_OCR_IMAGE_COLLECTION, nil 
  }
  return SettingsAttributeEx(0), fmt.Errorf("not a valid SettingsAttributeEx string")
}


func SettingsAttributeExPtr(v SettingsAttributeEx) *SettingsAttributeEx { return &v }

func (p SettingsAttributeEx) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SettingsAttributeEx) UnmarshalText(text []byte) error {
q, err := SettingsAttributeExFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SettingsAttributeEx) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SettingsAttributeEx(v)
return nil
}

func (p * SettingsAttributeEx) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type SyncReason int64
const (
  SyncReason_UNSPECIFIED SyncReason = 0
  SyncReason_UNKNOWN SyncReason = 1
  SyncReason_INITIALIZATION SyncReason = 2
  SyncReason_OPERATION SyncReason = 3
  SyncReason_FULL_SYNC SyncReason = 4
  SyncReason_AUTO_REPAIR SyncReason = 5
  SyncReason_MANUAL_REPAIR SyncReason = 6
  SyncReason_INTERNAL SyncReason = 7
)

func (p SyncReason) String() string {
  switch p {
  case SyncReason_UNSPECIFIED: return "UNSPECIFIED"
  case SyncReason_UNKNOWN: return "UNKNOWN"
  case SyncReason_INITIALIZATION: return "INITIALIZATION"
  case SyncReason_OPERATION: return "OPERATION"
  case SyncReason_FULL_SYNC: return "FULL_SYNC"
  case SyncReason_AUTO_REPAIR: return "AUTO_REPAIR"
  case SyncReason_MANUAL_REPAIR: return "MANUAL_REPAIR"
  case SyncReason_INTERNAL: return "INTERNAL"
  }
  return "<UNSET>"
}

func SyncReasonFromString(s string) (SyncReason, error) {
  switch s {
  case "UNSPECIFIED": return SyncReason_UNSPECIFIED, nil 
  case "UNKNOWN": return SyncReason_UNKNOWN, nil 
  case "INITIALIZATION": return SyncReason_INITIALIZATION, nil 
  case "OPERATION": return SyncReason_OPERATION, nil 
  case "FULL_SYNC": return SyncReason_FULL_SYNC, nil 
  case "AUTO_REPAIR": return SyncReason_AUTO_REPAIR, nil 
  case "MANUAL_REPAIR": return SyncReason_MANUAL_REPAIR, nil 
  case "INTERNAL": return SyncReason_INTERNAL, nil 
  }
  return SyncReason(0), fmt.Errorf("not a valid SyncReason string")
}


func SyncReasonPtr(v SyncReason) *SyncReason { return &v }

func (p SyncReason) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SyncReason) UnmarshalText(text []byte) error {
q, err := SyncReasonFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SyncReason) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SyncReason(v)
return nil
}

func (p * SyncReason) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ContactType int64
const (
  ContactType_MID ContactType = 0
  ContactType_PHONE ContactType = 1
  ContactType_EMAIL ContactType = 2
  ContactType_USERID ContactType = 3
  ContactType_PROXIMITY ContactType = 4
  ContactType_GROUP ContactType = 5
  ContactType_USER ContactType = 6
  ContactType_QRCODE ContactType = 7
  ContactType_PROMOTION_BOT ContactType = 8
  ContactType_CONTACT_MESSAGE ContactType = 9
  ContactType_FRIEND_REQUEST ContactType = 10
  ContactType_REPAIR ContactType = 128
  ContactType_FACEBOOK ContactType = 2305
  ContactType_SINA ContactType = 2306
  ContactType_RENREN ContactType = 2307
  ContactType_FEIXIN ContactType = 2308
  ContactType_BBM ContactType = 2309
  ContactType_BEACON ContactType = 11
)

func (p ContactType) String() string {
  switch p {
  case ContactType_MID: return "MID"
  case ContactType_PHONE: return "PHONE"
  case ContactType_EMAIL: return "EMAIL"
  case ContactType_USERID: return "USERID"
  case ContactType_PROXIMITY: return "PROXIMITY"
  case ContactType_GROUP: return "GROUP"
  case ContactType_USER: return "USER"
  case ContactType_QRCODE: return "QRCODE"
  case ContactType_PROMOTION_BOT: return "PROMOTION_BOT"
  case ContactType_CONTACT_MESSAGE: return "CONTACT_MESSAGE"
  case ContactType_FRIEND_REQUEST: return "FRIEND_REQUEST"
  case ContactType_REPAIR: return "REPAIR"
  case ContactType_FACEBOOK: return "FACEBOOK"
  case ContactType_SINA: return "SINA"
  case ContactType_RENREN: return "RENREN"
  case ContactType_FEIXIN: return "FEIXIN"
  case ContactType_BBM: return "BBM"
  case ContactType_BEACON: return "BEACON"
  }
  return "<UNSET>"
}

func ContactTypeFromString(s string) (ContactType, error) {
  switch s {
  case "MID": return ContactType_MID, nil 
  case "PHONE": return ContactType_PHONE, nil 
  case "EMAIL": return ContactType_EMAIL, nil 
  case "USERID": return ContactType_USERID, nil 
  case "PROXIMITY": return ContactType_PROXIMITY, nil 
  case "GROUP": return ContactType_GROUP, nil 
  case "USER": return ContactType_USER, nil 
  case "QRCODE": return ContactType_QRCODE, nil 
  case "PROMOTION_BOT": return ContactType_PROMOTION_BOT, nil 
  case "CONTACT_MESSAGE": return ContactType_CONTACT_MESSAGE, nil 
  case "FRIEND_REQUEST": return ContactType_FRIEND_REQUEST, nil 
  case "REPAIR": return ContactType_REPAIR, nil 
  case "FACEBOOK": return ContactType_FACEBOOK, nil 
  case "SINA": return ContactType_SINA, nil 
  case "RENREN": return ContactType_RENREN, nil 
  case "FEIXIN": return ContactType_FEIXIN, nil 
  case "BBM": return ContactType_BBM, nil 
  case "BEACON": return ContactType_BEACON, nil 
  }
  return ContactType(0), fmt.Errorf("not a valid ContactType string")
}


func ContactTypePtr(v ContactType) *ContactType { return &v }

func (p ContactType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ContactType) UnmarshalText(text []byte) error {
q, err := ContactTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ContactType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ContactType(v)
return nil
}

func (p * ContactType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ContactStatus int64
const (
  ContactStatus_UNSPECIFIED ContactStatus = 0
  ContactStatus_FRIEND ContactStatus = 1
  ContactStatus_FRIEND_BLOCKED ContactStatus = 2
  ContactStatus_RECOMMEND ContactStatus = 3
  ContactStatus_RECOMMEND_BLOCKED ContactStatus = 4
  ContactStatus_DELETED ContactStatus = 5
  ContactStatus_DELETED_BLOCKED ContactStatus = 6
)

func (p ContactStatus) String() string {
  switch p {
  case ContactStatus_UNSPECIFIED: return "UNSPECIFIED"
  case ContactStatus_FRIEND: return "FRIEND"
  case ContactStatus_FRIEND_BLOCKED: return "FRIEND_BLOCKED"
  case ContactStatus_RECOMMEND: return "RECOMMEND"
  case ContactStatus_RECOMMEND_BLOCKED: return "RECOMMEND_BLOCKED"
  case ContactStatus_DELETED: return "DELETED"
  case ContactStatus_DELETED_BLOCKED: return "DELETED_BLOCKED"
  }
  return "<UNSET>"
}

func ContactStatusFromString(s string) (ContactStatus, error) {
  switch s {
  case "UNSPECIFIED": return ContactStatus_UNSPECIFIED, nil 
  case "FRIEND": return ContactStatus_FRIEND, nil 
  case "FRIEND_BLOCKED": return ContactStatus_FRIEND_BLOCKED, nil 
  case "RECOMMEND": return ContactStatus_RECOMMEND, nil 
  case "RECOMMEND_BLOCKED": return ContactStatus_RECOMMEND_BLOCKED, nil 
  case "DELETED": return ContactStatus_DELETED, nil 
  case "DELETED_BLOCKED": return ContactStatus_DELETED_BLOCKED, nil 
  }
  return ContactStatus(0), fmt.Errorf("not a valid ContactStatus string")
}


func ContactStatusPtr(v ContactStatus) *ContactStatus { return &v }

func (p ContactStatus) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ContactStatus) UnmarshalText(text []byte) error {
q, err := ContactStatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ContactStatus) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ContactStatus(v)
return nil
}

func (p * ContactStatus) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ContactRelation int64
const (
  ContactRelation_ONEWAY ContactRelation = 0
  ContactRelation_BOTH ContactRelation = 1
  ContactRelation_NOT_REGISTERED ContactRelation = 2
)

func (p ContactRelation) String() string {
  switch p {
  case ContactRelation_ONEWAY: return "ONEWAY"
  case ContactRelation_BOTH: return "BOTH"
  case ContactRelation_NOT_REGISTERED: return "NOT_REGISTERED"
  }
  return "<UNSET>"
}

func ContactRelationFromString(s string) (ContactRelation, error) {
  switch s {
  case "ONEWAY": return ContactRelation_ONEWAY, nil 
  case "BOTH": return ContactRelation_BOTH, nil 
  case "NOT_REGISTERED": return ContactRelation_NOT_REGISTERED, nil 
  }
  return ContactRelation(0), fmt.Errorf("not a valid ContactRelation string")
}


func ContactRelationPtr(v ContactRelation) *ContactRelation { return &v }

func (p ContactRelation) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ContactRelation) UnmarshalText(text []byte) error {
q, err := ContactRelationFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ContactRelation) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ContactRelation(v)
return nil
}

func (p * ContactRelation) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type FriendRequestStatus int64
const (
  FriendRequestStatus_NONE FriendRequestStatus = 0
  FriendRequestStatus_AVAILABLE FriendRequestStatus = 1
  FriendRequestStatus_ALREADY_REQUESTED FriendRequestStatus = 2
  FriendRequestStatus_UNAVAILABLE FriendRequestStatus = 3
)

func (p FriendRequestStatus) String() string {
  switch p {
  case FriendRequestStatus_NONE: return "NONE"
  case FriendRequestStatus_AVAILABLE: return "AVAILABLE"
  case FriendRequestStatus_ALREADY_REQUESTED: return "ALREADY_REQUESTED"
  case FriendRequestStatus_UNAVAILABLE: return "UNAVAILABLE"
  }
  return "<UNSET>"
}

func FriendRequestStatusFromString(s string) (FriendRequestStatus, error) {
  switch s {
  case "NONE": return FriendRequestStatus_NONE, nil 
  case "AVAILABLE": return FriendRequestStatus_AVAILABLE, nil 
  case "ALREADY_REQUESTED": return FriendRequestStatus_ALREADY_REQUESTED, nil 
  case "UNAVAILABLE": return FriendRequestStatus_UNAVAILABLE, nil 
  }
  return FriendRequestStatus(0), fmt.Errorf("not a valid FriendRequestStatus string")
}


func FriendRequestStatusPtr(v FriendRequestStatus) *FriendRequestStatus { return &v }

func (p FriendRequestStatus) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *FriendRequestStatus) UnmarshalText(text []byte) error {
q, err := FriendRequestStatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *FriendRequestStatus) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = FriendRequestStatus(v)
return nil
}

func (p * FriendRequestStatus) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type OpType int64
const (
  OpType_END_OF_OPERATION OpType = 0
  OpType_UPDATE_PROFILE OpType = 1
  OpType_UPDATE_SETTINGS OpType = 36
  OpType_NOTIFIED_UPDATE_PROFILE OpType = 2
  OpType_REGISTER_USERID OpType = 3
  OpType_ADD_CONTACT OpType = 4
  OpType_NOTIFIED_ADD_CONTACT OpType = 5
  OpType_BLOCK_CONTACT OpType = 6
  OpType_UNBLOCK_CONTACT OpType = 7
  OpType_NOTIFIED_RECOMMEND_CONTACT OpType = 8
  OpType_CREATE_GROUP OpType = 9
  OpType_UPDATE_GROUP OpType = 10
  OpType_NOTIFIED_UPDATE_GROUP OpType = 11
  OpType_INVITE_INTO_GROUP OpType = 12
  OpType_NOTIFIED_INVITE_INTO_GROUP OpType = 13
  OpType_CANCEL_INVITATION_GROUP OpType = 31
  OpType_NOTIFIED_CANCEL_INVITATION_GROUP OpType = 32
  OpType_LEAVE_GROUP OpType = 14
  OpType_NOTIFIED_LEAVE_GROUP OpType = 15
  OpType_ACCEPT_GROUP_INVITATION OpType = 16
  OpType_NOTIFIED_ACCEPT_GROUP_INVITATION OpType = 17
  OpType_REJECT_GROUP_INVITATION OpType = 34
  OpType_NOTIFIED_REJECT_GROUP_INVITATION OpType = 35
  OpType_KICKOUT_FROM_GROUP OpType = 18
  OpType_NOTIFIED_KICKOUT_FROM_GROUP OpType = 19
  OpType_CREATE_ROOM OpType = 20
  OpType_INVITE_INTO_ROOM OpType = 21
  OpType_NOTIFIED_INVITE_INTO_ROOM OpType = 22
  OpType_LEAVE_ROOM OpType = 23
  OpType_NOTIFIED_LEAVE_ROOM OpType = 24
  OpType_SEND_MESSAGE OpType = 25
  OpType_RECEIVE_MESSAGE OpType = 26
  OpType_SEND_MESSAGE_RECEIPT OpType = 27
  OpType_RECEIVE_MESSAGE_RECEIPT OpType = 28
  OpType_SEND_CONTENT_RECEIPT OpType = 29
  OpType_SEND_CHAT_CHECKED OpType = 40
  OpType_SEND_CHAT_REMOVED OpType = 41
  OpType_RECEIVE_ANNOUNCEMENT OpType = 30
  OpType_INVITE_VIA_EMAIL OpType = 38
  OpType_NOTIFIED_REGISTER_USER OpType = 37
  OpType_NOTIFIED_UNREGISTER_USER OpType = 33
  OpType_NOTIFIED_REQUEST_RECOVERY OpType = 39
  OpType_NOTIFIED_FORCE_SYNC OpType = 42
  OpType_SEND_CONTENT OpType = 43
  OpType_SEND_MESSAGE_MYHOME OpType = 44
  OpType_NOTIFIED_UPDATE_CONTENT_PREVIEW OpType = 45
  OpType_REMOVE_ALL_MESSAGES OpType = 46
  OpType_NOTIFIED_UPDATE_PURCHASES OpType = 47
  OpType_DUMMY OpType = 48
  OpType_UPDATE_CONTACT OpType = 49
  OpType_NOTIFIED_RECEIVED_CALL OpType = 50
  OpType_CANCEL_CALL OpType = 51
  OpType_NOTIFIED_REDIRECT OpType = 52
  OpType_NOTIFIED_CHANNEL_SYNC OpType = 53
  OpType_FAILED_SEND_MESSAGE OpType = 54
  OpType_NOTIFIED_READ_MESSAGE OpType = 55
  OpType_FAILED_EMAIL_CONFIRMATION OpType = 56
  OpType_NOTIFIED_PUSH_NOTICENTER_ITEM OpType = 59
  OpType_NOTIFIED_CHAT_CONTENT OpType = 58
  OpType_NOTIFIED_JOIN_CHAT OpType = 60
  OpType_NOTIFIED_LEAVE_CHAT OpType = 61
  OpType_NOTIFIED_TYPING OpType = 62
  OpType_FRIEND_REQUEST_ACCEPTED OpType = 63
  OpType_DESTROY_MESSAGE OpType = 64
  OpType_NOTIFIED_DESTROY_MESSAGE OpType = 65
  OpType_UPDATE_PUBLICKEYCHAIN OpType = 66
  OpType_NOTIFIED_UPDATE_PUBLICKEYCHAIN OpType = 67
  OpType_NOTIFIED_BLOCK_CONTACT OpType = 68
  OpType_NOTIFIED_UNBLOCK_CONTACT OpType = 69
  OpType_UPDATE_GROUPPREFERENCE OpType = 70
  OpType_NOTIFIED_PAYMENT_EVENT OpType = 71
  OpType_REGISTER_E2EE_PUBLICKEY OpType = 72
  OpType_NOTIFIED_E2EE_KEY_EXCHANGE_REQ OpType = 73
  OpType_NOTIFIED_E2EE_KEY_EXCHANGE_RESP OpType = 74
  OpType_NOTIFIED_E2EE_MESSAGE_RESEND_REQ OpType = 75
  OpType_NOTIFIED_E2EE_MESSAGE_RESEND_RESP OpType = 76
  OpType_NOTIFIED_E2EE_KEY_UPDATE OpType = 77
  OpType_NOTIFIED_BUDDY_UPDATE_PROFILE OpType = 78
  OpType_NOTIFIED_UPDATE_LINEAT_TABS OpType = 79
  OpType_UPDATE_ROOM OpType = 80
  OpType_NOTIFIED_BEACON_DETECTED OpType = 81
  OpType_UPDATE_EXTENDED_PROFILE OpType = 82
  OpType_ADD_FOLLOW OpType = 83
  OpType_NOTIFIED_ADD_FOLLOW OpType = 84
  OpType_DELETE_FOLLOW OpType = 85
  OpType_NOTIFIED_DELETE_FOLLOW OpType = 86
  OpType_UPDATE_TIMELINE_SETTINGS OpType = 87
  OpType_NOTIFIED_FRIEND_REQUEST OpType = 88
  OpType_UPDATE_RINGBACK_TONE OpType = 89
  OpType_NOTIFIED_POSTBACK OpType = 90
  OpType_RECEIVE_READ_WATERMARK OpType = 91
  OpType_NOTIFIED_MESSAGE_DELIVERED OpType = 92
  OpType_NOTIFIED_UPDATE_CHAT_BAR OpType = 93
  OpType_NOTIFIED_CHATAPP_INSTALLED OpType = 94
  OpType_NOTIFIED_CHATAPP_UPDATED OpType = 95
  OpType_NOTIFIED_CHATAPP_NEW_MARK OpType = 96
  OpType_NOTIFIED_CHATAPP_DELETED OpType = 97
  OpType_NOTIFIED_CHATAPP_SYNC OpType = 98
  OpType_NOTIFIED_UPDATE_MESSAGE OpType = 99
  OpType_UPDATE_CHATROOMBGM OpType = 100
  OpType_NOTIFIED_UPDATE_CHATROOMBGM OpType = 101
  OpType_UPDATE_RINGTONE OpType = 102
  OpType_UPDATE_USER_SETTINGS OpType = 118
  OpType_NOTIFIED_UPDATE_STATUS_BAR OpType = 119
  OpType_CREATE_CHAT OpType = 120
  OpType_UPDATE_CHAT OpType = 121
  OpType_NOTIFIED_UPDATE_CHAT OpType = 122
  OpType_INVITE_INTO_CHAT OpType = 123
  OpType_NOTIFIED_INVITE_INTO_CHAT OpType = 124
  OpType_CANCEL_CHAT_INVITATION OpType = 125
  OpType_NOTIFIED_CANCEL_CHAT_INVITATION OpType = 126
  OpType_DELETE_SELF_FROM_CHAT OpType = 127
  OpType_NOTIFIED_DELETE_SELF_FROM_CHAT OpType = 128
  OpType_ACCEPT_CHAT_INVITATION OpType = 129
  OpType_NOTIFIED_ACCEPT_CHAT_INVITATION OpType = 130
  OpType_REJECT_CHAT_INVITATION OpType = 131
  OpType_DELETE_OTHER_FROM_CHAT OpType = 132
  OpType_NOTIFIED_DELETE_OTHER_FROM_CHAT OpType = 133
)

func (p OpType) String() string {
  switch p {
  case OpType_END_OF_OPERATION: return "END_OF_OPERATION"
  case OpType_UPDATE_PROFILE: return "UPDATE_PROFILE"
  case OpType_UPDATE_SETTINGS: return "UPDATE_SETTINGS"
  case OpType_NOTIFIED_UPDATE_PROFILE: return "NOTIFIED_UPDATE_PROFILE"
  case OpType_REGISTER_USERID: return "REGISTER_USERID"
  case OpType_ADD_CONTACT: return "ADD_CONTACT"
  case OpType_NOTIFIED_ADD_CONTACT: return "NOTIFIED_ADD_CONTACT"
  case OpType_BLOCK_CONTACT: return "BLOCK_CONTACT"
  case OpType_UNBLOCK_CONTACT: return "UNBLOCK_CONTACT"
  case OpType_NOTIFIED_RECOMMEND_CONTACT: return "NOTIFIED_RECOMMEND_CONTACT"
  case OpType_CREATE_GROUP: return "CREATE_GROUP"
  case OpType_UPDATE_GROUP: return "UPDATE_GROUP"
  case OpType_NOTIFIED_UPDATE_GROUP: return "NOTIFIED_UPDATE_GROUP"
  case OpType_INVITE_INTO_GROUP: return "INVITE_INTO_GROUP"
  case OpType_NOTIFIED_INVITE_INTO_GROUP: return "NOTIFIED_INVITE_INTO_GROUP"
  case OpType_CANCEL_INVITATION_GROUP: return "CANCEL_INVITATION_GROUP"
  case OpType_NOTIFIED_CANCEL_INVITATION_GROUP: return "NOTIFIED_CANCEL_INVITATION_GROUP"
  case OpType_LEAVE_GROUP: return "LEAVE_GROUP"
  case OpType_NOTIFIED_LEAVE_GROUP: return "NOTIFIED_LEAVE_GROUP"
  case OpType_ACCEPT_GROUP_INVITATION: return "ACCEPT_GROUP_INVITATION"
  case OpType_NOTIFIED_ACCEPT_GROUP_INVITATION: return "NOTIFIED_ACCEPT_GROUP_INVITATION"
  case OpType_REJECT_GROUP_INVITATION: return "REJECT_GROUP_INVITATION"
  case OpType_NOTIFIED_REJECT_GROUP_INVITATION: return "NOTIFIED_REJECT_GROUP_INVITATION"
  case OpType_KICKOUT_FROM_GROUP: return "KICKOUT_FROM_GROUP"
  case OpType_NOTIFIED_KICKOUT_FROM_GROUP: return "NOTIFIED_KICKOUT_FROM_GROUP"
  case OpType_CREATE_ROOM: return "CREATE_ROOM"
  case OpType_INVITE_INTO_ROOM: return "INVITE_INTO_ROOM"
  case OpType_NOTIFIED_INVITE_INTO_ROOM: return "NOTIFIED_INVITE_INTO_ROOM"
  case OpType_LEAVE_ROOM: return "LEAVE_ROOM"
  case OpType_NOTIFIED_LEAVE_ROOM: return "NOTIFIED_LEAVE_ROOM"
  case OpType_SEND_MESSAGE: return "SEND_MESSAGE"
  case OpType_RECEIVE_MESSAGE: return "RECEIVE_MESSAGE"
  case OpType_SEND_MESSAGE_RECEIPT: return "SEND_MESSAGE_RECEIPT"
  case OpType_RECEIVE_MESSAGE_RECEIPT: return "RECEIVE_MESSAGE_RECEIPT"
  case OpType_SEND_CONTENT_RECEIPT: return "SEND_CONTENT_RECEIPT"
  case OpType_SEND_CHAT_CHECKED: return "SEND_CHAT_CHECKED"
  case OpType_SEND_CHAT_REMOVED: return "SEND_CHAT_REMOVED"
  case OpType_RECEIVE_ANNOUNCEMENT: return "RECEIVE_ANNOUNCEMENT"
  case OpType_INVITE_VIA_EMAIL: return "INVITE_VIA_EMAIL"
  case OpType_NOTIFIED_REGISTER_USER: return "NOTIFIED_REGISTER_USER"
  case OpType_NOTIFIED_UNREGISTER_USER: return "NOTIFIED_UNREGISTER_USER"
  case OpType_NOTIFIED_REQUEST_RECOVERY: return "NOTIFIED_REQUEST_RECOVERY"
  case OpType_NOTIFIED_FORCE_SYNC: return "NOTIFIED_FORCE_SYNC"
  case OpType_SEND_CONTENT: return "SEND_CONTENT"
  case OpType_SEND_MESSAGE_MYHOME: return "SEND_MESSAGE_MYHOME"
  case OpType_NOTIFIED_UPDATE_CONTENT_PREVIEW: return "NOTIFIED_UPDATE_CONTENT_PREVIEW"
  case OpType_REMOVE_ALL_MESSAGES: return "REMOVE_ALL_MESSAGES"
  case OpType_NOTIFIED_UPDATE_PURCHASES: return "NOTIFIED_UPDATE_PURCHASES"
  case OpType_DUMMY: return "DUMMY"
  case OpType_UPDATE_CONTACT: return "UPDATE_CONTACT"
  case OpType_NOTIFIED_RECEIVED_CALL: return "NOTIFIED_RECEIVED_CALL"
  case OpType_CANCEL_CALL: return "CANCEL_CALL"
  case OpType_NOTIFIED_REDIRECT: return "NOTIFIED_REDIRECT"
  case OpType_NOTIFIED_CHANNEL_SYNC: return "NOTIFIED_CHANNEL_SYNC"
  case OpType_FAILED_SEND_MESSAGE: return "FAILED_SEND_MESSAGE"
  case OpType_NOTIFIED_READ_MESSAGE: return "NOTIFIED_READ_MESSAGE"
  case OpType_FAILED_EMAIL_CONFIRMATION: return "FAILED_EMAIL_CONFIRMATION"
  case OpType_NOTIFIED_PUSH_NOTICENTER_ITEM: return "NOTIFIED_PUSH_NOTICENTER_ITEM"
  case OpType_NOTIFIED_CHAT_CONTENT: return "NOTIFIED_CHAT_CONTENT"
  case OpType_NOTIFIED_JOIN_CHAT: return "NOTIFIED_JOIN_CHAT"
  case OpType_NOTIFIED_LEAVE_CHAT: return "NOTIFIED_LEAVE_CHAT"
  case OpType_NOTIFIED_TYPING: return "NOTIFIED_TYPING"
  case OpType_FRIEND_REQUEST_ACCEPTED: return "FRIEND_REQUEST_ACCEPTED"
  case OpType_DESTROY_MESSAGE: return "DESTROY_MESSAGE"
  case OpType_NOTIFIED_DESTROY_MESSAGE: return "NOTIFIED_DESTROY_MESSAGE"
  case OpType_UPDATE_PUBLICKEYCHAIN: return "UPDATE_PUBLICKEYCHAIN"
  case OpType_NOTIFIED_UPDATE_PUBLICKEYCHAIN: return "NOTIFIED_UPDATE_PUBLICKEYCHAIN"
  case OpType_NOTIFIED_BLOCK_CONTACT: return "NOTIFIED_BLOCK_CONTACT"
  case OpType_NOTIFIED_UNBLOCK_CONTACT: return "NOTIFIED_UNBLOCK_CONTACT"
  case OpType_UPDATE_GROUPPREFERENCE: return "UPDATE_GROUPPREFERENCE"
  case OpType_NOTIFIED_PAYMENT_EVENT: return "NOTIFIED_PAYMENT_EVENT"
  case OpType_REGISTER_E2EE_PUBLICKEY: return "REGISTER_E2EE_PUBLICKEY"
  case OpType_NOTIFIED_E2EE_KEY_EXCHANGE_REQ: return "NOTIFIED_E2EE_KEY_EXCHANGE_REQ"
  case OpType_NOTIFIED_E2EE_KEY_EXCHANGE_RESP: return "NOTIFIED_E2EE_KEY_EXCHANGE_RESP"
  case OpType_NOTIFIED_E2EE_MESSAGE_RESEND_REQ: return "NOTIFIED_E2EE_MESSAGE_RESEND_REQ"
  case OpType_NOTIFIED_E2EE_MESSAGE_RESEND_RESP: return "NOTIFIED_E2EE_MESSAGE_RESEND_RESP"
  case OpType_NOTIFIED_E2EE_KEY_UPDATE: return "NOTIFIED_E2EE_KEY_UPDATE"
  case OpType_NOTIFIED_BUDDY_UPDATE_PROFILE: return "NOTIFIED_BUDDY_UPDATE_PROFILE"
  case OpType_NOTIFIED_UPDATE_LINEAT_TABS: return "NOTIFIED_UPDATE_LINEAT_TABS"
  case OpType_UPDATE_ROOM: return "UPDATE_ROOM"
  case OpType_NOTIFIED_BEACON_DETECTED: return "NOTIFIED_BEACON_DETECTED"
  case OpType_UPDATE_EXTENDED_PROFILE: return "UPDATE_EXTENDED_PROFILE"
  case OpType_ADD_FOLLOW: return "ADD_FOLLOW"
  case OpType_NOTIFIED_ADD_FOLLOW: return "NOTIFIED_ADD_FOLLOW"
  case OpType_DELETE_FOLLOW: return "DELETE_FOLLOW"
  case OpType_NOTIFIED_DELETE_FOLLOW: return "NOTIFIED_DELETE_FOLLOW"
  case OpType_UPDATE_TIMELINE_SETTINGS: return "UPDATE_TIMELINE_SETTINGS"
  case OpType_NOTIFIED_FRIEND_REQUEST: return "NOTIFIED_FRIEND_REQUEST"
  case OpType_UPDATE_RINGBACK_TONE: return "UPDATE_RINGBACK_TONE"
  case OpType_NOTIFIED_POSTBACK: return "NOTIFIED_POSTBACK"
  case OpType_RECEIVE_READ_WATERMARK: return "RECEIVE_READ_WATERMARK"
  case OpType_NOTIFIED_MESSAGE_DELIVERED: return "NOTIFIED_MESSAGE_DELIVERED"
  case OpType_NOTIFIED_UPDATE_CHAT_BAR: return "NOTIFIED_UPDATE_CHAT_BAR"
  case OpType_NOTIFIED_CHATAPP_INSTALLED: return "NOTIFIED_CHATAPP_INSTALLED"
  case OpType_NOTIFIED_CHATAPP_UPDATED: return "NOTIFIED_CHATAPP_UPDATED"
  case OpType_NOTIFIED_CHATAPP_NEW_MARK: return "NOTIFIED_CHATAPP_NEW_MARK"
  case OpType_NOTIFIED_CHATAPP_DELETED: return "NOTIFIED_CHATAPP_DELETED"
  case OpType_NOTIFIED_CHATAPP_SYNC: return "NOTIFIED_CHATAPP_SYNC"
  case OpType_NOTIFIED_UPDATE_MESSAGE: return "NOTIFIED_UPDATE_MESSAGE"
  case OpType_UPDATE_CHATROOMBGM: return "UPDATE_CHATROOMBGM"
  case OpType_NOTIFIED_UPDATE_CHATROOMBGM: return "NOTIFIED_UPDATE_CHATROOMBGM"
  case OpType_UPDATE_RINGTONE: return "UPDATE_RINGTONE"
  case OpType_UPDATE_USER_SETTINGS: return "UPDATE_USER_SETTINGS"
  case OpType_NOTIFIED_UPDATE_STATUS_BAR: return "NOTIFIED_UPDATE_STATUS_BAR"
  case OpType_CREATE_CHAT: return "CREATE_CHAT"
  case OpType_UPDATE_CHAT: return "UPDATE_CHAT"
  case OpType_NOTIFIED_UPDATE_CHAT: return "NOTIFIED_UPDATE_CHAT"
  case OpType_INVITE_INTO_CHAT: return "INVITE_INTO_CHAT"
  case OpType_NOTIFIED_INVITE_INTO_CHAT: return "NOTIFIED_INVITE_INTO_CHAT"
  case OpType_CANCEL_CHAT_INVITATION: return "CANCEL_CHAT_INVITATION"
  case OpType_NOTIFIED_CANCEL_CHAT_INVITATION: return "NOTIFIED_CANCEL_CHAT_INVITATION"
  case OpType_DELETE_SELF_FROM_CHAT: return "DELETE_SELF_FROM_CHAT"
  case OpType_NOTIFIED_DELETE_SELF_FROM_CHAT: return "NOTIFIED_DELETE_SELF_FROM_CHAT"
  case OpType_ACCEPT_CHAT_INVITATION: return "ACCEPT_CHAT_INVITATION"
  case OpType_NOTIFIED_ACCEPT_CHAT_INVITATION: return "NOTIFIED_ACCEPT_CHAT_INVITATION"
  case OpType_REJECT_CHAT_INVITATION: return "REJECT_CHAT_INVITATION"
  case OpType_DELETE_OTHER_FROM_CHAT: return "DELETE_OTHER_FROM_CHAT"
  case OpType_NOTIFIED_DELETE_OTHER_FROM_CHAT: return "NOTIFIED_DELETE_OTHER_FROM_CHAT"
  }
  return "<UNSET>"
}

func OpTypeFromString(s string) (OpType, error) {
  switch s {
  case "END_OF_OPERATION": return OpType_END_OF_OPERATION, nil 
  case "UPDATE_PROFILE": return OpType_UPDATE_PROFILE, nil 
  case "UPDATE_SETTINGS": return OpType_UPDATE_SETTINGS, nil 
  case "NOTIFIED_UPDATE_PROFILE": return OpType_NOTIFIED_UPDATE_PROFILE, nil 
  case "REGISTER_USERID": return OpType_REGISTER_USERID, nil 
  case "ADD_CONTACT": return OpType_ADD_CONTACT, nil 
  case "NOTIFIED_ADD_CONTACT": return OpType_NOTIFIED_ADD_CONTACT, nil 
  case "BLOCK_CONTACT": return OpType_BLOCK_CONTACT, nil 
  case "UNBLOCK_CONTACT": return OpType_UNBLOCK_CONTACT, nil 
  case "NOTIFIED_RECOMMEND_CONTACT": return OpType_NOTIFIED_RECOMMEND_CONTACT, nil 
  case "CREATE_GROUP": return OpType_CREATE_GROUP, nil 
  case "UPDATE_GROUP": return OpType_UPDATE_GROUP, nil 
  case "NOTIFIED_UPDATE_GROUP": return OpType_NOTIFIED_UPDATE_GROUP, nil 
  case "INVITE_INTO_GROUP": return OpType_INVITE_INTO_GROUP, nil 
  case "NOTIFIED_INVITE_INTO_GROUP": return OpType_NOTIFIED_INVITE_INTO_GROUP, nil 
  case "CANCEL_INVITATION_GROUP": return OpType_CANCEL_INVITATION_GROUP, nil 
  case "NOTIFIED_CANCEL_INVITATION_GROUP": return OpType_NOTIFIED_CANCEL_INVITATION_GROUP, nil 
  case "LEAVE_GROUP": return OpType_LEAVE_GROUP, nil 
  case "NOTIFIED_LEAVE_GROUP": return OpType_NOTIFIED_LEAVE_GROUP, nil 
  case "ACCEPT_GROUP_INVITATION": return OpType_ACCEPT_GROUP_INVITATION, nil 
  case "NOTIFIED_ACCEPT_GROUP_INVITATION": return OpType_NOTIFIED_ACCEPT_GROUP_INVITATION, nil 
  case "REJECT_GROUP_INVITATION": return OpType_REJECT_GROUP_INVITATION, nil 
  case "NOTIFIED_REJECT_GROUP_INVITATION": return OpType_NOTIFIED_REJECT_GROUP_INVITATION, nil 
  case "KICKOUT_FROM_GROUP": return OpType_KICKOUT_FROM_GROUP, nil 
  case "NOTIFIED_KICKOUT_FROM_GROUP": return OpType_NOTIFIED_KICKOUT_FROM_GROUP, nil 
  case "CREATE_ROOM": return OpType_CREATE_ROOM, nil 
  case "INVITE_INTO_ROOM": return OpType_INVITE_INTO_ROOM, nil 
  case "NOTIFIED_INVITE_INTO_ROOM": return OpType_NOTIFIED_INVITE_INTO_ROOM, nil 
  case "LEAVE_ROOM": return OpType_LEAVE_ROOM, nil 
  case "NOTIFIED_LEAVE_ROOM": return OpType_NOTIFIED_LEAVE_ROOM, nil 
  case "SEND_MESSAGE": return OpType_SEND_MESSAGE, nil 
  case "RECEIVE_MESSAGE": return OpType_RECEIVE_MESSAGE, nil 
  case "SEND_MESSAGE_RECEIPT": return OpType_SEND_MESSAGE_RECEIPT, nil 
  case "RECEIVE_MESSAGE_RECEIPT": return OpType_RECEIVE_MESSAGE_RECEIPT, nil 
  case "SEND_CONTENT_RECEIPT": return OpType_SEND_CONTENT_RECEIPT, nil 
  case "SEND_CHAT_CHECKED": return OpType_SEND_CHAT_CHECKED, nil 
  case "SEND_CHAT_REMOVED": return OpType_SEND_CHAT_REMOVED, nil 
  case "RECEIVE_ANNOUNCEMENT": return OpType_RECEIVE_ANNOUNCEMENT, nil 
  case "INVITE_VIA_EMAIL": return OpType_INVITE_VIA_EMAIL, nil 
  case "NOTIFIED_REGISTER_USER": return OpType_NOTIFIED_REGISTER_USER, nil 
  case "NOTIFIED_UNREGISTER_USER": return OpType_NOTIFIED_UNREGISTER_USER, nil 
  case "NOTIFIED_REQUEST_RECOVERY": return OpType_NOTIFIED_REQUEST_RECOVERY, nil 
  case "NOTIFIED_FORCE_SYNC": return OpType_NOTIFIED_FORCE_SYNC, nil 
  case "SEND_CONTENT": return OpType_SEND_CONTENT, nil 
  case "SEND_MESSAGE_MYHOME": return OpType_SEND_MESSAGE_MYHOME, nil 
  case "NOTIFIED_UPDATE_CONTENT_PREVIEW": return OpType_NOTIFIED_UPDATE_CONTENT_PREVIEW, nil 
  case "REMOVE_ALL_MESSAGES": return OpType_REMOVE_ALL_MESSAGES, nil 
  case "NOTIFIED_UPDATE_PURCHASES": return OpType_NOTIFIED_UPDATE_PURCHASES, nil 
  case "DUMMY": return OpType_DUMMY, nil 
  case "UPDATE_CONTACT": return OpType_UPDATE_CONTACT, nil 
  case "NOTIFIED_RECEIVED_CALL": return OpType_NOTIFIED_RECEIVED_CALL, nil 
  case "CANCEL_CALL": return OpType_CANCEL_CALL, nil 
  case "NOTIFIED_REDIRECT": return OpType_NOTIFIED_REDIRECT, nil 
  case "NOTIFIED_CHANNEL_SYNC": return OpType_NOTIFIED_CHANNEL_SYNC, nil 
  case "FAILED_SEND_MESSAGE": return OpType_FAILED_SEND_MESSAGE, nil 
  case "NOTIFIED_READ_MESSAGE": return OpType_NOTIFIED_READ_MESSAGE, nil 
  case "FAILED_EMAIL_CONFIRMATION": return OpType_FAILED_EMAIL_CONFIRMATION, nil 
  case "NOTIFIED_PUSH_NOTICENTER_ITEM": return OpType_NOTIFIED_PUSH_NOTICENTER_ITEM, nil 
  case "NOTIFIED_CHAT_CONTENT": return OpType_NOTIFIED_CHAT_CONTENT, nil 
  case "NOTIFIED_JOIN_CHAT": return OpType_NOTIFIED_JOIN_CHAT, nil 
  case "NOTIFIED_LEAVE_CHAT": return OpType_NOTIFIED_LEAVE_CHAT, nil 
  case "NOTIFIED_TYPING": return OpType_NOTIFIED_TYPING, nil 
  case "FRIEND_REQUEST_ACCEPTED": return OpType_FRIEND_REQUEST_ACCEPTED, nil 
  case "DESTROY_MESSAGE": return OpType_DESTROY_MESSAGE, nil 
  case "NOTIFIED_DESTROY_MESSAGE": return OpType_NOTIFIED_DESTROY_MESSAGE, nil 
  case "UPDATE_PUBLICKEYCHAIN": return OpType_UPDATE_PUBLICKEYCHAIN, nil 
  case "NOTIFIED_UPDATE_PUBLICKEYCHAIN": return OpType_NOTIFIED_UPDATE_PUBLICKEYCHAIN, nil 
  case "NOTIFIED_BLOCK_CONTACT": return OpType_NOTIFIED_BLOCK_CONTACT, nil 
  case "NOTIFIED_UNBLOCK_CONTACT": return OpType_NOTIFIED_UNBLOCK_CONTACT, nil 
  case "UPDATE_GROUPPREFERENCE": return OpType_UPDATE_GROUPPREFERENCE, nil 
  case "NOTIFIED_PAYMENT_EVENT": return OpType_NOTIFIED_PAYMENT_EVENT, nil 
  case "REGISTER_E2EE_PUBLICKEY": return OpType_REGISTER_E2EE_PUBLICKEY, nil 
  case "NOTIFIED_E2EE_KEY_EXCHANGE_REQ": return OpType_NOTIFIED_E2EE_KEY_EXCHANGE_REQ, nil 
  case "NOTIFIED_E2EE_KEY_EXCHANGE_RESP": return OpType_NOTIFIED_E2EE_KEY_EXCHANGE_RESP, nil 
  case "NOTIFIED_E2EE_MESSAGE_RESEND_REQ": return OpType_NOTIFIED_E2EE_MESSAGE_RESEND_REQ, nil 
  case "NOTIFIED_E2EE_MESSAGE_RESEND_RESP": return OpType_NOTIFIED_E2EE_MESSAGE_RESEND_RESP, nil 
  case "NOTIFIED_E2EE_KEY_UPDATE": return OpType_NOTIFIED_E2EE_KEY_UPDATE, nil 
  case "NOTIFIED_BUDDY_UPDATE_PROFILE": return OpType_NOTIFIED_BUDDY_UPDATE_PROFILE, nil 
  case "NOTIFIED_UPDATE_LINEAT_TABS": return OpType_NOTIFIED_UPDATE_LINEAT_TABS, nil 
  case "UPDATE_ROOM": return OpType_UPDATE_ROOM, nil 
  case "NOTIFIED_BEACON_DETECTED": return OpType_NOTIFIED_BEACON_DETECTED, nil 
  case "UPDATE_EXTENDED_PROFILE": return OpType_UPDATE_EXTENDED_PROFILE, nil 
  case "ADD_FOLLOW": return OpType_ADD_FOLLOW, nil 
  case "NOTIFIED_ADD_FOLLOW": return OpType_NOTIFIED_ADD_FOLLOW, nil 
  case "DELETE_FOLLOW": return OpType_DELETE_FOLLOW, nil 
  case "NOTIFIED_DELETE_FOLLOW": return OpType_NOTIFIED_DELETE_FOLLOW, nil 
  case "UPDATE_TIMELINE_SETTINGS": return OpType_UPDATE_TIMELINE_SETTINGS, nil 
  case "NOTIFIED_FRIEND_REQUEST": return OpType_NOTIFIED_FRIEND_REQUEST, nil 
  case "UPDATE_RINGBACK_TONE": return OpType_UPDATE_RINGBACK_TONE, nil 
  case "NOTIFIED_POSTBACK": return OpType_NOTIFIED_POSTBACK, nil 
  case "RECEIVE_READ_WATERMARK": return OpType_RECEIVE_READ_WATERMARK, nil 
  case "NOTIFIED_MESSAGE_DELIVERED": return OpType_NOTIFIED_MESSAGE_DELIVERED, nil 
  case "NOTIFIED_UPDATE_CHAT_BAR": return OpType_NOTIFIED_UPDATE_CHAT_BAR, nil 
  case "NOTIFIED_CHATAPP_INSTALLED": return OpType_NOTIFIED_CHATAPP_INSTALLED, nil 
  case "NOTIFIED_CHATAPP_UPDATED": return OpType_NOTIFIED_CHATAPP_UPDATED, nil 
  case "NOTIFIED_CHATAPP_NEW_MARK": return OpType_NOTIFIED_CHATAPP_NEW_MARK, nil 
  case "NOTIFIED_CHATAPP_DELETED": return OpType_NOTIFIED_CHATAPP_DELETED, nil 
  case "NOTIFIED_CHATAPP_SYNC": return OpType_NOTIFIED_CHATAPP_SYNC, nil 
  case "NOTIFIED_UPDATE_MESSAGE": return OpType_NOTIFIED_UPDATE_MESSAGE, nil 
  case "UPDATE_CHATROOMBGM": return OpType_UPDATE_CHATROOMBGM, nil 
  case "NOTIFIED_UPDATE_CHATROOMBGM": return OpType_NOTIFIED_UPDATE_CHATROOMBGM, nil 
  case "UPDATE_RINGTONE": return OpType_UPDATE_RINGTONE, nil 
  case "UPDATE_USER_SETTINGS": return OpType_UPDATE_USER_SETTINGS, nil 
  case "NOTIFIED_UPDATE_STATUS_BAR": return OpType_NOTIFIED_UPDATE_STATUS_BAR, nil 
  case "CREATE_CHAT": return OpType_CREATE_CHAT, nil 
  case "UPDATE_CHAT": return OpType_UPDATE_CHAT, nil 
  case "NOTIFIED_UPDATE_CHAT": return OpType_NOTIFIED_UPDATE_CHAT, nil 
  case "INVITE_INTO_CHAT": return OpType_INVITE_INTO_CHAT, nil 
  case "NOTIFIED_INVITE_INTO_CHAT": return OpType_NOTIFIED_INVITE_INTO_CHAT, nil 
  case "CANCEL_CHAT_INVITATION": return OpType_CANCEL_CHAT_INVITATION, nil 
  case "NOTIFIED_CANCEL_CHAT_INVITATION": return OpType_NOTIFIED_CANCEL_CHAT_INVITATION, nil 
  case "DELETE_SELF_FROM_CHAT": return OpType_DELETE_SELF_FROM_CHAT, nil 
  case "NOTIFIED_DELETE_SELF_FROM_CHAT": return OpType_NOTIFIED_DELETE_SELF_FROM_CHAT, nil 
  case "ACCEPT_CHAT_INVITATION": return OpType_ACCEPT_CHAT_INVITATION, nil 
  case "NOTIFIED_ACCEPT_CHAT_INVITATION": return OpType_NOTIFIED_ACCEPT_CHAT_INVITATION, nil 
  case "REJECT_CHAT_INVITATION": return OpType_REJECT_CHAT_INVITATION, nil 
  case "DELETE_OTHER_FROM_CHAT": return OpType_DELETE_OTHER_FROM_CHAT, nil 
  case "NOTIFIED_DELETE_OTHER_FROM_CHAT": return OpType_NOTIFIED_DELETE_OTHER_FROM_CHAT, nil 
  }
  return OpType(0), fmt.Errorf("not a valid OpType string")
}


func OpTypePtr(v OpType) *OpType { return &v }

func (p OpType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *OpType) UnmarshalText(text []byte) error {
q, err := OpTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *OpType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = OpType(v)
return nil
}

func (p * OpType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type OpStatus int64
const (
  OpStatus_NORMAL OpStatus = 0
  OpStatus_ALERT_DISABLED OpStatus = 1
  OpStatus_ALWAYS OpStatus = 2
)

func (p OpStatus) String() string {
  switch p {
  case OpStatus_NORMAL: return "NORMAL"
  case OpStatus_ALERT_DISABLED: return "ALERT_DISABLED"
  case OpStatus_ALWAYS: return "ALWAYS"
  }
  return "<UNSET>"
}

func OpStatusFromString(s string) (OpStatus, error) {
  switch s {
  case "NORMAL": return OpStatus_NORMAL, nil 
  case "ALERT_DISABLED": return OpStatus_ALERT_DISABLED, nil 
  case "ALWAYS": return OpStatus_ALWAYS, nil 
  }
  return OpStatus(0), fmt.Errorf("not a valid OpStatus string")
}


func OpStatusPtr(v OpStatus) *OpStatus { return &v }

func (p OpStatus) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *OpStatus) UnmarshalText(text []byte) error {
q, err := OpStatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *OpStatus) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = OpStatus(v)
return nil
}

func (p * OpStatus) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type MIDType int64
const (
  MIDType_USER MIDType = 0
  MIDType_ROOM MIDType = 1
  MIDType_GROUP MIDType = 2
  MIDType_SQUARE MIDType = 3
  MIDType_SQUARE_CHAT MIDType = 4
  MIDType_SQUARE_MEMBER MIDType = 5
  MIDType_BOT MIDType = 6
)

func (p MIDType) String() string {
  switch p {
  case MIDType_USER: return "USER"
  case MIDType_ROOM: return "ROOM"
  case MIDType_GROUP: return "GROUP"
  case MIDType_SQUARE: return "SQUARE"
  case MIDType_SQUARE_CHAT: return "SQUARE_CHAT"
  case MIDType_SQUARE_MEMBER: return "SQUARE_MEMBER"
  case MIDType_BOT: return "BOT"
  }
  return "<UNSET>"
}

func MIDTypeFromString(s string) (MIDType, error) {
  switch s {
  case "USER": return MIDType_USER, nil 
  case "ROOM": return MIDType_ROOM, nil 
  case "GROUP": return MIDType_GROUP, nil 
  case "SQUARE": return MIDType_SQUARE, nil 
  case "SQUARE_CHAT": return MIDType_SQUARE_CHAT, nil 
  case "SQUARE_MEMBER": return MIDType_SQUARE_MEMBER, nil 
  case "BOT": return MIDType_BOT, nil 
  }
  return MIDType(0), fmt.Errorf("not a valid MIDType string")
}


func MIDTypePtr(v MIDType) *MIDType { return &v }

func (p MIDType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *MIDType) UnmarshalText(text []byte) error {
q, err := MIDTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *MIDType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = MIDType(v)
return nil
}

func (p * MIDType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type PlaceSearchProvider int64
const (
  PlaceSearchProvider_GOOGLE PlaceSearchProvider = 0
  PlaceSearchProvider_BAIDU PlaceSearchProvider = 1
  PlaceSearchProvider_FOURSQUARE PlaceSearchProvider = 2
)

func (p PlaceSearchProvider) String() string {
  switch p {
  case PlaceSearchProvider_GOOGLE: return "GOOGLE"
  case PlaceSearchProvider_BAIDU: return "BAIDU"
  case PlaceSearchProvider_FOURSQUARE: return "FOURSQUARE"
  }
  return "<UNSET>"
}

func PlaceSearchProviderFromString(s string) (PlaceSearchProvider, error) {
  switch s {
  case "GOOGLE": return PlaceSearchProvider_GOOGLE, nil 
  case "BAIDU": return PlaceSearchProvider_BAIDU, nil 
  case "FOURSQUARE": return PlaceSearchProvider_FOURSQUARE, nil 
  }
  return PlaceSearchProvider(0), fmt.Errorf("not a valid PlaceSearchProvider string")
}


func PlaceSearchProviderPtr(v PlaceSearchProvider) *PlaceSearchProvider { return &v }

func (p PlaceSearchProvider) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *PlaceSearchProvider) UnmarshalText(text []byte) error {
q, err := PlaceSearchProviderFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *PlaceSearchProvider) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = PlaceSearchProvider(v)
return nil
}

func (p * PlaceSearchProvider) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ContentType int64
const (
  ContentType_NONE ContentType = 0
  ContentType_IMAGE ContentType = 1
  ContentType_VIDEO ContentType = 2
  ContentType_AUDIO ContentType = 3
  ContentType_HTML ContentType = 4
  ContentType_PDF ContentType = 5
  ContentType_CALL ContentType = 6
  ContentType_STICKER ContentType = 7
  ContentType_PRESENCE ContentType = 8
  ContentType_GIFT ContentType = 9
  ContentType_GROUPBOARD ContentType = 10
  ContentType_APPLINK ContentType = 11
  ContentType_LINK ContentType = 12
  ContentType_CONTACT ContentType = 13
  ContentType_FILE ContentType = 14
  ContentType_LOCATION ContentType = 15
  ContentType_POSTNOTIFICATION ContentType = 16
  ContentType_RICH ContentType = 17
  ContentType_CHATEVENT ContentType = 18
  ContentType_MUSIC ContentType = 19
  ContentType_PAYMENT ContentType = 20
  ContentType_EXTIMAGE ContentType = 21
  ContentType_FLEX ContentType = 22
)

func (p ContentType) String() string {
  switch p {
  case ContentType_NONE: return "NONE"
  case ContentType_IMAGE: return "IMAGE"
  case ContentType_VIDEO: return "VIDEO"
  case ContentType_AUDIO: return "AUDIO"
  case ContentType_HTML: return "HTML"
  case ContentType_PDF: return "PDF"
  case ContentType_CALL: return "CALL"
  case ContentType_STICKER: return "STICKER"
  case ContentType_PRESENCE: return "PRESENCE"
  case ContentType_GIFT: return "GIFT"
  case ContentType_GROUPBOARD: return "GROUPBOARD"
  case ContentType_APPLINK: return "APPLINK"
  case ContentType_LINK: return "LINK"
  case ContentType_CONTACT: return "CONTACT"
  case ContentType_FILE: return "FILE"
  case ContentType_LOCATION: return "LOCATION"
  case ContentType_POSTNOTIFICATION: return "POSTNOTIFICATION"
  case ContentType_RICH: return "RICH"
  case ContentType_CHATEVENT: return "CHATEVENT"
  case ContentType_MUSIC: return "MUSIC"
  case ContentType_PAYMENT: return "PAYMENT"
  case ContentType_EXTIMAGE: return "EXTIMAGE"
  case ContentType_FLEX: return "FLEX"
  }
  return "<UNSET>"
}

func ContentTypeFromString(s string) (ContentType, error) {
  switch s {
  case "NONE": return ContentType_NONE, nil 
  case "IMAGE": return ContentType_IMAGE, nil 
  case "VIDEO": return ContentType_VIDEO, nil 
  case "AUDIO": return ContentType_AUDIO, nil 
  case "HTML": return ContentType_HTML, nil 
  case "PDF": return ContentType_PDF, nil 
  case "CALL": return ContentType_CALL, nil 
  case "STICKER": return ContentType_STICKER, nil 
  case "PRESENCE": return ContentType_PRESENCE, nil 
  case "GIFT": return ContentType_GIFT, nil 
  case "GROUPBOARD": return ContentType_GROUPBOARD, nil 
  case "APPLINK": return ContentType_APPLINK, nil 
  case "LINK": return ContentType_LINK, nil 
  case "CONTACT": return ContentType_CONTACT, nil 
  case "FILE": return ContentType_FILE, nil 
  case "LOCATION": return ContentType_LOCATION, nil 
  case "POSTNOTIFICATION": return ContentType_POSTNOTIFICATION, nil 
  case "RICH": return ContentType_RICH, nil 
  case "CHATEVENT": return ContentType_CHATEVENT, nil 
  case "MUSIC": return ContentType_MUSIC, nil 
  case "PAYMENT": return ContentType_PAYMENT, nil 
  case "EXTIMAGE": return ContentType_EXTIMAGE, nil 
  case "FLEX": return ContentType_FLEX, nil 
  }
  return ContentType(0), fmt.Errorf("not a valid ContentType string")
}


func ContentTypePtr(v ContentType) *ContentType { return &v }

func (p ContentType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ContentType) UnmarshalText(text []byte) error {
q, err := ContentTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ContentType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ContentType(v)
return nil
}

func (p * ContentType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type MessageRelationType int64
const (
  MessageRelationType_FORWARD MessageRelationType = 0
  MessageRelationType_AUTO_REPLY MessageRelationType = 1
  MessageRelationType_SUBORDINATE MessageRelationType = 2
  MessageRelationType_REPLY MessageRelationType = 3
)

func (p MessageRelationType) String() string {
  switch p {
  case MessageRelationType_FORWARD: return "FORWARD"
  case MessageRelationType_AUTO_REPLY: return "AUTO_REPLY"
  case MessageRelationType_SUBORDINATE: return "SUBORDINATE"
  case MessageRelationType_REPLY: return "REPLY"
  }
  return "<UNSET>"
}

func MessageRelationTypeFromString(s string) (MessageRelationType, error) {
  switch s {
  case "FORWARD": return MessageRelationType_FORWARD, nil 
  case "AUTO_REPLY": return MessageRelationType_AUTO_REPLY, nil 
  case "SUBORDINATE": return MessageRelationType_SUBORDINATE, nil 
  case "REPLY": return MessageRelationType_REPLY, nil 
  }
  return MessageRelationType(0), fmt.Errorf("not a valid MessageRelationType string")
}


func MessageRelationTypePtr(v MessageRelationType) *MessageRelationType { return &v }

func (p MessageRelationType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *MessageRelationType) UnmarshalText(text []byte) error {
q, err := MessageRelationTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *MessageRelationType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = MessageRelationType(v)
return nil
}

func (p * MessageRelationType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ServiceCode int64
const (
  ServiceCode_UNKNOWN ServiceCode = 0
  ServiceCode_TALK ServiceCode = 1
  ServiceCode_SQUARE ServiceCode = 2
)

func (p ServiceCode) String() string {
  switch p {
  case ServiceCode_UNKNOWN: return "UNKNOWN"
  case ServiceCode_TALK: return "TALK"
  case ServiceCode_SQUARE: return "SQUARE"
  }
  return "<UNSET>"
}

func ServiceCodeFromString(s string) (ServiceCode, error) {
  switch s {
  case "UNKNOWN": return ServiceCode_UNKNOWN, nil 
  case "TALK": return ServiceCode_TALK, nil 
  case "SQUARE": return ServiceCode_SQUARE, nil 
  }
  return ServiceCode(0), fmt.Errorf("not a valid ServiceCode string")
}


func ServiceCodePtr(v ServiceCode) *ServiceCode { return &v }

func (p ServiceCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ServiceCode) UnmarshalText(text []byte) error {
q, err := ServiceCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ServiceCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ServiceCode(v)
return nil
}

func (p * ServiceCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type AppExtensionType int64
const (
  AppExtensionType_SIRI AppExtensionType = 1
  AppExtensionType_GOOGLE_ASSISTANT AppExtensionType = 2
  AppExtensionType_OS_SHARE AppExtensionType = 3
)

func (p AppExtensionType) String() string {
  switch p {
  case AppExtensionType_SIRI: return "SIRI"
  case AppExtensionType_GOOGLE_ASSISTANT: return "GOOGLE_ASSISTANT"
  case AppExtensionType_OS_SHARE: return "OS_SHARE"
  }
  return "<UNSET>"
}

func AppExtensionTypeFromString(s string) (AppExtensionType, error) {
  switch s {
  case "SIRI": return AppExtensionType_SIRI, nil 
  case "GOOGLE_ASSISTANT": return AppExtensionType_GOOGLE_ASSISTANT, nil 
  case "OS_SHARE": return AppExtensionType_OS_SHARE, nil 
  }
  return AppExtensionType(0), fmt.Errorf("not a valid AppExtensionType string")
}


func AppExtensionTypePtr(v AppExtensionType) *AppExtensionType { return &v }

func (p AppExtensionType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *AppExtensionType) UnmarshalText(text []byte) error {
q, err := AppExtensionTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *AppExtensionType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = AppExtensionType(v)
return nil
}

func (p * AppExtensionType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ChatAttribute int64
const (
  ChatAttribute_NAME ChatAttribute = 1
  ChatAttribute_PICTURE_STATUS ChatAttribute = 2
  ChatAttribute_PREVENTED_JOIN_BY_TICKET ChatAttribute = 4
  ChatAttribute_NOTIFICATION_SETTING ChatAttribute = 8
  ChatAttribute_INVITATION_TICKET ChatAttribute = 16
  ChatAttribute_FAVORITE_TIMESTAMP ChatAttribute = 32
  ChatAttribute_CHAT_TYPE ChatAttribute = 64
)

func (p ChatAttribute) String() string {
  switch p {
  case ChatAttribute_NAME: return "NAME"
  case ChatAttribute_PICTURE_STATUS: return "PICTURE_STATUS"
  case ChatAttribute_PREVENTED_JOIN_BY_TICKET: return "PREVENTED_JOIN_BY_TICKET"
  case ChatAttribute_NOTIFICATION_SETTING: return "NOTIFICATION_SETTING"
  case ChatAttribute_INVITATION_TICKET: return "INVITATION_TICKET"
  case ChatAttribute_FAVORITE_TIMESTAMP: return "FAVORITE_TIMESTAMP"
  case ChatAttribute_CHAT_TYPE: return "CHAT_TYPE"
  }
  return "<UNSET>"
}

func ChatAttributeFromString(s string) (ChatAttribute, error) {
  switch s {
  case "NAME": return ChatAttribute_NAME, nil 
  case "PICTURE_STATUS": return ChatAttribute_PICTURE_STATUS, nil 
  case "PREVENTED_JOIN_BY_TICKET": return ChatAttribute_PREVENTED_JOIN_BY_TICKET, nil 
  case "NOTIFICATION_SETTING": return ChatAttribute_NOTIFICATION_SETTING, nil 
  case "INVITATION_TICKET": return ChatAttribute_INVITATION_TICKET, nil 
  case "FAVORITE_TIMESTAMP": return ChatAttribute_FAVORITE_TIMESTAMP, nil 
  case "CHAT_TYPE": return ChatAttribute_CHAT_TYPE, nil 
  }
  return ChatAttribute(0), fmt.Errorf("not a valid ChatAttribute string")
}


func ChatAttributePtr(v ChatAttribute) *ChatAttribute { return &v }

func (p ChatAttribute) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ChatAttribute) UnmarshalText(text []byte) error {
q, err := ChatAttributeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ChatAttribute) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ChatAttribute(v)
return nil
}

func (p * ChatAttribute) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ChatType int64
const (
  ChatType_GROUP ChatType = 0
  ChatType_ROOM ChatType = 1
  ChatType_PEER ChatType = 2
)

func (p ChatType) String() string {
  switch p {
  case ChatType_GROUP: return "GROUP"
  case ChatType_ROOM: return "ROOM"
  case ChatType_PEER: return "PEER"
  }
  return "<UNSET>"
}

func ChatTypeFromString(s string) (ChatType, error) {
  switch s {
  case "GROUP": return ChatType_GROUP, nil 
  case "ROOM": return ChatType_ROOM, nil 
  case "PEER": return ChatType_PEER, nil 
  }
  return ChatType(0), fmt.Errorf("not a valid ChatType string")
}


func ChatTypePtr(v ChatType) *ChatType { return &v }

func (p ChatType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ChatType) UnmarshalText(text []byte) error {
q, err := ChatTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ChatType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ChatType(v)
return nil
}

func (p * ChatType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type IdentityProvider int64
const (
  IdentityProvider_UNKNOWN IdentityProvider = 0
  IdentityProvider_LINE IdentityProvider = 1
  IdentityProvider_NAVER_KR IdentityProvider = 2
  IdentityProvider_LINE_PHONE IdentityProvider = 3
)

func (p IdentityProvider) String() string {
  switch p {
  case IdentityProvider_UNKNOWN: return "UNKNOWN"
  case IdentityProvider_LINE: return "LINE"
  case IdentityProvider_NAVER_KR: return "NAVER_KR"
  case IdentityProvider_LINE_PHONE: return "LINE_PHONE"
  }
  return "<UNSET>"
}

func IdentityProviderFromString(s string) (IdentityProvider, error) {
  switch s {
  case "UNKNOWN": return IdentityProvider_UNKNOWN, nil 
  case "LINE": return IdentityProvider_LINE, nil 
  case "NAVER_KR": return IdentityProvider_NAVER_KR, nil 
  case "LINE_PHONE": return IdentityProvider_LINE_PHONE, nil 
  }
  return IdentityProvider(0), fmt.Errorf("not a valid IdentityProvider string")
}


func IdentityProviderPtr(v IdentityProvider) *IdentityProvider { return &v }

func (p IdentityProvider) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *IdentityProvider) UnmarshalText(text []byte) error {
q, err := IdentityProviderFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *IdentityProvider) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = IdentityProvider(v)
return nil
}

func (p * IdentityProvider) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type CountryGroup int64
const (
  CountryGroup_UNKNOWN CountryGroup = 0
  CountryGroup_EUROPEAN_ECONOMIC_AREA CountryGroup = 1
)

func (p CountryGroup) String() string {
  switch p {
  case CountryGroup_UNKNOWN: return "UNKNOWN"
  case CountryGroup_EUROPEAN_ECONOMIC_AREA: return "EUROPEAN_ECONOMIC_AREA"
  }
  return "<UNSET>"
}

func CountryGroupFromString(s string) (CountryGroup, error) {
  switch s {
  case "UNKNOWN": return CountryGroup_UNKNOWN, nil 
  case "EUROPEAN_ECONOMIC_AREA": return CountryGroup_EUROPEAN_ECONOMIC_AREA, nil 
  }
  return CountryGroup(0), fmt.Errorf("not a valid CountryGroup string")
}


func CountryGroupPtr(v CountryGroup) *CountryGroup { return &v }

func (p CountryGroup) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *CountryGroup) UnmarshalText(text []byte) error {
q, err := CountryGroupFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *CountryGroup) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = CountryGroup(v)
return nil
}

func (p * CountryGroup) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type VerificationMethod int64
const (
  VerificationMethod_NO_AVAILABLE VerificationMethod = 0
  VerificationMethod_PIN_VIA_SMS VerificationMethod = 1
  VerificationMethod_CALLERID_INDIGO VerificationMethod = 2
  VerificationMethod_PIN_VIA_TTS VerificationMethod = 4
  VerificationMethod_SKIP VerificationMethod = 10
)

func (p VerificationMethod) String() string {
  switch p {
  case VerificationMethod_NO_AVAILABLE: return "NO_AVAILABLE"
  case VerificationMethod_PIN_VIA_SMS: return "PIN_VIA_SMS"
  case VerificationMethod_CALLERID_INDIGO: return "CALLERID_INDIGO"
  case VerificationMethod_PIN_VIA_TTS: return "PIN_VIA_TTS"
  case VerificationMethod_SKIP: return "SKIP"
  }
  return "<UNSET>"
}

func VerificationMethodFromString(s string) (VerificationMethod, error) {
  switch s {
  case "NO_AVAILABLE": return VerificationMethod_NO_AVAILABLE, nil 
  case "PIN_VIA_SMS": return VerificationMethod_PIN_VIA_SMS, nil 
  case "CALLERID_INDIGO": return VerificationMethod_CALLERID_INDIGO, nil 
  case "PIN_VIA_TTS": return VerificationMethod_PIN_VIA_TTS, nil 
  case "SKIP": return VerificationMethod_SKIP, nil 
  }
  return VerificationMethod(0), fmt.Errorf("not a valid VerificationMethod string")
}


func VerificationMethodPtr(v VerificationMethod) *VerificationMethod { return &v }

func (p VerificationMethod) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *VerificationMethod) UnmarshalText(text []byte) error {
q, err := VerificationMethodFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *VerificationMethod) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = VerificationMethod(v)
return nil
}

func (p * VerificationMethod) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type CarrierCode int64
const (
  CarrierCode_NOT_SPECIFIED CarrierCode = 0
  CarrierCode_JP_DOCOMO CarrierCode = 1
  CarrierCode_JP_AU CarrierCode = 2
  CarrierCode_JP_SOFTBANK CarrierCode = 3
  CarrierCode_KR_SKT CarrierCode = 17
  CarrierCode_KR_KT CarrierCode = 18
  CarrierCode_KR_LGT CarrierCode = 19
  CarrierCode_JP_DOCOMO_LINE CarrierCode = 4
  CarrierCode_JP_SOFTBANK_LINE CarrierCode = 5
  CarrierCode_JP_AU_LINE CarrierCode = 6
)

func (p CarrierCode) String() string {
  switch p {
  case CarrierCode_NOT_SPECIFIED: return "NOT_SPECIFIED"
  case CarrierCode_JP_DOCOMO: return "JP_DOCOMO"
  case CarrierCode_JP_AU: return "JP_AU"
  case CarrierCode_JP_SOFTBANK: return "JP_SOFTBANK"
  case CarrierCode_KR_SKT: return "KR_SKT"
  case CarrierCode_KR_KT: return "KR_KT"
  case CarrierCode_KR_LGT: return "KR_LGT"
  case CarrierCode_JP_DOCOMO_LINE: return "JP_DOCOMO_LINE"
  case CarrierCode_JP_SOFTBANK_LINE: return "JP_SOFTBANK_LINE"
  case CarrierCode_JP_AU_LINE: return "JP_AU_LINE"
  }
  return "<UNSET>"
}

func CarrierCodeFromString(s string) (CarrierCode, error) {
  switch s {
  case "NOT_SPECIFIED": return CarrierCode_NOT_SPECIFIED, nil 
  case "JP_DOCOMO": return CarrierCode_JP_DOCOMO, nil 
  case "JP_AU": return CarrierCode_JP_AU, nil 
  case "JP_SOFTBANK": return CarrierCode_JP_SOFTBANK, nil 
  case "KR_SKT": return CarrierCode_KR_SKT, nil 
  case "KR_KT": return CarrierCode_KR_KT, nil 
  case "KR_LGT": return CarrierCode_KR_LGT, nil 
  case "JP_DOCOMO_LINE": return CarrierCode_JP_DOCOMO_LINE, nil 
  case "JP_SOFTBANK_LINE": return CarrierCode_JP_SOFTBANK_LINE, nil 
  case "JP_AU_LINE": return CarrierCode_JP_AU_LINE, nil 
  }
  return CarrierCode(0), fmt.Errorf("not a valid CarrierCode string")
}


func CarrierCodePtr(v CarrierCode) *CarrierCode { return &v }

func (p CarrierCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *CarrierCode) UnmarshalText(text []byte) error {
q, err := CarrierCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *CarrierCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = CarrierCode(v)
return nil
}

func (p * CarrierCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ApplicationType int64
const (
  ApplicationType_IOS ApplicationType = 16
  ApplicationType_IOS_RC ApplicationType = 17
  ApplicationType_IOS_BETA ApplicationType = 18
  ApplicationType_IOS_ALPHA ApplicationType = 19
  ApplicationType_ANDROID ApplicationType = 32
  ApplicationType_ANDROID_RC ApplicationType = 33
  ApplicationType_ANDROID_BETA ApplicationType = 34
  ApplicationType_ANDROID_ALPHA ApplicationType = 35
  ApplicationType_WAP ApplicationType = 48
  ApplicationType_WAP_RC ApplicationType = 49
  ApplicationType_WAP_BETA ApplicationType = 50
  ApplicationType_WAP_ALPHA ApplicationType = 51
  ApplicationType_BOT ApplicationType = 64
  ApplicationType_BOT_RC ApplicationType = 65
  ApplicationType_BOT_BETA ApplicationType = 66
  ApplicationType_BOT_ALPHA ApplicationType = 67
  ApplicationType_WEB ApplicationType = 80
  ApplicationType_WEB_RC ApplicationType = 81
  ApplicationType_WEB_BETA ApplicationType = 82
  ApplicationType_WEB_ALPHA ApplicationType = 83
  ApplicationType_DESKTOPWIN ApplicationType = 96
  ApplicationType_DESKTOPWIN_RC ApplicationType = 97
  ApplicationType_DESKTOPWIN_BETA ApplicationType = 98
  ApplicationType_DESKTOPWIN_ALPHA ApplicationType = 99
  ApplicationType_DESKTOPMAC ApplicationType = 112
  ApplicationType_DESKTOPMAC_RC ApplicationType = 113
  ApplicationType_DESKTOPMAC_BETA ApplicationType = 114
  ApplicationType_DESKTOPMAC_ALPHA ApplicationType = 115
  ApplicationType_CHANNELGW ApplicationType = 128
  ApplicationType_CHANNELGW_RC ApplicationType = 129
  ApplicationType_CHANNELGW_BETA ApplicationType = 130
  ApplicationType_CHANNELGW_ALPHA ApplicationType = 131
  ApplicationType_CHANNELCP ApplicationType = 144
  ApplicationType_CHANNELCP_RC ApplicationType = 145
  ApplicationType_CHANNELCP_BETA ApplicationType = 146
  ApplicationType_CHANNELCP_ALPHA ApplicationType = 147
  ApplicationType_WINPHONE ApplicationType = 160
  ApplicationType_WINPHONE_RC ApplicationType = 161
  ApplicationType_WINPHONE_BETA ApplicationType = 162
  ApplicationType_WINPHONE_ALPHA ApplicationType = 163
  ApplicationType_BLACKBERRY ApplicationType = 176
  ApplicationType_BLACKBERRY_RC ApplicationType = 177
  ApplicationType_BLACKBERRY_BETA ApplicationType = 178
  ApplicationType_BLACKBERRY_ALPHA ApplicationType = 179
  ApplicationType_WINMETRO ApplicationType = 192
  ApplicationType_WINMETRO_RC ApplicationType = 193
  ApplicationType_WINMETRO_BETA ApplicationType = 194
  ApplicationType_WINMETRO_ALPHA ApplicationType = 195
  ApplicationType_S40 ApplicationType = 208
  ApplicationType_S40_RC ApplicationType = 209
  ApplicationType_S40_BETA ApplicationType = 210
  ApplicationType_S40_ALPHA ApplicationType = 211
  ApplicationType_CHRONO ApplicationType = 224
  ApplicationType_CHRONO_RC ApplicationType = 225
  ApplicationType_CHRONO_BETA ApplicationType = 226
  ApplicationType_CHRONO_ALPHA ApplicationType = 227
  ApplicationType_TIZEN ApplicationType = 256
  ApplicationType_TIZEN_RC ApplicationType = 257
  ApplicationType_TIZEN_BETA ApplicationType = 258
  ApplicationType_TIZEN_ALPHA ApplicationType = 259
  ApplicationType_VIRTUAL ApplicationType = 272
  ApplicationType_FIREFOXOS ApplicationType = 288
  ApplicationType_FIREFOXOS_RC ApplicationType = 289
  ApplicationType_FIREFOXOS_BETA ApplicationType = 290
  ApplicationType_FIREFOXOS_ALPHA ApplicationType = 291
  ApplicationType_IOSIPAD ApplicationType = 304
  ApplicationType_IOSIPAD_RC ApplicationType = 305
  ApplicationType_IOSIPAD_BETA ApplicationType = 306
  ApplicationType_IOSIPAD_ALPHA ApplicationType = 307
  ApplicationType_BIZIOS ApplicationType = 320
  ApplicationType_BIZIOS_RC ApplicationType = 321
  ApplicationType_BIZIOS_BETA ApplicationType = 322
  ApplicationType_BIZIOS_ALPHA ApplicationType = 323
  ApplicationType_BIZANDROID ApplicationType = 336
  ApplicationType_BIZANDROID_RC ApplicationType = 337
  ApplicationType_BIZANDROID_BETA ApplicationType = 338
  ApplicationType_BIZANDROID_ALPHA ApplicationType = 339
  ApplicationType_BIZBOT ApplicationType = 352
  ApplicationType_BIZBOT_RC ApplicationType = 353
  ApplicationType_BIZBOT_BETA ApplicationType = 354
  ApplicationType_BIZBOT_ALPHA ApplicationType = 355
  ApplicationType_CHROMEOS ApplicationType = 368
  ApplicationType_CHROMEOS_RC ApplicationType = 369
  ApplicationType_CHROMEOS_BETA ApplicationType = 370
  ApplicationType_CHROMEOS_ALPHA ApplicationType = 371
  ApplicationType_ANDROIDLITE ApplicationType = 384
  ApplicationType_ANDROIDLITE_RC ApplicationType = 385
  ApplicationType_ANDROIDLITE_BETA ApplicationType = 386
  ApplicationType_ANDROIDLITE_ALPHA ApplicationType = 387
  ApplicationType_WIN10 ApplicationType = 400
  ApplicationType_WIN10_RC ApplicationType = 401
  ApplicationType_WIN10_BETA ApplicationType = 402
  ApplicationType_WIN10_ALPHA ApplicationType = 403
  ApplicationType_BIZWEB ApplicationType = 416
  ApplicationType_BIZWEB_RC ApplicationType = 417
  ApplicationType_BIZWEB_BETA ApplicationType = 418
  ApplicationType_BIZWEB_ALPHA ApplicationType = 419
  ApplicationType_DUMMYPRIMARY ApplicationType = 432
  ApplicationType_DUMMYPRIMARY_RC ApplicationType = 433
  ApplicationType_DUMMYPRIMARY_BETA ApplicationType = 434
  ApplicationType_DUMMYPRIMARY_ALPHA ApplicationType = 435
  ApplicationType_SQUARE ApplicationType = 448
  ApplicationType_SQUARE_RC ApplicationType = 449
  ApplicationType_SQUARE_BETA ApplicationType = 450
  ApplicationType_SQUARE_ALPHA ApplicationType = 451
  ApplicationType_INTERNAL ApplicationType = 464
  ApplicationType_INTERNAL_RC ApplicationType = 465
  ApplicationType_INTERNAL_BETA ApplicationType = 466
  ApplicationType_INTERNAL_ALPHA ApplicationType = 467
  ApplicationType_CLOVAFRIENDS ApplicationType = 480
  ApplicationType_CLOVAFRIENDS_RC ApplicationType = 481
  ApplicationType_CLOVAFRIENDS_BETA ApplicationType = 482
  ApplicationType_CLOVAFRIENDS_ALPHA ApplicationType = 483
  ApplicationType_WATCHOS ApplicationType = 496
  ApplicationType_WATCHOS_RC ApplicationType = 497
  ApplicationType_WATCHOS_BETA ApplicationType = 498
  ApplicationType_WATCHOS_ALPHA ApplicationType = 499
)

func (p ApplicationType) String() string {
  switch p {
  case ApplicationType_IOS: return "IOS"
  case ApplicationType_IOS_RC: return "IOS_RC"
  case ApplicationType_IOS_BETA: return "IOS_BETA"
  case ApplicationType_IOS_ALPHA: return "IOS_ALPHA"
  case ApplicationType_ANDROID: return "ANDROID"
  case ApplicationType_ANDROID_RC: return "ANDROID_RC"
  case ApplicationType_ANDROID_BETA: return "ANDROID_BETA"
  case ApplicationType_ANDROID_ALPHA: return "ANDROID_ALPHA"
  case ApplicationType_WAP: return "WAP"
  case ApplicationType_WAP_RC: return "WAP_RC"
  case ApplicationType_WAP_BETA: return "WAP_BETA"
  case ApplicationType_WAP_ALPHA: return "WAP_ALPHA"
  case ApplicationType_BOT: return "BOT"
  case ApplicationType_BOT_RC: return "BOT_RC"
  case ApplicationType_BOT_BETA: return "BOT_BETA"
  case ApplicationType_BOT_ALPHA: return "BOT_ALPHA"
  case ApplicationType_WEB: return "WEB"
  case ApplicationType_WEB_RC: return "WEB_RC"
  case ApplicationType_WEB_BETA: return "WEB_BETA"
  case ApplicationType_WEB_ALPHA: return "WEB_ALPHA"
  case ApplicationType_DESKTOPWIN: return "DESKTOPWIN"
  case ApplicationType_DESKTOPWIN_RC: return "DESKTOPWIN_RC"
  case ApplicationType_DESKTOPWIN_BETA: return "DESKTOPWIN_BETA"
  case ApplicationType_DESKTOPWIN_ALPHA: return "DESKTOPWIN_ALPHA"
  case ApplicationType_DESKTOPMAC: return "DESKTOPMAC"
  case ApplicationType_DESKTOPMAC_RC: return "DESKTOPMAC_RC"
  case ApplicationType_DESKTOPMAC_BETA: return "DESKTOPMAC_BETA"
  case ApplicationType_DESKTOPMAC_ALPHA: return "DESKTOPMAC_ALPHA"
  case ApplicationType_CHANNELGW: return "CHANNELGW"
  case ApplicationType_CHANNELGW_RC: return "CHANNELGW_RC"
  case ApplicationType_CHANNELGW_BETA: return "CHANNELGW_BETA"
  case ApplicationType_CHANNELGW_ALPHA: return "CHANNELGW_ALPHA"
  case ApplicationType_CHANNELCP: return "CHANNELCP"
  case ApplicationType_CHANNELCP_RC: return "CHANNELCP_RC"
  case ApplicationType_CHANNELCP_BETA: return "CHANNELCP_BETA"
  case ApplicationType_CHANNELCP_ALPHA: return "CHANNELCP_ALPHA"
  case ApplicationType_WINPHONE: return "WINPHONE"
  case ApplicationType_WINPHONE_RC: return "WINPHONE_RC"
  case ApplicationType_WINPHONE_BETA: return "WINPHONE_BETA"
  case ApplicationType_WINPHONE_ALPHA: return "WINPHONE_ALPHA"
  case ApplicationType_BLACKBERRY: return "BLACKBERRY"
  case ApplicationType_BLACKBERRY_RC: return "BLACKBERRY_RC"
  case ApplicationType_BLACKBERRY_BETA: return "BLACKBERRY_BETA"
  case ApplicationType_BLACKBERRY_ALPHA: return "BLACKBERRY_ALPHA"
  case ApplicationType_WINMETRO: return "WINMETRO"
  case ApplicationType_WINMETRO_RC: return "WINMETRO_RC"
  case ApplicationType_WINMETRO_BETA: return "WINMETRO_BETA"
  case ApplicationType_WINMETRO_ALPHA: return "WINMETRO_ALPHA"
  case ApplicationType_S40: return "S40"
  case ApplicationType_S40_RC: return "S40_RC"
  case ApplicationType_S40_BETA: return "S40_BETA"
  case ApplicationType_S40_ALPHA: return "S40_ALPHA"
  case ApplicationType_CHRONO: return "CHRONO"
  case ApplicationType_CHRONO_RC: return "CHRONO_RC"
  case ApplicationType_CHRONO_BETA: return "CHRONO_BETA"
  case ApplicationType_CHRONO_ALPHA: return "CHRONO_ALPHA"
  case ApplicationType_TIZEN: return "TIZEN"
  case ApplicationType_TIZEN_RC: return "TIZEN_RC"
  case ApplicationType_TIZEN_BETA: return "TIZEN_BETA"
  case ApplicationType_TIZEN_ALPHA: return "TIZEN_ALPHA"
  case ApplicationType_VIRTUAL: return "VIRTUAL"
  case ApplicationType_FIREFOXOS: return "FIREFOXOS"
  case ApplicationType_FIREFOXOS_RC: return "FIREFOXOS_RC"
  case ApplicationType_FIREFOXOS_BETA: return "FIREFOXOS_BETA"
  case ApplicationType_FIREFOXOS_ALPHA: return "FIREFOXOS_ALPHA"
  case ApplicationType_IOSIPAD: return "IOSIPAD"
  case ApplicationType_IOSIPAD_RC: return "IOSIPAD_RC"
  case ApplicationType_IOSIPAD_BETA: return "IOSIPAD_BETA"
  case ApplicationType_IOSIPAD_ALPHA: return "IOSIPAD_ALPHA"
  case ApplicationType_BIZIOS: return "BIZIOS"
  case ApplicationType_BIZIOS_RC: return "BIZIOS_RC"
  case ApplicationType_BIZIOS_BETA: return "BIZIOS_BETA"
  case ApplicationType_BIZIOS_ALPHA: return "BIZIOS_ALPHA"
  case ApplicationType_BIZANDROID: return "BIZANDROID"
  case ApplicationType_BIZANDROID_RC: return "BIZANDROID_RC"
  case ApplicationType_BIZANDROID_BETA: return "BIZANDROID_BETA"
  case ApplicationType_BIZANDROID_ALPHA: return "BIZANDROID_ALPHA"
  case ApplicationType_BIZBOT: return "BIZBOT"
  case ApplicationType_BIZBOT_RC: return "BIZBOT_RC"
  case ApplicationType_BIZBOT_BETA: return "BIZBOT_BETA"
  case ApplicationType_BIZBOT_ALPHA: return "BIZBOT_ALPHA"
  case ApplicationType_CHROMEOS: return "CHROMEOS"
  case ApplicationType_CHROMEOS_RC: return "CHROMEOS_RC"
  case ApplicationType_CHROMEOS_BETA: return "CHROMEOS_BETA"
  case ApplicationType_CHROMEOS_ALPHA: return "CHROMEOS_ALPHA"
  case ApplicationType_ANDROIDLITE: return "ANDROIDLITE"
  case ApplicationType_ANDROIDLITE_RC: return "ANDROIDLITE_RC"
  case ApplicationType_ANDROIDLITE_BETA: return "ANDROIDLITE_BETA"
  case ApplicationType_ANDROIDLITE_ALPHA: return "ANDROIDLITE_ALPHA"
  case ApplicationType_WIN10: return "WIN10"
  case ApplicationType_WIN10_RC: return "WIN10_RC"
  case ApplicationType_WIN10_BETA: return "WIN10_BETA"
  case ApplicationType_WIN10_ALPHA: return "WIN10_ALPHA"
  case ApplicationType_BIZWEB: return "BIZWEB"
  case ApplicationType_BIZWEB_RC: return "BIZWEB_RC"
  case ApplicationType_BIZWEB_BETA: return "BIZWEB_BETA"
  case ApplicationType_BIZWEB_ALPHA: return "BIZWEB_ALPHA"
  case ApplicationType_DUMMYPRIMARY: return "DUMMYPRIMARY"
  case ApplicationType_DUMMYPRIMARY_RC: return "DUMMYPRIMARY_RC"
  case ApplicationType_DUMMYPRIMARY_BETA: return "DUMMYPRIMARY_BETA"
  case ApplicationType_DUMMYPRIMARY_ALPHA: return "DUMMYPRIMARY_ALPHA"
  case ApplicationType_SQUARE: return "SQUARE"
  case ApplicationType_SQUARE_RC: return "SQUARE_RC"
  case ApplicationType_SQUARE_BETA: return "SQUARE_BETA"
  case ApplicationType_SQUARE_ALPHA: return "SQUARE_ALPHA"
  case ApplicationType_INTERNAL: return "INTERNAL"
  case ApplicationType_INTERNAL_RC: return "INTERNAL_RC"
  case ApplicationType_INTERNAL_BETA: return "INTERNAL_BETA"
  case ApplicationType_INTERNAL_ALPHA: return "INTERNAL_ALPHA"
  case ApplicationType_CLOVAFRIENDS: return "CLOVAFRIENDS"
  case ApplicationType_CLOVAFRIENDS_RC: return "CLOVAFRIENDS_RC"
  case ApplicationType_CLOVAFRIENDS_BETA: return "CLOVAFRIENDS_BETA"
  case ApplicationType_CLOVAFRIENDS_ALPHA: return "CLOVAFRIENDS_ALPHA"
  case ApplicationType_WATCHOS: return "WATCHOS"
  case ApplicationType_WATCHOS_RC: return "WATCHOS_RC"
  case ApplicationType_WATCHOS_BETA: return "WATCHOS_BETA"
  case ApplicationType_WATCHOS_ALPHA: return "WATCHOS_ALPHA"
  }
  return "<UNSET>"
}

func ApplicationTypeFromString(s string) (ApplicationType, error) {
  switch s {
  case "IOS": return ApplicationType_IOS, nil 
  case "IOS_RC": return ApplicationType_IOS_RC, nil 
  case "IOS_BETA": return ApplicationType_IOS_BETA, nil 
  case "IOS_ALPHA": return ApplicationType_IOS_ALPHA, nil 
  case "ANDROID": return ApplicationType_ANDROID, nil 
  case "ANDROID_RC": return ApplicationType_ANDROID_RC, nil 
  case "ANDROID_BETA": return ApplicationType_ANDROID_BETA, nil 
  case "ANDROID_ALPHA": return ApplicationType_ANDROID_ALPHA, nil 
  case "WAP": return ApplicationType_WAP, nil 
  case "WAP_RC": return ApplicationType_WAP_RC, nil 
  case "WAP_BETA": return ApplicationType_WAP_BETA, nil 
  case "WAP_ALPHA": return ApplicationType_WAP_ALPHA, nil 
  case "BOT": return ApplicationType_BOT, nil 
  case "BOT_RC": return ApplicationType_BOT_RC, nil 
  case "BOT_BETA": return ApplicationType_BOT_BETA, nil 
  case "BOT_ALPHA": return ApplicationType_BOT_ALPHA, nil 
  case "WEB": return ApplicationType_WEB, nil 
  case "WEB_RC": return ApplicationType_WEB_RC, nil 
  case "WEB_BETA": return ApplicationType_WEB_BETA, nil 
  case "WEB_ALPHA": return ApplicationType_WEB_ALPHA, nil 
  case "DESKTOPWIN": return ApplicationType_DESKTOPWIN, nil 
  case "DESKTOPWIN_RC": return ApplicationType_DESKTOPWIN_RC, nil 
  case "DESKTOPWIN_BETA": return ApplicationType_DESKTOPWIN_BETA, nil 
  case "DESKTOPWIN_ALPHA": return ApplicationType_DESKTOPWIN_ALPHA, nil 
  case "DESKTOPMAC": return ApplicationType_DESKTOPMAC, nil 
  case "DESKTOPMAC_RC": return ApplicationType_DESKTOPMAC_RC, nil 
  case "DESKTOPMAC_BETA": return ApplicationType_DESKTOPMAC_BETA, nil 
  case "DESKTOPMAC_ALPHA": return ApplicationType_DESKTOPMAC_ALPHA, nil 
  case "CHANNELGW": return ApplicationType_CHANNELGW, nil 
  case "CHANNELGW_RC": return ApplicationType_CHANNELGW_RC, nil 
  case "CHANNELGW_BETA": return ApplicationType_CHANNELGW_BETA, nil 
  case "CHANNELGW_ALPHA": return ApplicationType_CHANNELGW_ALPHA, nil 
  case "CHANNELCP": return ApplicationType_CHANNELCP, nil 
  case "CHANNELCP_RC": return ApplicationType_CHANNELCP_RC, nil 
  case "CHANNELCP_BETA": return ApplicationType_CHANNELCP_BETA, nil 
  case "CHANNELCP_ALPHA": return ApplicationType_CHANNELCP_ALPHA, nil 
  case "WINPHONE": return ApplicationType_WINPHONE, nil 
  case "WINPHONE_RC": return ApplicationType_WINPHONE_RC, nil 
  case "WINPHONE_BETA": return ApplicationType_WINPHONE_BETA, nil 
  case "WINPHONE_ALPHA": return ApplicationType_WINPHONE_ALPHA, nil 
  case "BLACKBERRY": return ApplicationType_BLACKBERRY, nil 
  case "BLACKBERRY_RC": return ApplicationType_BLACKBERRY_RC, nil 
  case "BLACKBERRY_BETA": return ApplicationType_BLACKBERRY_BETA, nil 
  case "BLACKBERRY_ALPHA": return ApplicationType_BLACKBERRY_ALPHA, nil 
  case "WINMETRO": return ApplicationType_WINMETRO, nil 
  case "WINMETRO_RC": return ApplicationType_WINMETRO_RC, nil 
  case "WINMETRO_BETA": return ApplicationType_WINMETRO_BETA, nil 
  case "WINMETRO_ALPHA": return ApplicationType_WINMETRO_ALPHA, nil 
  case "S40": return ApplicationType_S40, nil 
  case "S40_RC": return ApplicationType_S40_RC, nil 
  case "S40_BETA": return ApplicationType_S40_BETA, nil 
  case "S40_ALPHA": return ApplicationType_S40_ALPHA, nil 
  case "CHRONO": return ApplicationType_CHRONO, nil 
  case "CHRONO_RC": return ApplicationType_CHRONO_RC, nil 
  case "CHRONO_BETA": return ApplicationType_CHRONO_BETA, nil 
  case "CHRONO_ALPHA": return ApplicationType_CHRONO_ALPHA, nil 
  case "TIZEN": return ApplicationType_TIZEN, nil 
  case "TIZEN_RC": return ApplicationType_TIZEN_RC, nil 
  case "TIZEN_BETA": return ApplicationType_TIZEN_BETA, nil 
  case "TIZEN_ALPHA": return ApplicationType_TIZEN_ALPHA, nil 
  case "VIRTUAL": return ApplicationType_VIRTUAL, nil 
  case "FIREFOXOS": return ApplicationType_FIREFOXOS, nil 
  case "FIREFOXOS_RC": return ApplicationType_FIREFOXOS_RC, nil 
  case "FIREFOXOS_BETA": return ApplicationType_FIREFOXOS_BETA, nil 
  case "FIREFOXOS_ALPHA": return ApplicationType_FIREFOXOS_ALPHA, nil 
  case "IOSIPAD": return ApplicationType_IOSIPAD, nil 
  case "IOSIPAD_RC": return ApplicationType_IOSIPAD_RC, nil 
  case "IOSIPAD_BETA": return ApplicationType_IOSIPAD_BETA, nil 
  case "IOSIPAD_ALPHA": return ApplicationType_IOSIPAD_ALPHA, nil 
  case "BIZIOS": return ApplicationType_BIZIOS, nil 
  case "BIZIOS_RC": return ApplicationType_BIZIOS_RC, nil 
  case "BIZIOS_BETA": return ApplicationType_BIZIOS_BETA, nil 
  case "BIZIOS_ALPHA": return ApplicationType_BIZIOS_ALPHA, nil 
  case "BIZANDROID": return ApplicationType_BIZANDROID, nil 
  case "BIZANDROID_RC": return ApplicationType_BIZANDROID_RC, nil 
  case "BIZANDROID_BETA": return ApplicationType_BIZANDROID_BETA, nil 
  case "BIZANDROID_ALPHA": return ApplicationType_BIZANDROID_ALPHA, nil 
  case "BIZBOT": return ApplicationType_BIZBOT, nil 
  case "BIZBOT_RC": return ApplicationType_BIZBOT_RC, nil 
  case "BIZBOT_BETA": return ApplicationType_BIZBOT_BETA, nil 
  case "BIZBOT_ALPHA": return ApplicationType_BIZBOT_ALPHA, nil 
  case "CHROMEOS": return ApplicationType_CHROMEOS, nil 
  case "CHROMEOS_RC": return ApplicationType_CHROMEOS_RC, nil 
  case "CHROMEOS_BETA": return ApplicationType_CHROMEOS_BETA, nil 
  case "CHROMEOS_ALPHA": return ApplicationType_CHROMEOS_ALPHA, nil 
  case "ANDROIDLITE": return ApplicationType_ANDROIDLITE, nil 
  case "ANDROIDLITE_RC": return ApplicationType_ANDROIDLITE_RC, nil 
  case "ANDROIDLITE_BETA": return ApplicationType_ANDROIDLITE_BETA, nil 
  case "ANDROIDLITE_ALPHA": return ApplicationType_ANDROIDLITE_ALPHA, nil 
  case "WIN10": return ApplicationType_WIN10, nil 
  case "WIN10_RC": return ApplicationType_WIN10_RC, nil 
  case "WIN10_BETA": return ApplicationType_WIN10_BETA, nil 
  case "WIN10_ALPHA": return ApplicationType_WIN10_ALPHA, nil 
  case "BIZWEB": return ApplicationType_BIZWEB, nil 
  case "BIZWEB_RC": return ApplicationType_BIZWEB_RC, nil 
  case "BIZWEB_BETA": return ApplicationType_BIZWEB_BETA, nil 
  case "BIZWEB_ALPHA": return ApplicationType_BIZWEB_ALPHA, nil 
  case "DUMMYPRIMARY": return ApplicationType_DUMMYPRIMARY, nil 
  case "DUMMYPRIMARY_RC": return ApplicationType_DUMMYPRIMARY_RC, nil 
  case "DUMMYPRIMARY_BETA": return ApplicationType_DUMMYPRIMARY_BETA, nil 
  case "DUMMYPRIMARY_ALPHA": return ApplicationType_DUMMYPRIMARY_ALPHA, nil 
  case "SQUARE": return ApplicationType_SQUARE, nil 
  case "SQUARE_RC": return ApplicationType_SQUARE_RC, nil 
  case "SQUARE_BETA": return ApplicationType_SQUARE_BETA, nil 
  case "SQUARE_ALPHA": return ApplicationType_SQUARE_ALPHA, nil 
  case "INTERNAL": return ApplicationType_INTERNAL, nil 
  case "INTERNAL_RC": return ApplicationType_INTERNAL_RC, nil 
  case "INTERNAL_BETA": return ApplicationType_INTERNAL_BETA, nil 
  case "INTERNAL_ALPHA": return ApplicationType_INTERNAL_ALPHA, nil 
  case "CLOVAFRIENDS": return ApplicationType_CLOVAFRIENDS, nil 
  case "CLOVAFRIENDS_RC": return ApplicationType_CLOVAFRIENDS_RC, nil 
  case "CLOVAFRIENDS_BETA": return ApplicationType_CLOVAFRIENDS_BETA, nil 
  case "CLOVAFRIENDS_ALPHA": return ApplicationType_CLOVAFRIENDS_ALPHA, nil 
  case "WATCHOS": return ApplicationType_WATCHOS, nil 
  case "WATCHOS_RC": return ApplicationType_WATCHOS_RC, nil 
  case "WATCHOS_BETA": return ApplicationType_WATCHOS_BETA, nil 
  case "WATCHOS_ALPHA": return ApplicationType_WATCHOS_ALPHA, nil 
  }
  return ApplicationType(0), fmt.Errorf("not a valid ApplicationType string")
}


func ApplicationTypePtr(v ApplicationType) *ApplicationType { return &v }

func (p ApplicationType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ApplicationType) UnmarshalText(text []byte) error {
q, err := ApplicationTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ApplicationType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ApplicationType(v)
return nil
}

func (p * ApplicationType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type VerificationResult_ int64
const (
  VerificationResult__FAILED VerificationResult_ = 0
  VerificationResult__OK_NOT_REGISTERED_YET VerificationResult_ = 1
  VerificationResult__OK_REGISTERED_WITH_SAME_DEVICE VerificationResult_ = 2
  VerificationResult__OK_REGISTERED_WITH_ANOTHER_DEVICE VerificationResult_ = 3
)

func (p VerificationResult_) String() string {
  switch p {
  case VerificationResult__FAILED: return "FAILED"
  case VerificationResult__OK_NOT_REGISTERED_YET: return "OK_NOT_REGISTERED_YET"
  case VerificationResult__OK_REGISTERED_WITH_SAME_DEVICE: return "OK_REGISTERED_WITH_SAME_DEVICE"
  case VerificationResult__OK_REGISTERED_WITH_ANOTHER_DEVICE: return "OK_REGISTERED_WITH_ANOTHER_DEVICE"
  }
  return "<UNSET>"
}

func VerificationResult_FromString(s string) (VerificationResult_, error) {
  switch s {
  case "FAILED": return VerificationResult__FAILED, nil 
  case "OK_NOT_REGISTERED_YET": return VerificationResult__OK_NOT_REGISTERED_YET, nil 
  case "OK_REGISTERED_WITH_SAME_DEVICE": return VerificationResult__OK_REGISTERED_WITH_SAME_DEVICE, nil 
  case "OK_REGISTERED_WITH_ANOTHER_DEVICE": return VerificationResult__OK_REGISTERED_WITH_ANOTHER_DEVICE, nil 
  }
  return VerificationResult_(0), fmt.Errorf("not a valid VerificationResult_ string")
}


func VerificationResult_Ptr(v VerificationResult_) *VerificationResult_ { return &v }

func (p VerificationResult_) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *VerificationResult_) UnmarshalText(text []byte) error {
q, err := VerificationResult_FromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *VerificationResult_) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = VerificationResult_(v)
return nil
}

func (p * VerificationResult_) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type AccountMigrationCheckType int64
const (
  AccountMigrationCheckType_SKIP AccountMigrationCheckType = 0
  AccountMigrationCheckType_PINCODE AccountMigrationCheckType = 1
  AccountMigrationCheckType_SECURITY_CENTER AccountMigrationCheckType = 2
)

func (p AccountMigrationCheckType) String() string {
  switch p {
  case AccountMigrationCheckType_SKIP: return "SKIP"
  case AccountMigrationCheckType_PINCODE: return "PINCODE"
  case AccountMigrationCheckType_SECURITY_CENTER: return "SECURITY_CENTER"
  }
  return "<UNSET>"
}

func AccountMigrationCheckTypeFromString(s string) (AccountMigrationCheckType, error) {
  switch s {
  case "SKIP": return AccountMigrationCheckType_SKIP, nil 
  case "PINCODE": return AccountMigrationCheckType_PINCODE, nil 
  case "SECURITY_CENTER": return AccountMigrationCheckType_SECURITY_CENTER, nil 
  }
  return AccountMigrationCheckType(0), fmt.Errorf("not a valid AccountMigrationCheckType string")
}


func AccountMigrationCheckTypePtr(v AccountMigrationCheckType) *AccountMigrationCheckType { return &v }

func (p AccountMigrationCheckType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *AccountMigrationCheckType) UnmarshalText(text []byte) error {
q, err := AccountMigrationCheckTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *AccountMigrationCheckType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = AccountMigrationCheckType(v)
return nil
}

func (p * AccountMigrationCheckType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ProfileHistoryPrivacyType int64
const (
  ProfileHistoryPrivacyType_OWNER ProfileHistoryPrivacyType = 0
  ProfileHistoryPrivacyType_FRIEND ProfileHistoryPrivacyType = 1
)

func (p ProfileHistoryPrivacyType) String() string {
  switch p {
  case ProfileHistoryPrivacyType_OWNER: return "OWNER"
  case ProfileHistoryPrivacyType_FRIEND: return "FRIEND"
  }
  return "<UNSET>"
}

func ProfileHistoryPrivacyTypeFromString(s string) (ProfileHistoryPrivacyType, error) {
  switch s {
  case "OWNER": return ProfileHistoryPrivacyType_OWNER, nil 
  case "FRIEND": return ProfileHistoryPrivacyType_FRIEND, nil 
  }
  return ProfileHistoryPrivacyType(0), fmt.Errorf("not a valid ProfileHistoryPrivacyType string")
}


func ProfileHistoryPrivacyTypePtr(v ProfileHistoryPrivacyType) *ProfileHistoryPrivacyType { return &v }

func (p ProfileHistoryPrivacyType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ProfileHistoryPrivacyType) UnmarshalText(text []byte) error {
q, err := ProfileHistoryPrivacyTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ProfileHistoryPrivacyType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ProfileHistoryPrivacyType(v)
return nil
}

func (p * ProfileHistoryPrivacyType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type StatusMessageHistoryPrivacyType int64
const (
  StatusMessageHistoryPrivacyType_NONE StatusMessageHistoryPrivacyType = 1
  StatusMessageHistoryPrivacyType_ALL StatusMessageHistoryPrivacyType = 2
)

func (p StatusMessageHistoryPrivacyType) String() string {
  switch p {
  case StatusMessageHistoryPrivacyType_NONE: return "NONE"
  case StatusMessageHistoryPrivacyType_ALL: return "ALL"
  }
  return "<UNSET>"
}

func StatusMessageHistoryPrivacyTypeFromString(s string) (StatusMessageHistoryPrivacyType, error) {
  switch s {
  case "NONE": return StatusMessageHistoryPrivacyType_NONE, nil 
  case "ALL": return StatusMessageHistoryPrivacyType_ALL, nil 
  }
  return StatusMessageHistoryPrivacyType(0), fmt.Errorf("not a valid StatusMessageHistoryPrivacyType string")
}


func StatusMessageHistoryPrivacyTypePtr(v StatusMessageHistoryPrivacyType) *StatusMessageHistoryPrivacyType { return &v }

func (p StatusMessageHistoryPrivacyType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *StatusMessageHistoryPrivacyType) UnmarshalText(text []byte) error {
q, err := StatusMessageHistoryPrivacyTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *StatusMessageHistoryPrivacyType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = StatusMessageHistoryPrivacyType(v)
return nil
}

func (p * StatusMessageHistoryPrivacyType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type PrivacyShareMyProfileType int64
const (
  PrivacyShareMyProfileType_NEVER_SHOW PrivacyShareMyProfileType = 0
  PrivacyShareMyProfileType_ONE_WAY PrivacyShareMyProfileType = 1
  PrivacyShareMyProfileType_MUTUAL PrivacyShareMyProfileType = 2
)

func (p PrivacyShareMyProfileType) String() string {
  switch p {
  case PrivacyShareMyProfileType_NEVER_SHOW: return "NEVER_SHOW"
  case PrivacyShareMyProfileType_ONE_WAY: return "ONE_WAY"
  case PrivacyShareMyProfileType_MUTUAL: return "MUTUAL"
  }
  return "<UNSET>"
}

func PrivacyShareMyProfileTypeFromString(s string) (PrivacyShareMyProfileType, error) {
  switch s {
  case "NEVER_SHOW": return PrivacyShareMyProfileType_NEVER_SHOW, nil 
  case "ONE_WAY": return PrivacyShareMyProfileType_ONE_WAY, nil 
  case "MUTUAL": return PrivacyShareMyProfileType_MUTUAL, nil 
  }
  return PrivacyShareMyProfileType(0), fmt.Errorf("not a valid PrivacyShareMyProfileType string")
}


func PrivacyShareMyProfileTypePtr(v PrivacyShareMyProfileType) *PrivacyShareMyProfileType { return &v }

func (p PrivacyShareMyProfileType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *PrivacyShareMyProfileType) UnmarshalText(text []byte) error {
q, err := PrivacyShareMyProfileTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *PrivacyShareMyProfileType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = PrivacyShareMyProfileType(v)
return nil
}

func (p * PrivacyShareMyProfileType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type UserAgeType int64
const (
  UserAgeType_OVER UserAgeType = 1
  UserAgeType_UNDER UserAgeType = 2
  UserAgeType_UNDEFINED UserAgeType = 3
)

func (p UserAgeType) String() string {
  switch p {
  case UserAgeType_OVER: return "OVER"
  case UserAgeType_UNDER: return "UNDER"
  case UserAgeType_UNDEFINED: return "UNDEFINED"
  }
  return "<UNSET>"
}

func UserAgeTypeFromString(s string) (UserAgeType, error) {
  switch s {
  case "OVER": return UserAgeType_OVER, nil 
  case "UNDER": return UserAgeType_UNDER, nil 
  case "UNDEFINED": return UserAgeType_UNDEFINED, nil 
  }
  return UserAgeType(0), fmt.Errorf("not a valid UserAgeType string")
}


func UserAgeTypePtr(v UserAgeType) *UserAgeType { return &v }

func (p UserAgeType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *UserAgeType) UnmarshalText(text []byte) error {
q, err := UserAgeTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *UserAgeType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = UserAgeType(v)
return nil
}

func (p * UserAgeType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type SnsIdType int64
const (
  SnsIdType_FACEBOOK SnsIdType = 1
  SnsIdType_SINA SnsIdType = 2
  SnsIdType_RENREN SnsIdType = 3
  SnsIdType_FEIXIN SnsIdType = 4
  SnsIdType_BBM SnsIdType = 5
  SnsIdType_APPLE SnsIdType = 6
)

func (p SnsIdType) String() string {
  switch p {
  case SnsIdType_FACEBOOK: return "FACEBOOK"
  case SnsIdType_SINA: return "SINA"
  case SnsIdType_RENREN: return "RENREN"
  case SnsIdType_FEIXIN: return "FEIXIN"
  case SnsIdType_BBM: return "BBM"
  case SnsIdType_APPLE: return "APPLE"
  }
  return "<UNSET>"
}

func SnsIdTypeFromString(s string) (SnsIdType, error) {
  switch s {
  case "FACEBOOK": return SnsIdType_FACEBOOK, nil 
  case "SINA": return SnsIdType_SINA, nil 
  case "RENREN": return SnsIdType_RENREN, nil 
  case "FEIXIN": return SnsIdType_FEIXIN, nil 
  case "BBM": return SnsIdType_BBM, nil 
  case "APPLE": return SnsIdType_APPLE, nil 
  }
  return SnsIdType(0), fmt.Errorf("not a valid SnsIdType string")
}


func SnsIdTypePtr(v SnsIdType) *SnsIdType { return &v }

func (p SnsIdType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SnsIdType) UnmarshalText(text []byte) error {
q, err := SnsIdTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SnsIdType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SnsIdType(v)
return nil
}

func (p * SnsIdType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type EmailConfirmationStatus int64
const (
  EmailConfirmationStatus_NOT_SPECIFIED EmailConfirmationStatus = 0
  EmailConfirmationStatus_NOT_YET EmailConfirmationStatus = 1
  EmailConfirmationStatus_DONE EmailConfirmationStatus = 3
  EmailConfirmationStatus_NEED_ENFORCED_INPUT EmailConfirmationStatus = 4
)

func (p EmailConfirmationStatus) String() string {
  switch p {
  case EmailConfirmationStatus_NOT_SPECIFIED: return "NOT_SPECIFIED"
  case EmailConfirmationStatus_NOT_YET: return "NOT_YET"
  case EmailConfirmationStatus_DONE: return "DONE"
  case EmailConfirmationStatus_NEED_ENFORCED_INPUT: return "NEED_ENFORCED_INPUT"
  }
  return "<UNSET>"
}

func EmailConfirmationStatusFromString(s string) (EmailConfirmationStatus, error) {
  switch s {
  case "NOT_SPECIFIED": return EmailConfirmationStatus_NOT_SPECIFIED, nil 
  case "NOT_YET": return EmailConfirmationStatus_NOT_YET, nil 
  case "DONE": return EmailConfirmationStatus_DONE, nil 
  case "NEED_ENFORCED_INPUT": return EmailConfirmationStatus_NEED_ENFORCED_INPUT, nil 
  }
  return EmailConfirmationStatus(0), fmt.Errorf("not a valid EmailConfirmationStatus string")
}


func EmailConfirmationStatusPtr(v EmailConfirmationStatus) *EmailConfirmationStatus { return &v }

func (p EmailConfirmationStatus) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *EmailConfirmationStatus) UnmarshalText(text []byte) error {
q, err := EmailConfirmationStatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *EmailConfirmationStatus) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = EmailConfirmationStatus(v)
return nil
}

func (p * EmailConfirmationStatus) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type AccountMigrationPincodeType int64
const (
  AccountMigrationPincodeType_NOT_APPLICABLE AccountMigrationPincodeType = 0
  AccountMigrationPincodeType_NOT_SET AccountMigrationPincodeType = 1
  AccountMigrationPincodeType_SET AccountMigrationPincodeType = 2
  AccountMigrationPincodeType_NEED_ENFORCED_INPUT AccountMigrationPincodeType = 3
)

func (p AccountMigrationPincodeType) String() string {
  switch p {
  case AccountMigrationPincodeType_NOT_APPLICABLE: return "NOT_APPLICABLE"
  case AccountMigrationPincodeType_NOT_SET: return "NOT_SET"
  case AccountMigrationPincodeType_SET: return "SET"
  case AccountMigrationPincodeType_NEED_ENFORCED_INPUT: return "NEED_ENFORCED_INPUT"
  }
  return "<UNSET>"
}

func AccountMigrationPincodeTypeFromString(s string) (AccountMigrationPincodeType, error) {
  switch s {
  case "NOT_APPLICABLE": return AccountMigrationPincodeType_NOT_APPLICABLE, nil 
  case "NOT_SET": return AccountMigrationPincodeType_NOT_SET, nil 
  case "SET": return AccountMigrationPincodeType_SET, nil 
  case "NEED_ENFORCED_INPUT": return AccountMigrationPincodeType_NEED_ENFORCED_INPUT, nil 
  }
  return AccountMigrationPincodeType(0), fmt.Errorf("not a valid AccountMigrationPincodeType string")
}


func AccountMigrationPincodeTypePtr(v AccountMigrationPincodeType) *AccountMigrationPincodeType { return &v }

func (p AccountMigrationPincodeType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *AccountMigrationPincodeType) UnmarshalText(text []byte) error {
q, err := AccountMigrationPincodeTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *AccountMigrationPincodeType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = AccountMigrationPincodeType(v)
return nil
}

func (p * AccountMigrationPincodeType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type SecurityCenterSettingsType int64
const (
  SecurityCenterSettingsType_NOT_APPLICABLE SecurityCenterSettingsType = 0
  SecurityCenterSettingsType_NOT_SET SecurityCenterSettingsType = 1
  SecurityCenterSettingsType_SET SecurityCenterSettingsType = 2
  SecurityCenterSettingsType_NEED_ENFORCED_INPUT SecurityCenterSettingsType = 3
)

func (p SecurityCenterSettingsType) String() string {
  switch p {
  case SecurityCenterSettingsType_NOT_APPLICABLE: return "NOT_APPLICABLE"
  case SecurityCenterSettingsType_NOT_SET: return "NOT_SET"
  case SecurityCenterSettingsType_SET: return "SET"
  case SecurityCenterSettingsType_NEED_ENFORCED_INPUT: return "NEED_ENFORCED_INPUT"
  }
  return "<UNSET>"
}

func SecurityCenterSettingsTypeFromString(s string) (SecurityCenterSettingsType, error) {
  switch s {
  case "NOT_APPLICABLE": return SecurityCenterSettingsType_NOT_APPLICABLE, nil 
  case "NOT_SET": return SecurityCenterSettingsType_NOT_SET, nil 
  case "SET": return SecurityCenterSettingsType_SET, nil 
  case "NEED_ENFORCED_INPUT": return SecurityCenterSettingsType_NEED_ENFORCED_INPUT, nil 
  }
  return SecurityCenterSettingsType(0), fmt.Errorf("not a valid SecurityCenterSettingsType string")
}


func SecurityCenterSettingsTypePtr(v SecurityCenterSettingsType) *SecurityCenterSettingsType { return &v }

func (p SecurityCenterSettingsType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SecurityCenterSettingsType) UnmarshalText(text []byte) error {
q, err := SecurityCenterSettingsTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SecurityCenterSettingsType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SecurityCenterSettingsType(v)
return nil
}

func (p * SecurityCenterSettingsType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type CustomMode int64
const (
  CustomMode_PROMOTION_FRIENDS_INVITE CustomMode = 1
  CustomMode_CAPABILITY_SERVER_SIDE_SMS CustomMode = 2
  CustomMode_LINE_CLIENT_ANALYTICS_CONFIGURATION CustomMode = 3
)

func (p CustomMode) String() string {
  switch p {
  case CustomMode_PROMOTION_FRIENDS_INVITE: return "PROMOTION_FRIENDS_INVITE"
  case CustomMode_CAPABILITY_SERVER_SIDE_SMS: return "CAPABILITY_SERVER_SIDE_SMS"
  case CustomMode_LINE_CLIENT_ANALYTICS_CONFIGURATION: return "LINE_CLIENT_ANALYTICS_CONFIGURATION"
  }
  return "<UNSET>"
}

func CustomModeFromString(s string) (CustomMode, error) {
  switch s {
  case "PROMOTION_FRIENDS_INVITE": return CustomMode_PROMOTION_FRIENDS_INVITE, nil 
  case "CAPABILITY_SERVER_SIDE_SMS": return CustomMode_CAPABILITY_SERVER_SIDE_SMS, nil 
  case "LINE_CLIENT_ANALYTICS_CONFIGURATION": return CustomMode_LINE_CLIENT_ANALYTICS_CONFIGURATION, nil 
  }
  return CustomMode(0), fmt.Errorf("not a valid CustomMode string")
}


func CustomModePtr(v CustomMode) *CustomMode { return &v }

func (p CustomMode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *CustomMode) UnmarshalText(text []byte) error {
q, err := CustomModeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *CustomMode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = CustomMode(v)
return nil
}

func (p * CustomMode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ModificationType int64
const (
  ModificationType_ADD ModificationType = 0
  ModificationType_REMOVE ModificationType = 1
  ModificationType_MODIFY ModificationType = 2
)

func (p ModificationType) String() string {
  switch p {
  case ModificationType_ADD: return "ADD"
  case ModificationType_REMOVE: return "REMOVE"
  case ModificationType_MODIFY: return "MODIFY"
  }
  return "<UNSET>"
}

func ModificationTypeFromString(s string) (ModificationType, error) {
  switch s {
  case "ADD": return ModificationType_ADD, nil 
  case "REMOVE": return ModificationType_REMOVE, nil 
  case "MODIFY": return ModificationType_MODIFY, nil 
  }
  return ModificationType(0), fmt.Errorf("not a valid ModificationType string")
}


func ModificationTypePtr(v ModificationType) *ModificationType { return &v }

func (p ModificationType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ModificationType) UnmarshalText(text []byte) error {
q, err := ModificationTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ModificationType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ModificationType(v)
return nil
}

func (p * ModificationType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ContactSetting int64
const (
  ContactSetting_CONTACT_SETTING_NOTIFICATION_DISABLE ContactSetting = 1
  ContactSetting_CONTACT_SETTING_DISPLAY_NAME_OVERRIDE ContactSetting = 2
  ContactSetting_CONTACT_SETTING_CONTACT_HIDE ContactSetting = 4
  ContactSetting_CONTACT_SETTING_FAVORITE ContactSetting = 8
  ContactSetting_CONTACT_SETTING_DELETE ContactSetting = 16
)

func (p ContactSetting) String() string {
  switch p {
  case ContactSetting_CONTACT_SETTING_NOTIFICATION_DISABLE: return "CONTACT_SETTING_NOTIFICATION_DISABLE"
  case ContactSetting_CONTACT_SETTING_DISPLAY_NAME_OVERRIDE: return "CONTACT_SETTING_DISPLAY_NAME_OVERRIDE"
  case ContactSetting_CONTACT_SETTING_CONTACT_HIDE: return "CONTACT_SETTING_CONTACT_HIDE"
  case ContactSetting_CONTACT_SETTING_FAVORITE: return "CONTACT_SETTING_FAVORITE"
  case ContactSetting_CONTACT_SETTING_DELETE: return "CONTACT_SETTING_DELETE"
  }
  return "<UNSET>"
}

func ContactSettingFromString(s string) (ContactSetting, error) {
  switch s {
  case "CONTACT_SETTING_NOTIFICATION_DISABLE": return ContactSetting_CONTACT_SETTING_NOTIFICATION_DISABLE, nil 
  case "CONTACT_SETTING_DISPLAY_NAME_OVERRIDE": return ContactSetting_CONTACT_SETTING_DISPLAY_NAME_OVERRIDE, nil 
  case "CONTACT_SETTING_CONTACT_HIDE": return ContactSetting_CONTACT_SETTING_CONTACT_HIDE, nil 
  case "CONTACT_SETTING_FAVORITE": return ContactSetting_CONTACT_SETTING_FAVORITE, nil 
  case "CONTACT_SETTING_DELETE": return ContactSetting_CONTACT_SETTING_DELETE, nil 
  }
  return ContactSetting(0), fmt.Errorf("not a valid ContactSetting string")
}


func ContactSettingPtr(v ContactSetting) *ContactSetting { return &v }

func (p ContactSetting) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ContactSetting) UnmarshalText(text []byte) error {
q, err := ContactSettingFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ContactSetting) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ContactSetting(v)
return nil
}

func (p * ContactSetting) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type NotificationType int64
const (
  NotificationType_APPLE_APNS NotificationType = 1
  NotificationType_GOOGLE_C2DM NotificationType = 2
  NotificationType_NHN_NNI NotificationType = 3
  NotificationType_SKT_AOM NotificationType = 4
  NotificationType_MS_MPNS NotificationType = 5
  NotificationType_RIM_BIS NotificationType = 6
  NotificationType_GOOGLE_GCM NotificationType = 7
  NotificationType_NOKIA_NNAPI NotificationType = 8
  NotificationType_TIZEN NotificationType = 9
  NotificationType_MOZILLA_SIMPLE NotificationType = 10
  NotificationType_LINE_BOT NotificationType = 17
  NotificationType_LINE_WAP NotificationType = 18
  NotificationType_APPLE_APNS_VOIP NotificationType = 19
  NotificationType_MS_WNS NotificationType = 20
  NotificationType_GOOGLE_FCM NotificationType = 21
  NotificationType_CLOVA NotificationType = 22
  NotificationType_CLOVA_VOIP NotificationType = 23
  NotificationType_HUAWEI_HCM NotificationType = 24
)

func (p NotificationType) String() string {
  switch p {
  case NotificationType_APPLE_APNS: return "APPLE_APNS"
  case NotificationType_GOOGLE_C2DM: return "GOOGLE_C2DM"
  case NotificationType_NHN_NNI: return "NHN_NNI"
  case NotificationType_SKT_AOM: return "SKT_AOM"
  case NotificationType_MS_MPNS: return "MS_MPNS"
  case NotificationType_RIM_BIS: return "RIM_BIS"
  case NotificationType_GOOGLE_GCM: return "GOOGLE_GCM"
  case NotificationType_NOKIA_NNAPI: return "NOKIA_NNAPI"
  case NotificationType_TIZEN: return "TIZEN"
  case NotificationType_MOZILLA_SIMPLE: return "MOZILLA_SIMPLE"
  case NotificationType_LINE_BOT: return "LINE_BOT"
  case NotificationType_LINE_WAP: return "LINE_WAP"
  case NotificationType_APPLE_APNS_VOIP: return "APPLE_APNS_VOIP"
  case NotificationType_MS_WNS: return "MS_WNS"
  case NotificationType_GOOGLE_FCM: return "GOOGLE_FCM"
  case NotificationType_CLOVA: return "CLOVA"
  case NotificationType_CLOVA_VOIP: return "CLOVA_VOIP"
  case NotificationType_HUAWEI_HCM: return "HUAWEI_HCM"
  }
  return "<UNSET>"
}

func NotificationTypeFromString(s string) (NotificationType, error) {
  switch s {
  case "APPLE_APNS": return NotificationType_APPLE_APNS, nil 
  case "GOOGLE_C2DM": return NotificationType_GOOGLE_C2DM, nil 
  case "NHN_NNI": return NotificationType_NHN_NNI, nil 
  case "SKT_AOM": return NotificationType_SKT_AOM, nil 
  case "MS_MPNS": return NotificationType_MS_MPNS, nil 
  case "RIM_BIS": return NotificationType_RIM_BIS, nil 
  case "GOOGLE_GCM": return NotificationType_GOOGLE_GCM, nil 
  case "NOKIA_NNAPI": return NotificationType_NOKIA_NNAPI, nil 
  case "TIZEN": return NotificationType_TIZEN, nil 
  case "MOZILLA_SIMPLE": return NotificationType_MOZILLA_SIMPLE, nil 
  case "LINE_BOT": return NotificationType_LINE_BOT, nil 
  case "LINE_WAP": return NotificationType_LINE_WAP, nil 
  case "APPLE_APNS_VOIP": return NotificationType_APPLE_APNS_VOIP, nil 
  case "MS_WNS": return NotificationType_MS_WNS, nil 
  case "GOOGLE_FCM": return NotificationType_GOOGLE_FCM, nil 
  case "CLOVA": return NotificationType_CLOVA, nil 
  case "CLOVA_VOIP": return NotificationType_CLOVA_VOIP, nil 
  case "HUAWEI_HCM": return NotificationType_HUAWEI_HCM, nil 
  }
  return NotificationType(0), fmt.Errorf("not a valid NotificationType string")
}


func NotificationTypePtr(v NotificationType) *NotificationType { return &v }

func (p NotificationType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *NotificationType) UnmarshalText(text []byte) error {
q, err := NotificationTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *NotificationType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = NotificationType(v)
return nil
}

func (p * NotificationType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - Code
//  - Reason
//  - ParameterMap
type TalkException struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Reason string `thrift:"reason,2" db:"reason" json:"reason"`
  ParameterMap map[string]string `thrift:"parameterMap,3" db:"parameterMap" json:"parameterMap"`
}

func NewTalkException() *TalkException {
  return &TalkException{}
}


func (p *TalkException) GetCode() ErrorCode {
  return p.Code
}

func (p *TalkException) GetReason() string {
  return p.Reason
}

func (p *TalkException) GetParameterMap() map[string]string {
  return p.ParameterMap
}
func (p *TalkException) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkException)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *TalkException)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Reason = v
}
  return nil
}

func (p *TalkException)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.ParameterMap =  tMap
  for i := 0; i < size; i ++ {
var _key0 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key0 = v
}
var _val1 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val1 = v
}
    p.ParameterMap[_key0] = _val1
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TalkException) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TalkException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkException) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *TalkException) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reason", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:reason: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Reason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reason (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:reason: ", p), err) }
  return err
}

func (p *TalkException) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parameterMap", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:parameterMap: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.ParameterMap)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.ParameterMap {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:parameterMap: ", p), err) }
  return err
}

func (p *TalkException) Equals(other *TalkException) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if p.Reason != other.Reason { return false }
  if len(p.ParameterMap) != len(other.ParameterMap) { return false }
  for k, _tgt := range p.ParameterMap {
    _src2 := other.ParameterMap[k]
    if _tgt != _src2 { return false }
  }
  return true
}

func (p *TalkException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkException(%+v)", *p)
}

func (p *TalkException) Error() string {
  return p.String()
}

func (TalkException) TExceptionType() thrift.TExceptionType {
  return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*TalkException)(nil)

// Attributes:
//  - ID
//  - ExpirationTime
//  - MaxUseCount
type Ticket struct {
  ID string `thrift:"id,1" db:"id" json:"id"`
  // unused fields # 2 to 9
  ExpirationTime int64 `thrift:"expirationTime,10" db:"expirationTime" json:"expirationTime"`
  // unused fields # 11 to 20
  MaxUseCount int32 `thrift:"maxUseCount,21" db:"maxUseCount" json:"maxUseCount"`
}

func NewTicket() *Ticket {
  return &Ticket{}
}


func (p *Ticket) GetID() string {
  return p.ID
}

func (p *Ticket) GetExpirationTime() int64 {
  return p.ExpirationTime
}

func (p *Ticket) GetMaxUseCount() int32 {
  return p.MaxUseCount
}
func (p *Ticket) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField21(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Ticket)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *Ticket)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.ExpirationTime = v
}
  return nil
}

func (p *Ticket)  ReadField21(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.MaxUseCount = v
}
  return nil
}

func (p *Ticket) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Ticket"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField21(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Ticket) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *Ticket) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "expirationTime", thrift.I64, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:expirationTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ExpirationTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.expirationTime (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:expirationTime: ", p), err) }
  return err
}

func (p *Ticket) writeField21(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "maxUseCount", thrift.I32, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:maxUseCount: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MaxUseCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.maxUseCount (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:maxUseCount: ", p), err) }
  return err
}

func (p *Ticket) Equals(other *Ticket) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ID != other.ID { return false }
  if p.ExpirationTime != other.ExpirationTime { return false }
  if p.MaxUseCount != other.MaxUseCount { return false }
  return true
}

func (p *Ticket) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Ticket(%+v)", *p)
}

// Attributes:
//  - Version
//  - UpdatedMillis
type AvatarProfile struct {
  Version string `thrift:"version,1" db:"version" json:"version"`
  UpdatedMillis int64 `thrift:"updatedMillis,2" db:"updatedMillis" json:"updatedMillis"`
}

func NewAvatarProfile() *AvatarProfile {
  return &AvatarProfile{}
}


func (p *AvatarProfile) GetVersion() string {
  return p.Version
}

func (p *AvatarProfile) GetUpdatedMillis() int64 {
  return p.UpdatedMillis
}
func (p *AvatarProfile) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AvatarProfile)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Version = v
}
  return nil
}

func (p *AvatarProfile)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UpdatedMillis = v
}
  return nil
}

func (p *AvatarProfile) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AvatarProfile"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AvatarProfile) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "version", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:version: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:version: ", p), err) }
  return err
}

func (p *AvatarProfile) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "updatedMillis", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:updatedMillis: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.UpdatedMillis)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updatedMillis (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:updatedMillis: ", p), err) }
  return err
}

func (p *AvatarProfile) Equals(other *AvatarProfile) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Version != other.Version { return false }
  if p.UpdatedMillis != other.UpdatedMillis { return false }
  return true
}

func (p *AvatarProfile) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AvatarProfile(%+v)", *p)
}

// Attributes:
//  - Mid
//  - CreatedTime
//  - Type
//  - Status
//  - Relation
//  - DisplayName
//  - PhoneticName
//  - PictureStatus
//  - ThumbnailUrl
//  - StatusMessage
//  - DisplayNameOverridden
//  - FavoriteTime
//  - CapableVoiceCall
//  - CapableVideoCall
//  - CapableMyhome
//  - CapableBuddy
//  - Attributes
//  - Settings
//  - PicturePath
//  - RecommendParams
//  - FriendRequestStatus
//  - MusicProfile
//  - VideoProfile
//  - StatusMessageContentMetadata
//  - AvatarProfile
type Contact struct {
  Mid string `thrift:"mid,1" db:"mid" json:"mid"`
  CreatedTime int64 `thrift:"createdTime,2" db:"createdTime" json:"createdTime"`
  // unused fields # 3 to 9
  Type ContactType `thrift:"type,10" db:"type" json:"type"`
  Status ContactStatus `thrift:"status,11" db:"status" json:"status"`
  // unused fields # 12 to 20
  Relation ContactRelation `thrift:"relation,21" db:"relation" json:"relation"`
  DisplayName string `thrift:"displayName,22" db:"displayName" json:"displayName"`
  PhoneticName string `thrift:"phoneticName,23" db:"phoneticName" json:"phoneticName"`
  PictureStatus string `thrift:"pictureStatus,24" db:"pictureStatus" json:"pictureStatus"`
  ThumbnailUrl string `thrift:"thumbnailUrl,25" db:"thumbnailUrl" json:"thumbnailUrl"`
  StatusMessage string `thrift:"statusMessage,26" db:"statusMessage" json:"statusMessage"`
  DisplayNameOverridden string `thrift:"displayNameOverridden,27" db:"displayNameOverridden" json:"displayNameOverridden"`
  FavoriteTime int64 `thrift:"favoriteTime,28" db:"favoriteTime" json:"favoriteTime"`
  // unused fields # 29 to 30
  CapableVoiceCall bool `thrift:"capableVoiceCall,31" db:"capableVoiceCall" json:"capableVoiceCall"`
  CapableVideoCall bool `thrift:"capableVideoCall,32" db:"capableVideoCall" json:"capableVideoCall"`
  CapableMyhome bool `thrift:"capableMyhome,33" db:"capableMyhome" json:"capableMyhome"`
  CapableBuddy bool `thrift:"capableBuddy,34" db:"capableBuddy" json:"capableBuddy"`
  Attributes int32 `thrift:"attributes,35" db:"attributes" json:"attributes"`
  Settings int64 `thrift:"settings,36" db:"settings" json:"settings"`
  PicturePath string `thrift:"picturePath,37" db:"picturePath" json:"picturePath"`
  RecommendParams string `thrift:"recommendParams,38" db:"recommendParams" json:"recommendParams"`
  FriendRequestStatus FriendRequestStatus `thrift:"friendRequestStatus,39" db:"friendRequestStatus" json:"friendRequestStatus"`
  MusicProfile string `thrift:"musicProfile,40" db:"musicProfile" json:"musicProfile"`
  // unused field # 41
  VideoProfile string `thrift:"videoProfile,42" db:"videoProfile" json:"videoProfile"`
  StatusMessageContentMetadata map[string]string `thrift:"statusMessageContentMetadata,43" db:"statusMessageContentMetadata" json:"statusMessageContentMetadata"`
  AvatarProfile *AvatarProfile `thrift:"avatarProfile,44" db:"avatarProfile" json:"avatarProfile"`
}

func NewContact() *Contact {
  return &Contact{}
}


func (p *Contact) GetMid() string {
  return p.Mid
}

func (p *Contact) GetCreatedTime() int64 {
  return p.CreatedTime
}

func (p *Contact) GetType() ContactType {
  return p.Type
}

func (p *Contact) GetStatus() ContactStatus {
  return p.Status
}

func (p *Contact) GetRelation() ContactRelation {
  return p.Relation
}

func (p *Contact) GetDisplayName() string {
  return p.DisplayName
}

func (p *Contact) GetPhoneticName() string {
  return p.PhoneticName
}

func (p *Contact) GetPictureStatus() string {
  return p.PictureStatus
}

func (p *Contact) GetThumbnailUrl() string {
  return p.ThumbnailUrl
}

func (p *Contact) GetStatusMessage() string {
  return p.StatusMessage
}

func (p *Contact) GetDisplayNameOverridden() string {
  return p.DisplayNameOverridden
}

func (p *Contact) GetFavoriteTime() int64 {
  return p.FavoriteTime
}

func (p *Contact) GetCapableVoiceCall() bool {
  return p.CapableVoiceCall
}

func (p *Contact) GetCapableVideoCall() bool {
  return p.CapableVideoCall
}

func (p *Contact) GetCapableMyhome() bool {
  return p.CapableMyhome
}

func (p *Contact) GetCapableBuddy() bool {
  return p.CapableBuddy
}

func (p *Contact) GetAttributes() int32 {
  return p.Attributes
}

func (p *Contact) GetSettings() int64 {
  return p.Settings
}

func (p *Contact) GetPicturePath() string {
  return p.PicturePath
}

func (p *Contact) GetRecommendParams() string {
  return p.RecommendParams
}

func (p *Contact) GetFriendRequestStatus() FriendRequestStatus {
  return p.FriendRequestStatus
}

func (p *Contact) GetMusicProfile() string {
  return p.MusicProfile
}

func (p *Contact) GetVideoProfile() string {
  return p.VideoProfile
}

func (p *Contact) GetStatusMessageContentMetadata() map[string]string {
  return p.StatusMessageContentMetadata
}
var Contact_AvatarProfile_DEFAULT *AvatarProfile
func (p *Contact) GetAvatarProfile() *AvatarProfile {
  if !p.IsSetAvatarProfile() {
    return Contact_AvatarProfile_DEFAULT
  }
return p.AvatarProfile
}
func (p *Contact) IsSetAvatarProfile() bool {
  return p.AvatarProfile != nil
}

func (p *Contact) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField21(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField22(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField23(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField24(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField25(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 26:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField26(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 27:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField27(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 28:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField28(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 31:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField31(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 32:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField32(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 33:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField33(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 34:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField34(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 35:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField35(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 36:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField36(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 37:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField37(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 38:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField38(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 39:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField39(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 40:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField40(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 42:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField42(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 43:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField43(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 44:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField44(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Contact)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *Contact)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CreatedTime = v
}
  return nil
}

func (p *Contact)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  temp := ContactType(v)
  p.Type = temp
}
  return nil
}

func (p *Contact)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  temp := ContactStatus(v)
  p.Status = temp
}
  return nil
}

func (p *Contact)  ReadField21(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  temp := ContactRelation(v)
  p.Relation = temp
}
  return nil
}

func (p *Contact)  ReadField22(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.DisplayName = v
}
  return nil
}

func (p *Contact)  ReadField23(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.PhoneticName = v
}
  return nil
}

func (p *Contact)  ReadField24(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.PictureStatus = v
}
  return nil
}

func (p *Contact)  ReadField25(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  p.ThumbnailUrl = v
}
  return nil
}

func (p *Contact)  ReadField26(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 26: ", err)
} else {
  p.StatusMessage = v
}
  return nil
}

func (p *Contact)  ReadField27(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 27: ", err)
} else {
  p.DisplayNameOverridden = v
}
  return nil
}

func (p *Contact)  ReadField28(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 28: ", err)
} else {
  p.FavoriteTime = v
}
  return nil
}

func (p *Contact)  ReadField31(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 31: ", err)
} else {
  p.CapableVoiceCall = v
}
  return nil
}

func (p *Contact)  ReadField32(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 32: ", err)
} else {
  p.CapableVideoCall = v
}
  return nil
}

func (p *Contact)  ReadField33(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 33: ", err)
} else {
  p.CapableMyhome = v
}
  return nil
}

func (p *Contact)  ReadField34(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 34: ", err)
} else {
  p.CapableBuddy = v
}
  return nil
}

func (p *Contact)  ReadField35(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 35: ", err)
} else {
  p.Attributes = v
}
  return nil
}

func (p *Contact)  ReadField36(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 36: ", err)
} else {
  p.Settings = v
}
  return nil
}

func (p *Contact)  ReadField37(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 37: ", err)
} else {
  p.PicturePath = v
}
  return nil
}

func (p *Contact)  ReadField38(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 38: ", err)
} else {
  p.RecommendParams = v
}
  return nil
}

func (p *Contact)  ReadField39(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 39: ", err)
} else {
  temp := FriendRequestStatus(v)
  p.FriendRequestStatus = temp
}
  return nil
}

func (p *Contact)  ReadField40(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 40: ", err)
} else {
  p.MusicProfile = v
}
  return nil
}

func (p *Contact)  ReadField42(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 42: ", err)
} else {
  p.VideoProfile = v
}
  return nil
}

func (p *Contact)  ReadField43(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.StatusMessageContentMetadata =  tMap
  for i := 0; i < size; i ++ {
var _key3 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key3 = v
}
var _val4 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val4 = v
}
    p.StatusMessageContentMetadata[_key3] = _val4
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Contact)  ReadField44(ctx context.Context, iprot thrift.TProtocol) error {
  p.AvatarProfile = &AvatarProfile{}
  if err := p.AvatarProfile.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AvatarProfile), err)
  }
  return nil
}

func (p *Contact) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Contact"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField21(ctx, oprot); err != nil { return err }
    if err := p.writeField22(ctx, oprot); err != nil { return err }
    if err := p.writeField23(ctx, oprot); err != nil { return err }
    if err := p.writeField24(ctx, oprot); err != nil { return err }
    if err := p.writeField25(ctx, oprot); err != nil { return err }
    if err := p.writeField26(ctx, oprot); err != nil { return err }
    if err := p.writeField27(ctx, oprot); err != nil { return err }
    if err := p.writeField28(ctx, oprot); err != nil { return err }
    if err := p.writeField31(ctx, oprot); err != nil { return err }
    if err := p.writeField32(ctx, oprot); err != nil { return err }
    if err := p.writeField33(ctx, oprot); err != nil { return err }
    if err := p.writeField34(ctx, oprot); err != nil { return err }
    if err := p.writeField35(ctx, oprot); err != nil { return err }
    if err := p.writeField36(ctx, oprot); err != nil { return err }
    if err := p.writeField37(ctx, oprot); err != nil { return err }
    if err := p.writeField38(ctx, oprot); err != nil { return err }
    if err := p.writeField39(ctx, oprot); err != nil { return err }
    if err := p.writeField40(ctx, oprot); err != nil { return err }
    if err := p.writeField42(ctx, oprot); err != nil { return err }
    if err := p.writeField43(ctx, oprot); err != nil { return err }
    if err := p.writeField44(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Contact) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mid: ", p), err) }
  return err
}

func (p *Contact) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "createdTime", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:createdTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.CreatedTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdTime (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:createdTime: ", p), err) }
  return err
}

func (p *Contact) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:type: ", p), err) }
  return err
}

func (p *Contact) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:status: ", p), err) }
  return err
}

func (p *Contact) writeField21(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "relation", thrift.I32, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:relation: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Relation)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.relation (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:relation: ", p), err) }
  return err
}

func (p *Contact) writeField22(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "displayName", thrift.STRING, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:displayName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DisplayName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.displayName (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:displayName: ", p), err) }
  return err
}

func (p *Contact) writeField23(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "phoneticName", thrift.STRING, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:phoneticName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PhoneticName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phoneticName (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:phoneticName: ", p), err) }
  return err
}

func (p *Contact) writeField24(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pictureStatus", thrift.STRING, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:pictureStatus: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PictureStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pictureStatus (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:pictureStatus: ", p), err) }
  return err
}

func (p *Contact) writeField25(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "thumbnailUrl", thrift.STRING, 25); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:thumbnailUrl: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ThumbnailUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.thumbnailUrl (25) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 25:thumbnailUrl: ", p), err) }
  return err
}

func (p *Contact) writeField26(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "statusMessage", thrift.STRING, 26); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:statusMessage: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.StatusMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.statusMessage (26) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 26:statusMessage: ", p), err) }
  return err
}

func (p *Contact) writeField27(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "displayNameOverridden", thrift.STRING, 27); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:displayNameOverridden: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DisplayNameOverridden)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.displayNameOverridden (27) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 27:displayNameOverridden: ", p), err) }
  return err
}

func (p *Contact) writeField28(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "favoriteTime", thrift.I64, 28); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:favoriteTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FavoriteTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.favoriteTime (28) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 28:favoriteTime: ", p), err) }
  return err
}

func (p *Contact) writeField31(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "capableVoiceCall", thrift.BOOL, 31); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:capableVoiceCall: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.CapableVoiceCall)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.capableVoiceCall (31) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 31:capableVoiceCall: ", p), err) }
  return err
}

func (p *Contact) writeField32(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "capableVideoCall", thrift.BOOL, 32); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:capableVideoCall: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.CapableVideoCall)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.capableVideoCall (32) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 32:capableVideoCall: ", p), err) }
  return err
}

func (p *Contact) writeField33(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "capableMyhome", thrift.BOOL, 33); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 33:capableMyhome: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.CapableMyhome)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.capableMyhome (33) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 33:capableMyhome: ", p), err) }
  return err
}

func (p *Contact) writeField34(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "capableBuddy", thrift.BOOL, 34); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 34:capableBuddy: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.CapableBuddy)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.capableBuddy (34) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 34:capableBuddy: ", p), err) }
  return err
}

func (p *Contact) writeField35(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "attributes", thrift.I32, 35); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 35:attributes: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Attributes)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.attributes (35) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 35:attributes: ", p), err) }
  return err
}

func (p *Contact) writeField36(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "settings", thrift.I64, 36); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 36:settings: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Settings)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.settings (36) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 36:settings: ", p), err) }
  return err
}

func (p *Contact) writeField37(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "picturePath", thrift.STRING, 37); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 37:picturePath: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PicturePath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.picturePath (37) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 37:picturePath: ", p), err) }
  return err
}

func (p *Contact) writeField38(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "recommendParams", thrift.STRING, 38); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 38:recommendParams: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RecommendParams)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.recommendParams (38) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 38:recommendParams: ", p), err) }
  return err
}

func (p *Contact) writeField39(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "friendRequestStatus", thrift.I32, 39); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 39:friendRequestStatus: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.FriendRequestStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.friendRequestStatus (39) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 39:friendRequestStatus: ", p), err) }
  return err
}

func (p *Contact) writeField40(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "musicProfile", thrift.STRING, 40); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:musicProfile: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MusicProfile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.musicProfile (40) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 40:musicProfile: ", p), err) }
  return err
}

func (p *Contact) writeField42(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "videoProfile", thrift.STRING, 42); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 42:videoProfile: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.VideoProfile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.videoProfile (42) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 42:videoProfile: ", p), err) }
  return err
}

func (p *Contact) writeField43(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "statusMessageContentMetadata", thrift.MAP, 43); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 43:statusMessageContentMetadata: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.StatusMessageContentMetadata)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.StatusMessageContentMetadata {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 43:statusMessageContentMetadata: ", p), err) }
  return err
}

func (p *Contact) writeField44(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "avatarProfile", thrift.STRUCT, 44); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 44:avatarProfile: ", p), err) }
  if err := p.AvatarProfile.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AvatarProfile), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 44:avatarProfile: ", p), err) }
  return err
}

func (p *Contact) Equals(other *Contact) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Mid != other.Mid { return false }
  if p.CreatedTime != other.CreatedTime { return false }
  if p.Type != other.Type { return false }
  if p.Status != other.Status { return false }
  if p.Relation != other.Relation { return false }
  if p.DisplayName != other.DisplayName { return false }
  if p.PhoneticName != other.PhoneticName { return false }
  if p.PictureStatus != other.PictureStatus { return false }
  if p.ThumbnailUrl != other.ThumbnailUrl { return false }
  if p.StatusMessage != other.StatusMessage { return false }
  if p.DisplayNameOverridden != other.DisplayNameOverridden { return false }
  if p.FavoriteTime != other.FavoriteTime { return false }
  if p.CapableVoiceCall != other.CapableVoiceCall { return false }
  if p.CapableVideoCall != other.CapableVideoCall { return false }
  if p.CapableMyhome != other.CapableMyhome { return false }
  if p.CapableBuddy != other.CapableBuddy { return false }
  if p.Attributes != other.Attributes { return false }
  if p.Settings != other.Settings { return false }
  if p.PicturePath != other.PicturePath { return false }
  if p.RecommendParams != other.RecommendParams { return false }
  if p.FriendRequestStatus != other.FriendRequestStatus { return false }
  if p.MusicProfile != other.MusicProfile { return false }
  if p.VideoProfile != other.VideoProfile { return false }
  if len(p.StatusMessageContentMetadata) != len(other.StatusMessageContentMetadata) { return false }
  for k, _tgt := range p.StatusMessageContentMetadata {
    _src5 := other.StatusMessageContentMetadata[k]
    if _tgt != _src5 { return false }
  }
  if !p.AvatarProfile.Equals(other.AvatarProfile) { return false }
  return true
}

func (p *Contact) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Contact(%+v)", *p)
}

// Attributes:
//  - RadiusMeters
//  - RadiusConfidence
type GeolocationAccuracy struct {
  RadiusMeters float64 `thrift:"radiusMeters,1" db:"radiusMeters" json:"radiusMeters"`
  RadiusConfidence float64 `thrift:"radiusConfidence,2" db:"radiusConfidence" json:"radiusConfidence"`
}

func NewGeolocationAccuracy() *GeolocationAccuracy {
  return &GeolocationAccuracy{}
}


func (p *GeolocationAccuracy) GetRadiusMeters() float64 {
  return p.RadiusMeters
}

func (p *GeolocationAccuracy) GetRadiusConfidence() float64 {
  return p.RadiusConfidence
}
func (p *GeolocationAccuracy) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GeolocationAccuracy)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RadiusMeters = v
}
  return nil
}

func (p *GeolocationAccuracy)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RadiusConfidence = v
}
  return nil
}

func (p *GeolocationAccuracy) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GeolocationAccuracy"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GeolocationAccuracy) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "radiusMeters", thrift.DOUBLE, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:radiusMeters: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.RadiusMeters)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.radiusMeters (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:radiusMeters: ", p), err) }
  return err
}

func (p *GeolocationAccuracy) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "radiusConfidence", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:radiusConfidence: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.RadiusConfidence)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.radiusConfidence (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:radiusConfidence: ", p), err) }
  return err
}

func (p *GeolocationAccuracy) Equals(other *GeolocationAccuracy) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RadiusMeters != other.RadiusMeters { return false }
  if p.RadiusConfidence != other.RadiusConfidence { return false }
  return true
}

func (p *GeolocationAccuracy) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GeolocationAccuracy(%+v)", *p)
}

// Attributes:
//  - Title
//  - Address
//  - Latitude
//  - Longitude
//  - Phone
//  - CategoryId
//  - Provider
//  - Accuracy
type Location struct {
  Title string `thrift:"title,1" db:"title" json:"title"`
  Address string `thrift:"address,2" db:"address" json:"address"`
  Latitude float64 `thrift:"latitude,3" db:"latitude" json:"latitude"`
  Longitude float64 `thrift:"longitude,4" db:"longitude" json:"longitude"`
  Phone string `thrift:"phone,5" db:"phone" json:"phone"`
  CategoryId string `thrift:"categoryId,6" db:"categoryId" json:"categoryId"`
  Provider PlaceSearchProvider `thrift:"provider,7" db:"provider" json:"provider"`
  Accuracy *GeolocationAccuracy `thrift:"accuracy,8" db:"accuracy" json:"accuracy"`
}

func NewLocation() *Location {
  return &Location{}
}


func (p *Location) GetTitle() string {
  return p.Title
}

func (p *Location) GetAddress() string {
  return p.Address
}

func (p *Location) GetLatitude() float64 {
  return p.Latitude
}

func (p *Location) GetLongitude() float64 {
  return p.Longitude
}

func (p *Location) GetPhone() string {
  return p.Phone
}

func (p *Location) GetCategoryId() string {
  return p.CategoryId
}

func (p *Location) GetProvider() PlaceSearchProvider {
  return p.Provider
}
var Location_Accuracy_DEFAULT *GeolocationAccuracy
func (p *Location) GetAccuracy() *GeolocationAccuracy {
  if !p.IsSetAccuracy() {
    return Location_Accuracy_DEFAULT
  }
return p.Accuracy
}
func (p *Location) IsSetAccuracy() bool {
  return p.Accuracy != nil
}

func (p *Location) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Location)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Title = v
}
  return nil
}

func (p *Location)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Address = v
}
  return nil
}

func (p *Location)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Latitude = v
}
  return nil
}

func (p *Location)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Longitude = v
}
  return nil
}

func (p *Location)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Phone = v
}
  return nil
}

func (p *Location)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.CategoryId = v
}
  return nil
}

func (p *Location)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := PlaceSearchProvider(v)
  p.Provider = temp
}
  return nil
}

func (p *Location)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  p.Accuracy = &GeolocationAccuracy{}
  if err := p.Accuracy.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Accuracy), err)
  }
  return nil
}

func (p *Location) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Location"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Location) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "title", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:title: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Title)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.title (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:title: ", p), err) }
  return err
}

func (p *Location) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "address", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:address: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Address)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:address: ", p), err) }
  return err
}

func (p *Location) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "latitude", thrift.DOUBLE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:latitude: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.Latitude)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.latitude (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:latitude: ", p), err) }
  return err
}

func (p *Location) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "longitude", thrift.DOUBLE, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:longitude: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.Longitude)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.longitude (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:longitude: ", p), err) }
  return err
}

func (p *Location) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "phone", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:phone: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Phone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phone (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:phone: ", p), err) }
  return err
}

func (p *Location) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "categoryId", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:categoryId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CategoryId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.categoryId (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:categoryId: ", p), err) }
  return err
}

func (p *Location) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "provider", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:provider: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Provider)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.provider (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:provider: ", p), err) }
  return err
}

func (p *Location) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "accuracy", thrift.STRUCT, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:accuracy: ", p), err) }
  if err := p.Accuracy.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Accuracy), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:accuracy: ", p), err) }
  return err
}

func (p *Location) Equals(other *Location) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Title != other.Title { return false }
  if p.Address != other.Address { return false }
  if p.Latitude != other.Latitude { return false }
  if p.Longitude != other.Longitude { return false }
  if p.Phone != other.Phone { return false }
  if p.CategoryId != other.CategoryId { return false }
  if p.Provider != other.Provider { return false }
  if !p.Accuracy.Equals(other.Accuracy) { return false }
  return true
}

func (p *Location) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Location(%+v)", *p)
}

// Attributes:
//  - ToType
//  - ID
//  - CreatedTime
//  - DeliveredTime
//  - Text
//  - Location
//  - HasContent
//  - ContentType
//  - ContentMetadata
//  - ContentPreview
//  - SessionId
//  - Chunks
//  - RelatedMessageId
//  - MessageRelationType
//  - ReadCount
//  - RelatedMessageServiceCode
//  - AppExtensionType
//  - _from
//  - To
type Message struct {
  _from string `thrift:"_from,1" db:"_from" json:"_from"`
  To string `thrift:"to,2" db:"to" json:"to"`
  ToType MIDType `thrift:"toType,3" db:"toType" json:"toType"`
  ID string `thrift:"id,4" db:"id" json:"id"`
  CreatedTime int64 `thrift:"createdTime,5" db:"createdTime" json:"createdTime"`
  DeliveredTime int64 `thrift:"deliveredTime,6" db:"deliveredTime" json:"deliveredTime"`
  // unused fields # 7 to 9
  Text string `thrift:"text,10" db:"text" json:"text"`
  Location *Location `thrift:"location,11" db:"location" json:"location,omitempty"`
  // unused fields # 12 to 13
  HasContent bool `thrift:"hasContent,14" db:"hasContent" json:"hasContent"`
  ContentType ContentType `thrift:"contentType,15" db:"contentType" json:"contentType"`
  // unused field # 16
  ContentPreview string `thrift:"contentPreview,17" db:"contentPreview" json:"contentPreview"`
  ContentMetadata map[string]string `thrift:"contentMetadata,18" db:"contentMetadata" json:"contentMetadata"`
  SessionId int8 `thrift:"sessionId,19" db:"sessionId" json:"sessionId"`
  Chunks []string `thrift:"chunks,20" db:"chunks" json:"chunks"`
  RelatedMessageId *string `thrift:"relatedMessageId,21" db:"relatedMessageId" json:"relatedMessageId,omitempty"`
  MessageRelationType MessageRelationType `thrift:"messageRelationType,22" db:"messageRelationType" json:"messageRelationType"`
  ReadCount int32 `thrift:"readCount,23" db:"readCount" json:"readCount"`
  RelatedMessageServiceCode ServiceCode `thrift:"relatedMessageServiceCode,24" db:"relatedMessageServiceCode" json:"relatedMessageServiceCode"`
  AppExtensionType AppExtensionType `thrift:"appExtensionType,25" db:"appExtensionType" json:"appExtensionType"`
}

func NewMessage() *Message {
  return &Message{}
}


func (p *Message) GetToType() MIDType {
  return p.ToType
}

func (p *Message) GetID() string {
  return p.ID
}

func (p *Message) GetCreatedTime() int64 {
  return p.CreatedTime
}

func (p *Message) GetDeliveredTime() int64 {
  return p.DeliveredTime
}

func (p *Message) GetText() string {
  return p.Text
}
var Message_Location_DEFAULT *Location
func (p *Message) GetLocation() *Location {
  if !p.IsSetLocation() {
    return Message_Location_DEFAULT
  }
return p.Location
}

func (p *Message) GetHasContent() bool {
  return p.HasContent
}

func (p *Message) GetContentType() ContentType {
  return p.ContentType
}

func (p *Message) GetContentMetadata() map[string]string {
  return p.ContentMetadata
}

func (p *Message) GetContentPreview() string {
  return p.ContentPreview
}

func (p *Message) GetSessionId() int8 {
  return p.SessionId
}

func (p *Message) GetChunks() []string {
  return p.Chunks
}
var Message_RelatedMessageId_DEFAULT string
func (p *Message) GetRelatedMessageId() string {
  if !p.IsSetRelatedMessageId() {
    return Message_RelatedMessageId_DEFAULT
  }
return *p.RelatedMessageId
}

func (p *Message) GetMessageRelationType() MessageRelationType {
  return p.MessageRelationType
}

func (p *Message) GetReadCount() int32 {
  return p.ReadCount
}

func (p *Message) GetRelatedMessageServiceCode() ServiceCode {
  return p.RelatedMessageServiceCode
}

func (p *Message) GetAppExtensionType() AppExtensionType {
  return p.AppExtensionType
}

func (p *Message) Get_from() string {
  return p._from
}

func (p *Message) GetTo() string {
  return p.To
}
func (p *Message) IsSetLocation() bool {
  return p.Location != nil
}

func (p *Message) IsSetRelatedMessageId() bool {
  return p.RelatedMessageId != nil
}

func (p *Message) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField18(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField17(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField19(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField21(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField22(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField23(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField24(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField25(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Message)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := MIDType(v)
  p.ToType = temp
}
  return nil
}

func (p *Message)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *Message)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CreatedTime = v
}
  return nil
}

func (p *Message)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.DeliveredTime = v
}
  return nil
}

func (p *Message)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Text = v
}
  return nil
}

func (p *Message)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  p.Location = &Location{}
  if err := p.Location.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Location), err)
  }
  return nil
}

func (p *Message)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.HasContent = v
}
  return nil
}

func (p *Message)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  temp := ContentType(v)
  p.ContentType = temp
}
  return nil
}

func (p *Message)  ReadField18(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.ContentMetadata =  tMap
  for i := 0; i < size; i ++ {
var _key6 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key6 = v
}
var _val7 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val7 = v
}
    p.ContentMetadata[_key6] = _val7
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Message)  ReadField17(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.ContentPreview = v
}
  return nil
}

func (p *Message)  ReadField19(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  temp := int8(v)
  p.SessionId = temp
}
  return nil
}

func (p *Message)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Chunks =  tSlice
  for i := 0; i < size; i ++ {
var _elem8 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem8 = v
}
    p.Chunks = append(p.Chunks, _elem8)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Message)  ReadField21(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.RelatedMessageId = &v
}
  return nil
}

func (p *Message)  ReadField22(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  temp := MessageRelationType(v)
  p.MessageRelationType = temp
}
  return nil
}

func (p *Message)  ReadField23(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.ReadCount = v
}
  return nil
}

func (p *Message)  ReadField24(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  temp := ServiceCode(v)
  p.RelatedMessageServiceCode = temp
}
  return nil
}

func (p *Message)  ReadField25(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  temp := AppExtensionType(v)
  p.AppExtensionType = temp
}
  return nil
}

func (p *Message)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p._from = v
}
  return nil
}

func (p *Message)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.To = v
}
  return nil
}

func (p *Message) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Message"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
    if err := p.writeField17(ctx, oprot); err != nil { return err }
    if err := p.writeField18(ctx, oprot); err != nil { return err }
    if err := p.writeField19(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
    if err := p.writeField21(ctx, oprot); err != nil { return err }
    if err := p.writeField22(ctx, oprot); err != nil { return err }
    if err := p.writeField23(ctx, oprot); err != nil { return err }
    if err := p.writeField24(ctx, oprot); err != nil { return err }
    if err := p.writeField25(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Message) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "_from", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:_from: ", p), err) }
  if err := oprot.WriteString(ctx, string(p._from)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T._from (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:_from: ", p), err) }
  return err
}

func (p *Message) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "to", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:to: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.To)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.to (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:to: ", p), err) }
  return err
}

func (p *Message) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "toType", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:toType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ToType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.toType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:toType: ", p), err) }
  return err
}

func (p *Message) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:id: ", p), err) }
  return err
}

func (p *Message) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "createdTime", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:createdTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.CreatedTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdTime (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:createdTime: ", p), err) }
  return err
}

func (p *Message) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "deliveredTime", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:deliveredTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.DeliveredTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deliveredTime (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:deliveredTime: ", p), err) }
  return err
}

func (p *Message) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "text", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:text: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Text)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.text (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:text: ", p), err) }
  return err
}

func (p *Message) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLocation() {
    if err := oprot.WriteFieldBegin(ctx, "location", thrift.STRUCT, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:location: ", p), err) }
    if err := p.Location.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Location), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:location: ", p), err) }
  }
  return err
}

func (p *Message) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hasContent", thrift.BOOL, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:hasContent: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.HasContent)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hasContent (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:hasContent: ", p), err) }
  return err
}

func (p *Message) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contentType", thrift.I32, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:contentType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ContentType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contentType (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:contentType: ", p), err) }
  return err
}

func (p *Message) writeField17(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contentPreview", thrift.STRING, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:contentPreview: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ContentPreview)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contentPreview (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:contentPreview: ", p), err) }
  return err
}

func (p *Message) writeField18(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contentMetadata", thrift.MAP, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:contentMetadata: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.ContentMetadata)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.ContentMetadata {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:contentMetadata: ", p), err) }
  return err
}

func (p *Message) writeField19(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sessionId", thrift.BYTE, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:sessionId: ", p), err) }
  if err := oprot.WriteByte(ctx, int8(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (19) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:sessionId: ", p), err) }
  return err
}

func (p *Message) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chunks", thrift.LIST, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:chunks: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Chunks)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Chunks {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:chunks: ", p), err) }
  return err
}

func (p *Message) writeField21(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRelatedMessageId() {
    if err := oprot.WriteFieldBegin(ctx, "relatedMessageId", thrift.STRING, 21); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:relatedMessageId: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.RelatedMessageId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.relatedMessageId (21) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 21:relatedMessageId: ", p), err) }
  }
  return err
}

func (p *Message) writeField22(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "messageRelationType", thrift.I32, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:messageRelationType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MessageRelationType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.messageRelationType (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:messageRelationType: ", p), err) }
  return err
}

func (p *Message) writeField23(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "readCount", thrift.I32, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:readCount: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReadCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.readCount (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:readCount: ", p), err) }
  return err
}

func (p *Message) writeField24(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "relatedMessageServiceCode", thrift.I32, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:relatedMessageServiceCode: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RelatedMessageServiceCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.relatedMessageServiceCode (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:relatedMessageServiceCode: ", p), err) }
  return err
}

func (p *Message) writeField25(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "appExtensionType", thrift.I32, 25); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:appExtensionType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.AppExtensionType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appExtensionType (25) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 25:appExtensionType: ", p), err) }
  return err
}

func (p *Message) Equals(other *Message) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p._from != other._from { return false }
  if p.To != other.To { return false }
  if p.ToType != other.ToType { return false }
  if p.ID != other.ID { return false }
  if p.CreatedTime != other.CreatedTime { return false }
  if p.DeliveredTime != other.DeliveredTime { return false }
  if p.Text != other.Text { return false }
  if !p.Location.Equals(other.Location) { return false }
  if p.HasContent != other.HasContent { return false }
  if p.ContentType != other.ContentType { return false }
  if p.ContentPreview != other.ContentPreview { return false }
  if len(p.ContentMetadata) != len(other.ContentMetadata) { return false }
  for k, _tgt := range p.ContentMetadata {
    _src9 := other.ContentMetadata[k]
    if _tgt != _src9 { return false }
  }
  if p.SessionId != other.SessionId { return false }
  if len(p.Chunks) != len(other.Chunks) { return false }
  for i, _tgt := range p.Chunks {
    _src10 := other.Chunks[i]
    if _tgt != _src10 { return false }
  }
  if p.RelatedMessageId != other.RelatedMessageId {
    if p.RelatedMessageId == nil || other.RelatedMessageId == nil {
      return false
    }
    if (*p.RelatedMessageId) != (*other.RelatedMessageId) { return false }
  }
  if p.MessageRelationType != other.MessageRelationType { return false }
  if p.ReadCount != other.ReadCount { return false }
  if p.RelatedMessageServiceCode != other.RelatedMessageServiceCode { return false }
  if p.AppExtensionType != other.AppExtensionType { return false }
  return true
}

func (p *Message) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Message(%+v)", *p)
}

// Attributes:
//  - Revision
//  - CreatedTime
//  - Type
//  - ReqSeq
//  - Checksum
//  - Status
//  - Param1
//  - Param2
//  - Param3
//  - Message
type Operation struct {
  Revision int64 `thrift:"revision,1" db:"revision" json:"revision"`
  CreatedTime int64 `thrift:"createdTime,2" db:"createdTime" json:"createdTime"`
  Type OpType `thrift:"type,3" db:"type" json:"type"`
  ReqSeq int64 `thrift:"reqSeq,4" db:"reqSeq" json:"reqSeq"`
  Checksum string `thrift:"checksum,5" db:"checksum" json:"checksum"`
  // unused field # 6
  Status OpStatus `thrift:"status,7" db:"status" json:"status"`
  // unused fields # 8 to 9
  Param1 string `thrift:"param1,10" db:"param1" json:"param1"`
  Param2 string `thrift:"param2,11" db:"param2" json:"param2"`
  Param3 string `thrift:"param3,12" db:"param3" json:"param3"`
  // unused fields # 13 to 19
  Message *Message `thrift:"message,20" db:"message" json:"message"`
}

func NewOperation() *Operation {
  return &Operation{}
}


func (p *Operation) GetRevision() int64 {
  return p.Revision
}

func (p *Operation) GetCreatedTime() int64 {
  return p.CreatedTime
}

func (p *Operation) GetType() OpType {
  return p.Type
}

func (p *Operation) GetReqSeq() int64 {
  return p.ReqSeq
}

func (p *Operation) GetChecksum() string {
  return p.Checksum
}

func (p *Operation) GetStatus() OpStatus {
  return p.Status
}

func (p *Operation) GetParam1() string {
  return p.Param1
}

func (p *Operation) GetParam2() string {
  return p.Param2
}

func (p *Operation) GetParam3() string {
  return p.Param3
}
var Operation_Message_DEFAULT *Message
func (p *Operation) GetMessage() *Message {
  if !p.IsSetMessage() {
    return Operation_Message_DEFAULT
  }
return p.Message
}
func (p *Operation) IsSetMessage() bool {
  return p.Message != nil
}

func (p *Operation) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Operation)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Revision = v
}
  return nil
}

func (p *Operation)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CreatedTime = v
}
  return nil
}

func (p *Operation)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := OpType(v)
  p.Type = temp
}
  return nil
}

func (p *Operation)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *Operation)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Checksum = v
}
  return nil
}

func (p *Operation)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := OpStatus(v)
  p.Status = temp
}
  return nil
}

func (p *Operation)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Param1 = v
}
  return nil
}

func (p *Operation)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Param2 = v
}
  return nil
}

func (p *Operation)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.Param3 = v
}
  return nil
}

func (p *Operation)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  p.Message = &Message{}
  if err := p.Message.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Message), err)
  }
  return nil
}

func (p *Operation) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Operation"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Operation) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "revision", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:revision: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Revision)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.revision (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:revision: ", p), err) }
  return err
}

func (p *Operation) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "createdTime", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:createdTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.CreatedTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdTime (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:createdTime: ", p), err) }
  return err
}

func (p *Operation) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err) }
  return err
}

func (p *Operation) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:reqSeq: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:reqSeq: ", p), err) }
  return err
}

func (p *Operation) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "checksum", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:checksum: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Checksum)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.checksum (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:checksum: ", p), err) }
  return err
}

func (p *Operation) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:status: ", p), err) }
  return err
}

func (p *Operation) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "param1", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:param1: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Param1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.param1 (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:param1: ", p), err) }
  return err
}

func (p *Operation) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "param2", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:param2: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Param2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.param2 (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:param2: ", p), err) }
  return err
}

func (p *Operation) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "param3", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:param3: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Param3)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.param3 (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:param3: ", p), err) }
  return err
}

func (p *Operation) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRUCT, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:message: ", p), err) }
  if err := p.Message.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Message), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:message: ", p), err) }
  return err
}

func (p *Operation) Equals(other *Operation) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Revision != other.Revision { return false }
  if p.CreatedTime != other.CreatedTime { return false }
  if p.Type != other.Type { return false }
  if p.ReqSeq != other.ReqSeq { return false }
  if p.Checksum != other.Checksum { return false }
  if p.Status != other.Status { return false }
  if p.Param1 != other.Param1 { return false }
  if p.Param2 != other.Param2 { return false }
  if p.Param3 != other.Param3 { return false }
  if !p.Message.Equals(other.Message) { return false }
  return true
}

func (p *Operation) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Operation(%+v)", *p)
}

// Attributes:
//  - Mid
//  - CreatedTime
//  - Contacts
//  - NotificationDisabled
//  - MemberMids
type Room struct {
  Mid string `thrift:"mid,1" db:"mid" json:"mid"`
  CreatedTime int64 `thrift:"createdTime,2" db:"createdTime" json:"createdTime"`
  // unused fields # 3 to 9
  Contacts []*Contact `thrift:"contacts,10" db:"contacts" json:"contacts"`
  // unused fields # 11 to 30
  NotificationDisabled bool `thrift:"notificationDisabled,31" db:"notificationDisabled" json:"notificationDisabled"`
  // unused fields # 32 to 39
  MemberMids []string `thrift:"memberMids,40" db:"memberMids" json:"memberMids"`
}

func NewRoom() *Room {
  return &Room{}
}


func (p *Room) GetMid() string {
  return p.Mid
}

func (p *Room) GetCreatedTime() int64 {
  return p.CreatedTime
}

func (p *Room) GetContacts() []*Contact {
  return p.Contacts
}

func (p *Room) GetNotificationDisabled() bool {
  return p.NotificationDisabled
}

func (p *Room) GetMemberMids() []string {
  return p.MemberMids
}
func (p *Room) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 31:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField31(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 40:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField40(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Room)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *Room)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CreatedTime = v
}
  return nil
}

func (p *Room)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Contact, 0, size)
  p.Contacts =  tSlice
  for i := 0; i < size; i ++ {
    _elem11 := &Contact{}
    if err := _elem11.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem11), err)
    }
    p.Contacts = append(p.Contacts, _elem11)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Room)  ReadField31(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 31: ", err)
} else {
  p.NotificationDisabled = v
}
  return nil
}

func (p *Room)  ReadField40(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.MemberMids =  tSlice
  for i := 0; i < size; i ++ {
var _elem12 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem12 = v
}
    p.MemberMids = append(p.MemberMids, _elem12)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Room) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Room"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField31(ctx, oprot); err != nil { return err }
    if err := p.writeField40(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Room) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mid: ", p), err) }
  return err
}

func (p *Room) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "createdTime", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:createdTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.CreatedTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdTime (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:createdTime: ", p), err) }
  return err
}

func (p *Room) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contacts", thrift.LIST, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:contacts: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Contacts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Contacts {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:contacts: ", p), err) }
  return err
}

func (p *Room) writeField31(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notificationDisabled", thrift.BOOL, 31); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:notificationDisabled: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.NotificationDisabled)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationDisabled (31) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 31:notificationDisabled: ", p), err) }
  return err
}

func (p *Room) writeField40(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "memberMids", thrift.LIST, 40); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:memberMids: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.MemberMids)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.MemberMids {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 40:memberMids: ", p), err) }
  return err
}

func (p *Room) Equals(other *Room) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Mid != other.Mid { return false }
  if p.CreatedTime != other.CreatedTime { return false }
  if len(p.Contacts) != len(other.Contacts) { return false }
  for i, _tgt := range p.Contacts {
    _src13 := other.Contacts[i]
    if !_tgt.Equals(_src13) { return false }
  }
  if p.NotificationDisabled != other.NotificationDisabled { return false }
  if len(p.MemberMids) != len(other.MemberMids) { return false }
  for i, _tgt := range p.MemberMids {
    _src14 := other.MemberMids[i]
    if _tgt != _src14 { return false }
  }
  return true
}

func (p *Room) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Room(%+v)", *p)
}

type UpdateChatResponse struct {
}

func NewUpdateChatResponse() *UpdateChatResponse {
  return &UpdateChatResponse{}
}

func (p *UpdateChatResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdateChatResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UpdateChatResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateChatResponse) Equals(other *UpdateChatResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *UpdateChatResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateChatResponse(%+v)", *p)
}

// Attributes:
//  - Creator
//  - PreventedJoinByTicket
//  - InvitationTicket
//  - MemberMids
//  - InviteeMids
type GroupExtra struct {
  Creator string `thrift:"creator,1" db:"creator" json:"creator"`
  PreventedJoinByTicket bool `thrift:"preventedJoinByTicket,2" db:"preventedJoinByTicket" json:"preventedJoinByTicket"`
  InvitationTicket string `thrift:"invitationTicket,3" db:"invitationTicket" json:"invitationTicket"`
  MemberMids map[string]int64 `thrift:"memberMids,4" db:"memberMids" json:"memberMids"`
  InviteeMids map[string]int64 `thrift:"inviteeMids,5" db:"inviteeMids" json:"inviteeMids"`
}

func NewGroupExtra() *GroupExtra {
  return &GroupExtra{}
}


func (p *GroupExtra) GetCreator() string {
  return p.Creator
}

func (p *GroupExtra) GetPreventedJoinByTicket() bool {
  return p.PreventedJoinByTicket
}

func (p *GroupExtra) GetInvitationTicket() string {
  return p.InvitationTicket
}

func (p *GroupExtra) GetMemberMids() map[string]int64 {
  return p.MemberMids
}

func (p *GroupExtra) GetInviteeMids() map[string]int64 {
  return p.InviteeMids
}
func (p *GroupExtra) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GroupExtra)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Creator = v
}
  return nil
}

func (p *GroupExtra)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PreventedJoinByTicket = v
}
  return nil
}

func (p *GroupExtra)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.InvitationTicket = v
}
  return nil
}

func (p *GroupExtra)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]int64, size)
  p.MemberMids =  tMap
  for i := 0; i < size; i ++ {
var _key15 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key15 = v
}
var _val16 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val16 = v
}
    p.MemberMids[_key15] = _val16
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GroupExtra)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]int64, size)
  p.InviteeMids =  tMap
  for i := 0; i < size; i ++ {
var _key17 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key17 = v
}
var _val18 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val18 = v
}
    p.InviteeMids[_key17] = _val18
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GroupExtra) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GroupExtra"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GroupExtra) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "creator", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:creator: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Creator)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.creator (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:creator: ", p), err) }
  return err
}

func (p *GroupExtra) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "preventedJoinByTicket", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:preventedJoinByTicket: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PreventedJoinByTicket)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.preventedJoinByTicket (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:preventedJoinByTicket: ", p), err) }
  return err
}

func (p *GroupExtra) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "invitationTicket", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:invitationTicket: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.InvitationTicket)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.invitationTicket (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:invitationTicket: ", p), err) }
  return err
}

func (p *GroupExtra) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "memberMids", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:memberMids: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.I64, len(p.MemberMids)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.MemberMids {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:memberMids: ", p), err) }
  return err
}

func (p *GroupExtra) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "inviteeMids", thrift.MAP, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:inviteeMids: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.I64, len(p.InviteeMids)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.InviteeMids {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:inviteeMids: ", p), err) }
  return err
}

func (p *GroupExtra) Equals(other *GroupExtra) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Creator != other.Creator { return false }
  if p.PreventedJoinByTicket != other.PreventedJoinByTicket { return false }
  if p.InvitationTicket != other.InvitationTicket { return false }
  if len(p.MemberMids) != len(other.MemberMids) { return false }
  for k, _tgt := range p.MemberMids {
    _src19 := other.MemberMids[k]
    if _tgt != _src19 { return false }
  }
  if len(p.InviteeMids) != len(other.InviteeMids) { return false }
  for k, _tgt := range p.InviteeMids {
    _src20 := other.InviteeMids[k]
    if _tgt != _src20 { return false }
  }
  return true
}

func (p *GroupExtra) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GroupExtra(%+v)", *p)
}

type PeerExtra struct {
}

func NewPeerExtra() *PeerExtra {
  return &PeerExtra{}
}

func (p *PeerExtra) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PeerExtra) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PeerExtra"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PeerExtra) Equals(other *PeerExtra) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *PeerExtra) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PeerExtra(%+v)", *p)
}

// Attributes:
//  - GroupExtra
//  - PeerExtra
type Extra struct {
  GroupExtra *GroupExtra `thrift:"groupExtra,1" db:"groupExtra" json:"groupExtra"`
  PeerExtra *PeerExtra `thrift:"peerExtra,2" db:"peerExtra" json:"peerExtra"`
}

func NewExtra() *Extra {
  return &Extra{}
}

var Extra_GroupExtra_DEFAULT *GroupExtra
func (p *Extra) GetGroupExtra() *GroupExtra {
  if !p.IsSetGroupExtra() {
    return Extra_GroupExtra_DEFAULT
  }
return p.GroupExtra
}
var Extra_PeerExtra_DEFAULT *PeerExtra
func (p *Extra) GetPeerExtra() *PeerExtra {
  if !p.IsSetPeerExtra() {
    return Extra_PeerExtra_DEFAULT
  }
return p.PeerExtra
}
func (p *Extra) IsSetGroupExtra() bool {
  return p.GroupExtra != nil
}

func (p *Extra) IsSetPeerExtra() bool {
  return p.PeerExtra != nil
}

func (p *Extra) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Extra)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.GroupExtra = &GroupExtra{}
  if err := p.GroupExtra.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GroupExtra), err)
  }
  return nil
}

func (p *Extra)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.PeerExtra = &PeerExtra{}
  if err := p.PeerExtra.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PeerExtra), err)
  }
  return nil
}

func (p *Extra) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Extra"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Extra) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "groupExtra", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:groupExtra: ", p), err) }
  if err := p.GroupExtra.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GroupExtra), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:groupExtra: ", p), err) }
  return err
}

func (p *Extra) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "peerExtra", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:peerExtra: ", p), err) }
  if err := p.PeerExtra.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PeerExtra), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:peerExtra: ", p), err) }
  return err
}

func (p *Extra) Equals(other *Extra) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.GroupExtra.Equals(other.GroupExtra) { return false }
  if !p.PeerExtra.Equals(other.PeerExtra) { return false }
  return true
}

func (p *Extra) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Extra(%+v)", *p)
}

// Attributes:
//  - Type
//  - ChatMid
//  - CreatedTime
//  - NotificationDisabled
//  - FavoriteTimestamp
//  - ChatName
//  - PicturePath
//  - Extra
type Chat struct {
  Type ChatType `thrift:"type,1" db:"type" json:"type"`
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
  CreatedTime int64 `thrift:"createdTime,3" db:"createdTime" json:"createdTime"`
  NotificationDisabled bool `thrift:"notificationDisabled,4" db:"notificationDisabled" json:"notificationDisabled"`
  FavoriteTimestamp int64 `thrift:"favoriteTimestamp,5" db:"favoriteTimestamp" json:"favoriteTimestamp"`
  ChatName string `thrift:"chatName,6" db:"chatName" json:"chatName"`
  PicturePath string `thrift:"picturePath,7" db:"picturePath" json:"picturePath"`
  Extra *Extra `thrift:"extra,8" db:"extra" json:"extra"`
}

func NewChat() *Chat {
  return &Chat{}
}


func (p *Chat) GetType() ChatType {
  return p.Type
}

func (p *Chat) GetChatMid() string {
  return p.ChatMid
}

func (p *Chat) GetCreatedTime() int64 {
  return p.CreatedTime
}

func (p *Chat) GetNotificationDisabled() bool {
  return p.NotificationDisabled
}

func (p *Chat) GetFavoriteTimestamp() int64 {
  return p.FavoriteTimestamp
}

func (p *Chat) GetChatName() string {
  return p.ChatName
}

func (p *Chat) GetPicturePath() string {
  return p.PicturePath
}
var Chat_Extra_DEFAULT *Extra
func (p *Chat) GetExtra() *Extra {
  if !p.IsSetExtra() {
    return Chat_Extra_DEFAULT
  }
return p.Extra
}
func (p *Chat) IsSetExtra() bool {
  return p.Extra != nil
}

func (p *Chat) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Chat)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ChatType(v)
  p.Type = temp
}
  return nil
}

func (p *Chat)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *Chat)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.CreatedTime = v
}
  return nil
}

func (p *Chat)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NotificationDisabled = v
}
  return nil
}

func (p *Chat)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.FavoriteTimestamp = v
}
  return nil
}

func (p *Chat)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ChatName = v
}
  return nil
}

func (p *Chat)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.PicturePath = v
}
  return nil
}

func (p *Chat)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  p.Extra = &Extra{}
  if err := p.Extra.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Extra), err)
  }
  return nil
}

func (p *Chat) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Chat"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Chat) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *Chat) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *Chat) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "createdTime", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:createdTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.CreatedTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdTime (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:createdTime: ", p), err) }
  return err
}

func (p *Chat) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notificationDisabled", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:notificationDisabled: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.NotificationDisabled)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationDisabled (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:notificationDisabled: ", p), err) }
  return err
}

func (p *Chat) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "favoriteTimestamp", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:favoriteTimestamp: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FavoriteTimestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.favoriteTimestamp (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:favoriteTimestamp: ", p), err) }
  return err
}

func (p *Chat) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatName", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:chatName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatName (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:chatName: ", p), err) }
  return err
}

func (p *Chat) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "picturePath", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:picturePath: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PicturePath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.picturePath (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:picturePath: ", p), err) }
  return err
}

func (p *Chat) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "extra", thrift.STRUCT, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:extra: ", p), err) }
  if err := p.Extra.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Extra), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:extra: ", p), err) }
  return err
}

func (p *Chat) Equals(other *Chat) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Type != other.Type { return false }
  if p.ChatMid != other.ChatMid { return false }
  if p.CreatedTime != other.CreatedTime { return false }
  if p.NotificationDisabled != other.NotificationDisabled { return false }
  if p.FavoriteTimestamp != other.FavoriteTimestamp { return false }
  if p.ChatName != other.ChatName { return false }
  if p.PicturePath != other.PicturePath { return false }
  if !p.Extra.Equals(other.Extra) { return false }
  return true
}

func (p *Chat) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Chat(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Chat
//  - UpdatedAttribute
type UpdateChatRequest struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  Chat *Chat `thrift:"chat,2" db:"chat" json:"chat"`
  UpdatedAttribute ChatAttribute `thrift:"updatedAttribute,3" db:"updatedAttribute" json:"updatedAttribute"`
}

func NewUpdateChatRequest() *UpdateChatRequest {
  return &UpdateChatRequest{}
}


func (p *UpdateChatRequest) GetReqSeq() int32 {
  return p.ReqSeq
}
var UpdateChatRequest_Chat_DEFAULT *Chat
func (p *UpdateChatRequest) GetChat() *Chat {
  if !p.IsSetChat() {
    return UpdateChatRequest_Chat_DEFAULT
  }
return p.Chat
}

func (p *UpdateChatRequest) GetUpdatedAttribute() ChatAttribute {
  return p.UpdatedAttribute
}
func (p *UpdateChatRequest) IsSetChat() bool {
  return p.Chat != nil
}

func (p *UpdateChatRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdateChatRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *UpdateChatRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Chat = &Chat{}
  if err := p.Chat.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Chat), err)
  }
  return nil
}

func (p *UpdateChatRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := ChatAttribute(v)
  p.UpdatedAttribute = temp
}
  return nil
}

func (p *UpdateChatRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "UpdateChatRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateChatRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *UpdateChatRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chat", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chat: ", p), err) }
  if err := p.Chat.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Chat), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chat: ", p), err) }
  return err
}

func (p *UpdateChatRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "updatedAttribute", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:updatedAttribute: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.UpdatedAttribute)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updatedAttribute (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:updatedAttribute: ", p), err) }
  return err
}

func (p *UpdateChatRequest) Equals(other *UpdateChatRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ReqSeq != other.ReqSeq { return false }
  if !p.Chat.Equals(other.Chat) { return false }
  if p.UpdatedAttribute != other.UpdatedAttribute { return false }
  return true
}

func (p *UpdateChatRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateChatRequest(%+v)", *p)
}

// Attributes:
//  - Chats
type GetChatsResponse struct {
  Chats []*Chat `thrift:"chats,1" db:"chats" json:"chats"`
}

func NewGetChatsResponse() *GetChatsResponse {
  return &GetChatsResponse{}
}


func (p *GetChatsResponse) GetChats() []*Chat {
  return p.Chats
}
func (p *GetChatsResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetChatsResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Chat, 0, size)
  p.Chats =  tSlice
  for i := 0; i < size; i ++ {
    _elem21 := &Chat{}
    if err := _elem21.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem21), err)
    }
    p.Chats = append(p.Chats, _elem21)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetChatsResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetChatsResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetChatsResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chats", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:chats: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Chats)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Chats {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:chats: ", p), err) }
  return err
}

func (p *GetChatsResponse) Equals(other *GetChatsResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Chats) != len(other.Chats) { return false }
  for i, _tgt := range p.Chats {
    _src22 := other.Chats[i]
    if !_tgt.Equals(_src22) { return false }
  }
  return true
}

func (p *GetChatsResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetChatsResponse(%+v)", *p)
}

// Attributes:
//  - ChatMids
//  - WithMembers
//  - WithInvitees
type GetChatsRequest struct {
  ChatMids []string `thrift:"chatMids,1" db:"chatMids" json:"chatMids"`
  WithMembers bool `thrift:"withMembers,2" db:"withMembers" json:"withMembers"`
  WithInvitees bool `thrift:"withInvitees,3" db:"withInvitees" json:"withInvitees"`
}

func NewGetChatsRequest() *GetChatsRequest {
  return &GetChatsRequest{}
}


func (p *GetChatsRequest) GetChatMids() []string {
  return p.ChatMids
}

func (p *GetChatsRequest) GetWithMembers() bool {
  return p.WithMembers
}

func (p *GetChatsRequest) GetWithInvitees() bool {
  return p.WithInvitees
}
func (p *GetChatsRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetChatsRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ChatMids =  tSlice
  for i := 0; i < size; i ++ {
var _elem23 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem23 = v
}
    p.ChatMids = append(p.ChatMids, _elem23)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetChatsRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.WithMembers = v
}
  return nil
}

func (p *GetChatsRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.WithInvitees = v
}
  return nil
}

func (p *GetChatsRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetChatsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetChatsRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMids", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:chatMids: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.ChatMids)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ChatMids {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:chatMids: ", p), err) }
  return err
}

func (p *GetChatsRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "withMembers", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:withMembers: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.WithMembers)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.withMembers (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:withMembers: ", p), err) }
  return err
}

func (p *GetChatsRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "withInvitees", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:withInvitees: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.WithInvitees)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.withInvitees (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:withInvitees: ", p), err) }
  return err
}

func (p *GetChatsRequest) Equals(other *GetChatsRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.ChatMids) != len(other.ChatMids) { return false }
  for i, _tgt := range p.ChatMids {
    _src24 := other.ChatMids[i]
    if _tgt != _src24 { return false }
  }
  if p.WithMembers != other.WithMembers { return false }
  if p.WithInvitees != other.WithInvitees { return false }
  return true
}

func (p *GetChatsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetChatsRequest(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - GroupMid
type ReissueChatTicketRequest struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  GroupMid string `thrift:"groupMid,2" db:"groupMid" json:"groupMid"`
}

func NewReissueChatTicketRequest() *ReissueChatTicketRequest {
  return &ReissueChatTicketRequest{}
}


func (p *ReissueChatTicketRequest) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *ReissueChatTicketRequest) GetGroupMid() string {
  return p.GroupMid
}
func (p *ReissueChatTicketRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReissueChatTicketRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *ReissueChatTicketRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GroupMid = v
}
  return nil
}

func (p *ReissueChatTicketRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReissueChatTicketRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReissueChatTicketRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *ReissueChatTicketRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "groupMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.GroupMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupMid: ", p), err) }
  return err
}

func (p *ReissueChatTicketRequest) Equals(other *ReissueChatTicketRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ReqSeq != other.ReqSeq { return false }
  if p.GroupMid != other.GroupMid { return false }
  return true
}

func (p *ReissueChatTicketRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReissueChatTicketRequest(%+v)", *p)
}

// Attributes:
//  - TicketId
type ReissueChatTicketResponse struct {
  TicketId string `thrift:"ticketId,1" db:"ticketId" json:"ticketId"`
}

func NewReissueChatTicketResponse() *ReissueChatTicketResponse {
  return &ReissueChatTicketResponse{}
}


func (p *ReissueChatTicketResponse) GetTicketId() string {
  return p.TicketId
}
func (p *ReissueChatTicketResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReissueChatTicketResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TicketId = v
}
  return nil
}

func (p *ReissueChatTicketResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReissueChatTicketResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReissueChatTicketResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ticketId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ticketId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TicketId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ticketId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ticketId: ", p), err) }
  return err
}

func (p *ReissueChatTicketResponse) Equals(other *ReissueChatTicketResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.TicketId != other.TicketId { return false }
  return true
}

func (p *ReissueChatTicketResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReissueChatTicketResponse(%+v)", *p)
}

// Attributes:
//  - Version
//  - KeyId
//  - KeyData
//  - CreatedTime
type E2EEPublicKey struct {
  Version int32 `thrift:"version,1" db:"version" json:"version"`
  KeyId int32 `thrift:"keyId,2" db:"keyId" json:"keyId"`
  // unused field # 3
  KeyData string `thrift:"keyData,4" db:"keyData" json:"keyData"`
  CreatedTime int64 `thrift:"createdTime,5" db:"createdTime" json:"createdTime"`
}

func NewE2EEPublicKey() *E2EEPublicKey {
  return &E2EEPublicKey{}
}


func (p *E2EEPublicKey) GetVersion() int32 {
  return p.Version
}

func (p *E2EEPublicKey) GetKeyId() int32 {
  return p.KeyId
}

func (p *E2EEPublicKey) GetKeyData() string {
  return p.KeyData
}

func (p *E2EEPublicKey) GetCreatedTime() int64 {
  return p.CreatedTime
}
func (p *E2EEPublicKey) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *E2EEPublicKey)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Version = v
}
  return nil
}

func (p *E2EEPublicKey)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.KeyId = v
}
  return nil
}

func (p *E2EEPublicKey)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.KeyData = v
}
  return nil
}

func (p *E2EEPublicKey)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CreatedTime = v
}
  return nil
}

func (p *E2EEPublicKey) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "E2EEPublicKey"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *E2EEPublicKey) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "version", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:version: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:version: ", p), err) }
  return err
}

func (p *E2EEPublicKey) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keyId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:keyId: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.KeyId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keyId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:keyId: ", p), err) }
  return err
}

func (p *E2EEPublicKey) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keyData", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:keyData: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.KeyData)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keyData (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:keyData: ", p), err) }
  return err
}

func (p *E2EEPublicKey) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "createdTime", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:createdTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.CreatedTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdTime (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:createdTime: ", p), err) }
  return err
}

func (p *E2EEPublicKey) Equals(other *E2EEPublicKey) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Version != other.Version { return false }
  if p.KeyId != other.KeyId { return false }
  if p.KeyData != other.KeyData { return false }
  if p.CreatedTime != other.CreatedTime { return false }
  return true
}

func (p *E2EEPublicKey) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("E2EEPublicKey(%+v)", *p)
}

// Attributes:
//  - KeyVersion
//  - GroupKeyId
//  - Creator
//  - CreatorKeyId
//  - Receiver
//  - ReceiverKeyId
//  - EncryptedSharedKey
//  - AllowedTypes
//  - SpecVersion
type E2EEGroupSharedKey struct {
  KeyVersion int32 `thrift:"keyVersion,1" db:"keyVersion" json:"keyVersion"`
  GroupKeyId int32 `thrift:"groupKeyId,2" db:"groupKeyId" json:"groupKeyId"`
  Creator string `thrift:"creator,3" db:"creator" json:"creator"`
  CreatorKeyId int32 `thrift:"creatorKeyId,4" db:"creatorKeyId" json:"creatorKeyId"`
  Receiver string `thrift:"receiver,5" db:"receiver" json:"receiver"`
  ReceiverKeyId int32 `thrift:"receiverKeyId,6" db:"receiverKeyId" json:"receiverKeyId"`
  EncryptedSharedKey string `thrift:"encryptedSharedKey,7" db:"encryptedSharedKey" json:"encryptedSharedKey"`
  AllowedTypes []ContentType `thrift:"allowedTypes,8" db:"allowedTypes" json:"allowedTypes"`
  SpecVersion int32 `thrift:"specVersion,9" db:"specVersion" json:"specVersion"`
}

func NewE2EEGroupSharedKey() *E2EEGroupSharedKey {
  return &E2EEGroupSharedKey{}
}


func (p *E2EEGroupSharedKey) GetKeyVersion() int32 {
  return p.KeyVersion
}

func (p *E2EEGroupSharedKey) GetGroupKeyId() int32 {
  return p.GroupKeyId
}

func (p *E2EEGroupSharedKey) GetCreator() string {
  return p.Creator
}

func (p *E2EEGroupSharedKey) GetCreatorKeyId() int32 {
  return p.CreatorKeyId
}

func (p *E2EEGroupSharedKey) GetReceiver() string {
  return p.Receiver
}

func (p *E2EEGroupSharedKey) GetReceiverKeyId() int32 {
  return p.ReceiverKeyId
}

func (p *E2EEGroupSharedKey) GetEncryptedSharedKey() string {
  return p.EncryptedSharedKey
}

func (p *E2EEGroupSharedKey) GetAllowedTypes() []ContentType {
  return p.AllowedTypes
}

func (p *E2EEGroupSharedKey) GetSpecVersion() int32 {
  return p.SpecVersion
}
func (p *E2EEGroupSharedKey) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *E2EEGroupSharedKey)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.KeyVersion = v
}
  return nil
}

func (p *E2EEGroupSharedKey)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GroupKeyId = v
}
  return nil
}

func (p *E2EEGroupSharedKey)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Creator = v
}
  return nil
}

func (p *E2EEGroupSharedKey)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.CreatorKeyId = v
}
  return nil
}

func (p *E2EEGroupSharedKey)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Receiver = v
}
  return nil
}

func (p *E2EEGroupSharedKey)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ReceiverKeyId = v
}
  return nil
}

func (p *E2EEGroupSharedKey)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.EncryptedSharedKey = v
}
  return nil
}

func (p *E2EEGroupSharedKey)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]ContentType, 0, size)
  p.AllowedTypes =  tSet
  for i := 0; i < size; i ++ {
var _elem25 ContentType
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := ContentType(v)
    _elem25 = temp
}
    p.AllowedTypes = append(p.AllowedTypes, _elem25)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *E2EEGroupSharedKey)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.SpecVersion = v
}
  return nil
}

func (p *E2EEGroupSharedKey) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "E2EEGroupSharedKey"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *E2EEGroupSharedKey) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keyVersion", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:keyVersion: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.KeyVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keyVersion (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:keyVersion: ", p), err) }
  return err
}

func (p *E2EEGroupSharedKey) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "groupKeyId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupKeyId: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.GroupKeyId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupKeyId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupKeyId: ", p), err) }
  return err
}

func (p *E2EEGroupSharedKey) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "creator", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:creator: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Creator)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.creator (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:creator: ", p), err) }
  return err
}

func (p *E2EEGroupSharedKey) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "creatorKeyId", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:creatorKeyId: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.CreatorKeyId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.creatorKeyId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:creatorKeyId: ", p), err) }
  return err
}

func (p *E2EEGroupSharedKey) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "receiver", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:receiver: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Receiver)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.receiver (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:receiver: ", p), err) }
  return err
}

func (p *E2EEGroupSharedKey) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "receiverKeyId", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:receiverKeyId: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReceiverKeyId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.receiverKeyId (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:receiverKeyId: ", p), err) }
  return err
}

func (p *E2EEGroupSharedKey) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "encryptedSharedKey", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:encryptedSharedKey: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.EncryptedSharedKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.encryptedSharedKey (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:encryptedSharedKey: ", p), err) }
  return err
}

func (p *E2EEGroupSharedKey) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "allowedTypes", thrift.SET, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:allowedTypes: ", p), err) }
  if err := oprot.WriteSetBegin(ctx, thrift.I32, len(p.AllowedTypes)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.AllowedTypes); i++ {
    for j := i+1; j<len(p.AllowedTypes); j++ {
      if func(tgt, src ContentType) bool {
        if tgt != src { return false }
        return true
      }(p.AllowedTypes[i], p.AllowedTypes[j]) {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.AllowedTypes))
      }
    }
  }
  for _, v := range p.AllowedTypes {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(ctx); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:allowedTypes: ", p), err) }
  return err
}

func (p *E2EEGroupSharedKey) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "specVersion", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:specVersion: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpecVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.specVersion (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:specVersion: ", p), err) }
  return err
}

func (p *E2EEGroupSharedKey) Equals(other *E2EEGroupSharedKey) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.KeyVersion != other.KeyVersion { return false }
  if p.GroupKeyId != other.GroupKeyId { return false }
  if p.Creator != other.Creator { return false }
  if p.CreatorKeyId != other.CreatorKeyId { return false }
  if p.Receiver != other.Receiver { return false }
  if p.ReceiverKeyId != other.ReceiverKeyId { return false }
  if p.EncryptedSharedKey != other.EncryptedSharedKey { return false }
  if len(p.AllowedTypes) != len(other.AllowedTypes) { return false }
  for i, _tgt := range p.AllowedTypes {
    _src26 := other.AllowedTypes[i]
    if _tgt != _src26 { return false }
  }
  if p.SpecVersion != other.SpecVersion { return false }
  return true
}

func (p *E2EEGroupSharedKey) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("E2EEGroupSharedKey(%+v)", *p)
}

// Attributes:
//  - Revision
//  - ConfigMap
type Configurations struct {
  Revision int64 `thrift:"revision,1" db:"revision" json:"revision"`
  ConfigMap map[string]string `thrift:"configMap,2" db:"configMap" json:"configMap"`
}

func NewConfigurations() *Configurations {
  return &Configurations{}
}


func (p *Configurations) GetRevision() int64 {
  return p.Revision
}

func (p *Configurations) GetConfigMap() map[string]string {
  return p.ConfigMap
}
func (p *Configurations) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Configurations)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Revision = v
}
  return nil
}

func (p *Configurations)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.ConfigMap =  tMap
  for i := 0; i < size; i ++ {
var _key27 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key27 = v
}
var _val28 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val28 = v
}
    p.ConfigMap[_key27] = _val28
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Configurations) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Configurations"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Configurations) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "revision", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:revision: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Revision)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.revision (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:revision: ", p), err) }
  return err
}

func (p *Configurations) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "configMap", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:configMap: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.ConfigMap)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.ConfigMap {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:configMap: ", p), err) }
  return err
}

func (p *Configurations) Equals(other *Configurations) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Revision != other.Revision { return false }
  if len(p.ConfigMap) != len(other.ConfigMap) { return false }
  for k, _tgt := range p.ConfigMap {
    _src29 := other.ConfigMap[k]
    if _tgt != _src29 { return false }
  }
  return true
}

func (p *Configurations) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Configurations(%+v)", *p)
}

// Attributes:
//  - Email
//  - DisplayName
//  - PhoneticName
//  - PictureStatus
//  - ThumbnailUrl
//  - StatusMessage
//  - AllowSearchByUserid
//  - AllowSearchByEmail
//  - PicturePath
//  - MusicProfile
//  - VideoProfile
//  - StatusMessageContentMetadata
//  - AvatarProfile
//  - Mid
//  - Userid
//  - RegionCode
//  - Phone
type Profile struct {
  Mid string `thrift:"mid,1" db:"mid" json:"mid"`
  // unused field # 2
  Userid string `thrift:"userid,3" db:"userid" json:"userid"`
  // unused fields # 4 to 9
  Phone string `thrift:"phone,10" db:"phone" json:"phone"`
  Email string `thrift:"email,11" db:"email" json:"email"`
  RegionCode string `thrift:"regionCode,12" db:"regionCode" json:"regionCode"`
  // unused fields # 13 to 19
  DisplayName string `thrift:"displayName,20" db:"displayName" json:"displayName"`
  PhoneticName string `thrift:"phoneticName,21" db:"phoneticName" json:"phoneticName"`
  PictureStatus string `thrift:"pictureStatus,22" db:"pictureStatus" json:"pictureStatus"`
  ThumbnailUrl string `thrift:"thumbnailUrl,23" db:"thumbnailUrl" json:"thumbnailUrl"`
  StatusMessage string `thrift:"statusMessage,24" db:"statusMessage" json:"statusMessage"`
  // unused fields # 25 to 30
  AllowSearchByUserid bool `thrift:"allowSearchByUserid,31" db:"allowSearchByUserid" json:"allowSearchByUserid"`
  AllowSearchByEmail bool `thrift:"allowSearchByEmail,32" db:"allowSearchByEmail" json:"allowSearchByEmail"`
  PicturePath string `thrift:"picturePath,33" db:"picturePath" json:"picturePath"`
  MusicProfile string `thrift:"musicProfile,34" db:"musicProfile" json:"musicProfile"`
  VideoProfile string `thrift:"videoProfile,35" db:"videoProfile" json:"videoProfile"`
  StatusMessageContentMetadata map[string]string `thrift:"statusMessageContentMetadata,36" db:"statusMessageContentMetadata" json:"statusMessageContentMetadata"`
  AvatarProfile *AvatarProfile `thrift:"avatarProfile,37" db:"avatarProfile" json:"avatarProfile"`
}

func NewProfile() *Profile {
  return &Profile{}
}


func (p *Profile) GetEmail() string {
  return p.Email
}

func (p *Profile) GetDisplayName() string {
  return p.DisplayName
}

func (p *Profile) GetPhoneticName() string {
  return p.PhoneticName
}

func (p *Profile) GetPictureStatus() string {
  return p.PictureStatus
}

func (p *Profile) GetThumbnailUrl() string {
  return p.ThumbnailUrl
}

func (p *Profile) GetStatusMessage() string {
  return p.StatusMessage
}

func (p *Profile) GetAllowSearchByUserid() bool {
  return p.AllowSearchByUserid
}

func (p *Profile) GetAllowSearchByEmail() bool {
  return p.AllowSearchByEmail
}

func (p *Profile) GetPicturePath() string {
  return p.PicturePath
}

func (p *Profile) GetMusicProfile() string {
  return p.MusicProfile
}

func (p *Profile) GetVideoProfile() string {
  return p.VideoProfile
}

func (p *Profile) GetStatusMessageContentMetadata() map[string]string {
  return p.StatusMessageContentMetadata
}
var Profile_AvatarProfile_DEFAULT *AvatarProfile
func (p *Profile) GetAvatarProfile() *AvatarProfile {
  if !p.IsSetAvatarProfile() {
    return Profile_AvatarProfile_DEFAULT
  }
return p.AvatarProfile
}

func (p *Profile) GetMid() string {
  return p.Mid
}

func (p *Profile) GetUserid() string {
  return p.Userid
}

func (p *Profile) GetRegionCode() string {
  return p.RegionCode
}

func (p *Profile) GetPhone() string {
  return p.Phone
}
func (p *Profile) IsSetAvatarProfile() bool {
  return p.AvatarProfile != nil
}

func (p *Profile) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField21(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField22(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField23(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField24(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 31:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField31(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 32:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField32(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 33:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField33(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 34:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField34(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 35:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField35(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 36:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField36(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 37:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField37(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Profile)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *Profile)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.DisplayName = v
}
  return nil
}

func (p *Profile)  ReadField21(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.PhoneticName = v
}
  return nil
}

func (p *Profile)  ReadField22(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.PictureStatus = v
}
  return nil
}

func (p *Profile)  ReadField23(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.ThumbnailUrl = v
}
  return nil
}

func (p *Profile)  ReadField24(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.StatusMessage = v
}
  return nil
}

func (p *Profile)  ReadField31(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 31: ", err)
} else {
  p.AllowSearchByUserid = v
}
  return nil
}

func (p *Profile)  ReadField32(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 32: ", err)
} else {
  p.AllowSearchByEmail = v
}
  return nil
}

func (p *Profile)  ReadField33(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 33: ", err)
} else {
  p.PicturePath = v
}
  return nil
}

func (p *Profile)  ReadField34(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 34: ", err)
} else {
  p.MusicProfile = v
}
  return nil
}

func (p *Profile)  ReadField35(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 35: ", err)
} else {
  p.VideoProfile = v
}
  return nil
}

func (p *Profile)  ReadField36(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.StatusMessageContentMetadata =  tMap
  for i := 0; i < size; i ++ {
var _key30 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key30 = v
}
var _val31 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val31 = v
}
    p.StatusMessageContentMetadata[_key30] = _val31
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Profile)  ReadField37(ctx context.Context, iprot thrift.TProtocol) error {
  p.AvatarProfile = &AvatarProfile{}
  if err := p.AvatarProfile.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AvatarProfile), err)
  }
  return nil
}

func (p *Profile)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *Profile)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Userid = v
}
  return nil
}

func (p *Profile)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.RegionCode = v
}
  return nil
}

func (p *Profile)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Phone = v
}
  return nil
}

func (p *Profile) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Profile"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
    if err := p.writeField21(ctx, oprot); err != nil { return err }
    if err := p.writeField22(ctx, oprot); err != nil { return err }
    if err := p.writeField23(ctx, oprot); err != nil { return err }
    if err := p.writeField24(ctx, oprot); err != nil { return err }
    if err := p.writeField31(ctx, oprot); err != nil { return err }
    if err := p.writeField32(ctx, oprot); err != nil { return err }
    if err := p.writeField33(ctx, oprot); err != nil { return err }
    if err := p.writeField34(ctx, oprot); err != nil { return err }
    if err := p.writeField35(ctx, oprot); err != nil { return err }
    if err := p.writeField36(ctx, oprot); err != nil { return err }
    if err := p.writeField37(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Profile) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mid: ", p), err) }
  return err
}

func (p *Profile) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "userid", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:userid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Userid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:userid: ", p), err) }
  return err
}

func (p *Profile) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "phone", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:phone: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Phone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phone (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:phone: ", p), err) }
  return err
}

func (p *Profile) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "email", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:email: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:email: ", p), err) }
  return err
}

func (p *Profile) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "regionCode", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:regionCode: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RegionCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.regionCode (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:regionCode: ", p), err) }
  return err
}

func (p *Profile) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "displayName", thrift.STRING, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:displayName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DisplayName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.displayName (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:displayName: ", p), err) }
  return err
}

func (p *Profile) writeField21(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "phoneticName", thrift.STRING, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:phoneticName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PhoneticName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phoneticName (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:phoneticName: ", p), err) }
  return err
}

func (p *Profile) writeField22(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pictureStatus", thrift.STRING, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:pictureStatus: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PictureStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pictureStatus (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:pictureStatus: ", p), err) }
  return err
}

func (p *Profile) writeField23(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "thumbnailUrl", thrift.STRING, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:thumbnailUrl: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ThumbnailUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.thumbnailUrl (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:thumbnailUrl: ", p), err) }
  return err
}

func (p *Profile) writeField24(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "statusMessage", thrift.STRING, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:statusMessage: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.StatusMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.statusMessage (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:statusMessage: ", p), err) }
  return err
}

func (p *Profile) writeField31(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "allowSearchByUserid", thrift.BOOL, 31); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:allowSearchByUserid: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.AllowSearchByUserid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.allowSearchByUserid (31) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 31:allowSearchByUserid: ", p), err) }
  return err
}

func (p *Profile) writeField32(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "allowSearchByEmail", thrift.BOOL, 32); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:allowSearchByEmail: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.AllowSearchByEmail)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.allowSearchByEmail (32) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 32:allowSearchByEmail: ", p), err) }
  return err
}

func (p *Profile) writeField33(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "picturePath", thrift.STRING, 33); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 33:picturePath: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PicturePath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.picturePath (33) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 33:picturePath: ", p), err) }
  return err
}

func (p *Profile) writeField34(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "musicProfile", thrift.STRING, 34); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 34:musicProfile: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MusicProfile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.musicProfile (34) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 34:musicProfile: ", p), err) }
  return err
}

func (p *Profile) writeField35(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "videoProfile", thrift.STRING, 35); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 35:videoProfile: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.VideoProfile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.videoProfile (35) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 35:videoProfile: ", p), err) }
  return err
}

func (p *Profile) writeField36(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "statusMessageContentMetadata", thrift.MAP, 36); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 36:statusMessageContentMetadata: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.StatusMessageContentMetadata)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.StatusMessageContentMetadata {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 36:statusMessageContentMetadata: ", p), err) }
  return err
}

func (p *Profile) writeField37(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "avatarProfile", thrift.STRUCT, 37); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 37:avatarProfile: ", p), err) }
  if err := p.AvatarProfile.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AvatarProfile), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 37:avatarProfile: ", p), err) }
  return err
}

func (p *Profile) Equals(other *Profile) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Mid != other.Mid { return false }
  if p.Userid != other.Userid { return false }
  if p.Phone != other.Phone { return false }
  if p.Email != other.Email { return false }
  if p.RegionCode != other.RegionCode { return false }
  if p.DisplayName != other.DisplayName { return false }
  if p.PhoneticName != other.PhoneticName { return false }
  if p.PictureStatus != other.PictureStatus { return false }
  if p.ThumbnailUrl != other.ThumbnailUrl { return false }
  if p.StatusMessage != other.StatusMessage { return false }
  if p.AllowSearchByUserid != other.AllowSearchByUserid { return false }
  if p.AllowSearchByEmail != other.AllowSearchByEmail { return false }
  if p.PicturePath != other.PicturePath { return false }
  if p.MusicProfile != other.MusicProfile { return false }
  if p.VideoProfile != other.VideoProfile { return false }
  if len(p.StatusMessageContentMetadata) != len(other.StatusMessageContentMetadata) { return false }
  for k, _tgt := range p.StatusMessageContentMetadata {
    _src32 := other.StatusMessageContentMetadata[k]
    if _tgt != _src32 { return false }
  }
  if !p.AvatarProfile.Equals(other.AvatarProfile) { return false }
  return true
}

func (p *Profile) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Profile(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - Method
//  - Callback
//  - NormalizedPhone
//  - CountryCode
//  - NationalSignificantNumber
//  - AvailableVerificationMethods
//  - CallerIdMask
type VerificationSessionData struct {
  SessionId string `thrift:"sessionId,1" db:"sessionId" json:"sessionId"`
  Method VerificationMethod `thrift:"method,2" db:"method" json:"method"`
  Callback string `thrift:"callback,3" db:"callback" json:"callback"`
  NormalizedPhone string `thrift:"normalizedPhone,4" db:"normalizedPhone" json:"normalizedPhone"`
  CountryCode string `thrift:"countryCode,5" db:"countryCode" json:"countryCode"`
  NationalSignificantNumber string `thrift:"nationalSignificantNumber,6" db:"nationalSignificantNumber" json:"nationalSignificantNumber"`
  AvailableVerificationMethods []VerificationMethod `thrift:"availableVerificationMethods,7" db:"availableVerificationMethods" json:"availableVerificationMethods"`
  CallerIdMask string `thrift:"callerIdMask,8" db:"callerIdMask" json:"callerIdMask"`
}

func NewVerificationSessionData() *VerificationSessionData {
  return &VerificationSessionData{}
}


func (p *VerificationSessionData) GetSessionId() string {
  return p.SessionId
}

func (p *VerificationSessionData) GetMethod() VerificationMethod {
  return p.Method
}

func (p *VerificationSessionData) GetCallback() string {
  return p.Callback
}

func (p *VerificationSessionData) GetNormalizedPhone() string {
  return p.NormalizedPhone
}

func (p *VerificationSessionData) GetCountryCode() string {
  return p.CountryCode
}

func (p *VerificationSessionData) GetNationalSignificantNumber() string {
  return p.NationalSignificantNumber
}

func (p *VerificationSessionData) GetAvailableVerificationMethods() []VerificationMethod {
  return p.AvailableVerificationMethods
}

func (p *VerificationSessionData) GetCallerIdMask() string {
  return p.CallerIdMask
}
func (p *VerificationSessionData) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VerificationSessionData)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *VerificationSessionData)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := VerificationMethod(v)
  p.Method = temp
}
  return nil
}

func (p *VerificationSessionData)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Callback = v
}
  return nil
}

func (p *VerificationSessionData)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NormalizedPhone = v
}
  return nil
}

func (p *VerificationSessionData)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CountryCode = v
}
  return nil
}

func (p *VerificationSessionData)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.NationalSignificantNumber = v
}
  return nil
}

func (p *VerificationSessionData)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]VerificationMethod, 0, size)
  p.AvailableVerificationMethods =  tSlice
  for i := 0; i < size; i ++ {
var _elem33 VerificationMethod
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := VerificationMethod(v)
    _elem33 = temp
}
    p.AvailableVerificationMethods = append(p.AvailableVerificationMethods, _elem33)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VerificationSessionData)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.CallerIdMask = v
}
  return nil
}

func (p *VerificationSessionData) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "VerificationSessionData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VerificationSessionData) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sessionId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err) }
  return err
}

func (p *VerificationSessionData) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "method", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:method: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Method)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.method (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:method: ", p), err) }
  return err
}

func (p *VerificationSessionData) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "callback", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:callback: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Callback)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.callback (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:callback: ", p), err) }
  return err
}

func (p *VerificationSessionData) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "normalizedPhone", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:normalizedPhone: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.NormalizedPhone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.normalizedPhone (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:normalizedPhone: ", p), err) }
  return err
}

func (p *VerificationSessionData) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "countryCode", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:countryCode: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CountryCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.countryCode (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:countryCode: ", p), err) }
  return err
}

func (p *VerificationSessionData) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "nationalSignificantNumber", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:nationalSignificantNumber: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.NationalSignificantNumber)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nationalSignificantNumber (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:nationalSignificantNumber: ", p), err) }
  return err
}

func (p *VerificationSessionData) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "availableVerificationMethods", thrift.LIST, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:availableVerificationMethods: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.AvailableVerificationMethods)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.AvailableVerificationMethods {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:availableVerificationMethods: ", p), err) }
  return err
}

func (p *VerificationSessionData) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "callerIdMask", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:callerIdMask: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CallerIdMask)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.callerIdMask (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:callerIdMask: ", p), err) }
  return err
}

func (p *VerificationSessionData) Equals(other *VerificationSessionData) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SessionId != other.SessionId { return false }
  if p.Method != other.Method { return false }
  if p.Callback != other.Callback { return false }
  if p.NormalizedPhone != other.NormalizedPhone { return false }
  if p.CountryCode != other.CountryCode { return false }
  if p.NationalSignificantNumber != other.NationalSignificantNumber { return false }
  if len(p.AvailableVerificationMethods) != len(other.AvailableVerificationMethods) { return false }
  for i, _tgt := range p.AvailableVerificationMethods {
    _src34 := other.AvailableVerificationMethods[i]
    if _tgt != _src34 { return false }
  }
  if p.CallerIdMask != other.CallerIdMask { return false }
  return true
}

func (p *VerificationSessionData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VerificationSessionData(%+v)", *p)
}

// Attributes:
//  - ApplicationType
//  - DeviceName
//  - SystemName
//  - SystemVersion
//  - Model
//  - CarrierCode
//  - CarrierName
//  - WebViewVersion
type DeviceInfo struct {
  DeviceName string `thrift:"deviceName,1" db:"deviceName" json:"deviceName"`
  SystemName string `thrift:"systemName,2" db:"systemName" json:"systemName"`
  SystemVersion string `thrift:"systemVersion,3" db:"systemVersion" json:"systemVersion"`
  Model string `thrift:"model,4" db:"model" json:"model"`
  WebViewVersion string `thrift:"webViewVersion,5" db:"webViewVersion" json:"webViewVersion"`
  // unused fields # 6 to 9
  CarrierCode CarrierCode `thrift:"carrierCode,10" db:"carrierCode" json:"carrierCode"`
  CarrierName string `thrift:"carrierName,11" db:"carrierName" json:"carrierName"`
  // unused fields # 12 to 19
  ApplicationType ApplicationType `thrift:"applicationType,20" db:"applicationType" json:"applicationType"`
}

func NewDeviceInfo() *DeviceInfo {
  return &DeviceInfo{}
}


func (p *DeviceInfo) GetApplicationType() ApplicationType {
  return p.ApplicationType
}

func (p *DeviceInfo) GetDeviceName() string {
  return p.DeviceName
}

func (p *DeviceInfo) GetSystemName() string {
  return p.SystemName
}

func (p *DeviceInfo) GetSystemVersion() string {
  return p.SystemVersion
}

func (p *DeviceInfo) GetModel() string {
  return p.Model
}

func (p *DeviceInfo) GetCarrierCode() CarrierCode {
  return p.CarrierCode
}

func (p *DeviceInfo) GetCarrierName() string {
  return p.CarrierName
}

func (p *DeviceInfo) GetWebViewVersion() string {
  return p.WebViewVersion
}
func (p *DeviceInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 20:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeviceInfo)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  temp := ApplicationType(v)
  p.ApplicationType = temp
}
  return nil
}

func (p *DeviceInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DeviceName = v
}
  return nil
}

func (p *DeviceInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SystemName = v
}
  return nil
}

func (p *DeviceInfo)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SystemVersion = v
}
  return nil
}

func (p *DeviceInfo)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Model = v
}
  return nil
}

func (p *DeviceInfo)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  temp := CarrierCode(v)
  p.CarrierCode = temp
}
  return nil
}

func (p *DeviceInfo)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.CarrierName = v
}
  return nil
}

func (p *DeviceInfo)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.WebViewVersion = v
}
  return nil
}

func (p *DeviceInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DeviceInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeviceInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "deviceName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:deviceName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DeviceName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deviceName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:deviceName: ", p), err) }
  return err
}

func (p *DeviceInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "systemName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SystemName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.systemName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemName: ", p), err) }
  return err
}

func (p *DeviceInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "systemVersion", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:systemVersion: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SystemVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.systemVersion (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:systemVersion: ", p), err) }
  return err
}

func (p *DeviceInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "model", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:model: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Model)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.model (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:model: ", p), err) }
  return err
}

func (p *DeviceInfo) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "webViewVersion", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:webViewVersion: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.WebViewVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.webViewVersion (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:webViewVersion: ", p), err) }
  return err
}

func (p *DeviceInfo) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrierCode", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:carrierCode: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.CarrierCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.carrierCode (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:carrierCode: ", p), err) }
  return err
}

func (p *DeviceInfo) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrierName", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:carrierName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CarrierName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.carrierName (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:carrierName: ", p), err) }
  return err
}

func (p *DeviceInfo) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "applicationType", thrift.I32, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:applicationType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ApplicationType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.applicationType (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:applicationType: ", p), err) }
  return err
}

func (p *DeviceInfo) Equals(other *DeviceInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.DeviceName != other.DeviceName { return false }
  if p.SystemName != other.SystemName { return false }
  if p.SystemVersion != other.SystemVersion { return false }
  if p.Model != other.Model { return false }
  if p.WebViewVersion != other.WebViewVersion { return false }
  if p.CarrierCode != other.CarrierCode { return false }
  if p.CarrierName != other.CarrierName { return false }
  if p.ApplicationType != other.ApplicationType { return false }
  return true
}

func (p *DeviceInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeviceInfo(%+v)", *p)
}

// Attributes:
//  - PhoneNumber
//  - CountryCode
type SIMInfo struct {
  PhoneNumber string `thrift:"phoneNumber,1" db:"phoneNumber" json:"phoneNumber"`
  CountryCode string `thrift:"countryCode,2" db:"countryCode" json:"countryCode"`
}

func NewSIMInfo() *SIMInfo {
  return &SIMInfo{}
}


func (p *SIMInfo) GetPhoneNumber() string {
  return p.PhoneNumber
}

func (p *SIMInfo) GetCountryCode() string {
  return p.CountryCode
}
func (p *SIMInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SIMInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.PhoneNumber = v
}
  return nil
}

func (p *SIMInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CountryCode = v
}
  return nil
}

func (p *SIMInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SIMInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SIMInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "phoneNumber", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:phoneNumber: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PhoneNumber)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phoneNumber (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:phoneNumber: ", p), err) }
  return err
}

func (p *SIMInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "countryCode", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:countryCode: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CountryCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.countryCode (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:countryCode: ", p), err) }
  return err
}

func (p *SIMInfo) Equals(other *SIMInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.PhoneNumber != other.PhoneNumber { return false }
  if p.CountryCode != other.CountryCode { return false }
  return true
}

func (p *SIMInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SIMInfo(%+v)", *p)
}

// Attributes:
//  - VerificationResult_
//  - AccountMigrationCheckType
//  - RecommendAddFriends
type PhoneVerificationResult_ struct {
  VerificationResult_ VerificationResult_ `thrift:"verificationResult,1" db:"verificationResult" json:"verificationResult"`
  AccountMigrationCheckType AccountMigrationCheckType `thrift:"accountMigrationCheckType,2" db:"accountMigrationCheckType" json:"accountMigrationCheckType"`
  RecommendAddFriends bool `thrift:"recommendAddFriends,3" db:"recommendAddFriends" json:"recommendAddFriends"`
}

func NewPhoneVerificationResult_() *PhoneVerificationResult_ {
  return &PhoneVerificationResult_{}
}


func (p *PhoneVerificationResult_) GetVerificationResult_() VerificationResult_ {
  return p.VerificationResult_
}

func (p *PhoneVerificationResult_) GetAccountMigrationCheckType() AccountMigrationCheckType {
  return p.AccountMigrationCheckType
}

func (p *PhoneVerificationResult_) GetRecommendAddFriends() bool {
  return p.RecommendAddFriends
}
func (p *PhoneVerificationResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PhoneVerificationResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := VerificationResult_(v)
  p.VerificationResult_ = temp
}
  return nil
}

func (p *PhoneVerificationResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := AccountMigrationCheckType(v)
  p.AccountMigrationCheckType = temp
}
  return nil
}

func (p *PhoneVerificationResult_)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RecommendAddFriends = v
}
  return nil
}

func (p *PhoneVerificationResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "PhoneVerificationResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PhoneVerificationResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "verificationResult", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:verificationResult: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VerificationResult_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.verificationResult (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:verificationResult: ", p), err) }
  return err
}

func (p *PhoneVerificationResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "accountMigrationCheckType", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:accountMigrationCheckType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.AccountMigrationCheckType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accountMigrationCheckType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:accountMigrationCheckType: ", p), err) }
  return err
}

func (p *PhoneVerificationResult_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "recommendAddFriends", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:recommendAddFriends: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.RecommendAddFriends)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.recommendAddFriends (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:recommendAddFriends: ", p), err) }
  return err
}

func (p *PhoneVerificationResult_) Equals(other *PhoneVerificationResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.VerificationResult_ != other.VerificationResult_ { return false }
  if p.AccountMigrationCheckType != other.AccountMigrationCheckType { return false }
  if p.RecommendAddFriends != other.RecommendAddFriends { return false }
  return true
}

func (p *PhoneVerificationResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PhoneVerificationResult_(%+v)", *p)
}

// Attributes:
//  - NotificationThumbnail
//  - PrivacySyncContacts
//  - PrivacySearchByPhoneNumber
//  - PrivacySearchByUserid
//  - PrivacySearchByEmail
//  - PrivacyAllowSecondaryDeviceLogin
//  - PrivacyProfileImagePostToMyhome
//  - PrivacyProfileMusicPostToMyhome
//  - PrivacyAllowProfileHistory
//  - PrivacyStatusMessageHistory
//  - PrivacyReceiveMessagesFromNotFriend
//  - PrivacyAgreeUseLineCoinToPaidCall
//  - PrivacyAgreeUsePaidCall
//  - PrivacyAllowFriendRequest
//  - PrivacyAllowNearby
//  - PrivacySharePersonalInfoToFriends
//  - PrivacyAgeResult_
//  - PrivacyAgeResultReceived
//  - PrivacyAllowFollow
//  - PrivacyShowFollowList
//  - ContactMyTicket
//  - IdentityProvider
//  - IdentityIdentifier
//  - SnsAccounts
//  - PhoneRegistration
//  - EmailConfirmationStatus
//  - AccountMigrationPincodeType
//  - EnforcedInputAccountMigrationPincode
//  - SecurityCenterSettingsType
//  - AllowUnregistrationSecondaryDevice
//  - PreferenceLocale
//  - CustomModes
//  - E2eeEnable
//  - HitokotoBackupRequested
//  - AgreementNearbyTime
//  - AgreementSquareTime
//  - BotUseAgreementAcceptedAt
//  - AgreementShakeFunction
//  - AgreementMobileContactName
//  - AgreementSoundToText
//  - PrivacyPolicyVersion
//  - NotificationEnable
//  - AgreementAdByWebAccess
//  - NotificationMuteExpiration
//  - AgreementPhoneNumberMatching
//  - NotificationNewMessage
//  - AgreementCommunicationInfo
//  - NotificationGroupInvitation
//  - AgreementThingsWirelessCommunication
//  - NotificationShowMessage
//  - AgreementGdpr
//  - NotificationIncomingCall
//  - AgreementProvideLocation
//  - NotificationSoundMessage
//  - AgreementBeacon
//  - NotificationSoundGroup
//  - AgreementContentsSuggest
//  - NotificationDisabledWithSub
//  - AgreementContentsSuggestDataCollection
//  - NotificationPayment
//  - AgreementOcrImageCollection
//  - NotificationMention
type Settings struct {
  // unused fields # 1 to 9
  NotificationEnable bool `thrift:"notificationEnable,10" db:"notificationEnable" json:"notificationEnable"`
  NotificationMuteExpiration int64 `thrift:"notificationMuteExpiration,11" db:"notificationMuteExpiration" json:"notificationMuteExpiration"`
  NotificationNewMessage bool `thrift:"notificationNewMessage,12" db:"notificationNewMessage" json:"notificationNewMessage"`
  NotificationGroupInvitation bool `thrift:"notificationGroupInvitation,13" db:"notificationGroupInvitation" json:"notificationGroupInvitation"`
  NotificationShowMessage bool `thrift:"notificationShowMessage,14" db:"notificationShowMessage" json:"notificationShowMessage"`
  NotificationIncomingCall bool `thrift:"notificationIncomingCall,15" db:"notificationIncomingCall" json:"notificationIncomingCall"`
  NotificationSoundMessage string `thrift:"notificationSoundMessage,16" db:"notificationSoundMessage" json:"notificationSoundMessage"`
  NotificationSoundGroup string `thrift:"notificationSoundGroup,17" db:"notificationSoundGroup" json:"notificationSoundGroup"`
  NotificationDisabledWithSub bool `thrift:"notificationDisabledWithSub,18" db:"notificationDisabledWithSub" json:"notificationDisabledWithSub"`
  NotificationPayment bool `thrift:"notificationPayment,19" db:"notificationPayment" json:"notificationPayment"`
  PrivacySyncContacts bool `thrift:"privacySyncContacts,20" db:"privacySyncContacts" json:"privacySyncContacts"`
  PrivacySearchByPhoneNumber bool `thrift:"privacySearchByPhoneNumber,21" db:"privacySearchByPhoneNumber" json:"privacySearchByPhoneNumber"`
  PrivacySearchByUserid bool `thrift:"privacySearchByUserid,22" db:"privacySearchByUserid" json:"privacySearchByUserid"`
  PrivacySearchByEmail bool `thrift:"privacySearchByEmail,23" db:"privacySearchByEmail" json:"privacySearchByEmail"`
  PrivacyAllowSecondaryDeviceLogin bool `thrift:"privacyAllowSecondaryDeviceLogin,24" db:"privacyAllowSecondaryDeviceLogin" json:"privacyAllowSecondaryDeviceLogin"`
  PrivacyProfileImagePostToMyhome bool `thrift:"privacyProfileImagePostToMyhome,25" db:"privacyProfileImagePostToMyhome" json:"privacyProfileImagePostToMyhome"`
  PrivacyReceiveMessagesFromNotFriend bool `thrift:"privacyReceiveMessagesFromNotFriend,26" db:"privacyReceiveMessagesFromNotFriend" json:"privacyReceiveMessagesFromNotFriend"`
  PrivacyAgreeUseLineCoinToPaidCall bool `thrift:"privacyAgreeUseLineCoinToPaidCall,27" db:"privacyAgreeUseLineCoinToPaidCall" json:"privacyAgreeUseLineCoinToPaidCall"`
  PrivacyAgreeUsePaidCall bool `thrift:"privacyAgreeUsePaidCall,28" db:"privacyAgreeUsePaidCall" json:"privacyAgreeUsePaidCall"`
  PrivacyAllowFriendRequest bool `thrift:"privacyAllowFriendRequest,29" db:"privacyAllowFriendRequest" json:"privacyAllowFriendRequest"`
  ContactMyTicket string `thrift:"contactMyTicket,30" db:"contactMyTicket" json:"contactMyTicket"`
  // unused fields # 31 to 39
  IdentityProvider IdentityProvider `thrift:"identityProvider,40" db:"identityProvider" json:"identityProvider"`
  IdentityIdentifier string `thrift:"identityIdentifier,41" db:"identityIdentifier" json:"identityIdentifier"`
  SnsAccounts map[SnsIdType]string `thrift:"snsAccounts,42" db:"snsAccounts" json:"snsAccounts"`
  PhoneRegistration bool `thrift:"phoneRegistration,43" db:"phoneRegistration" json:"phoneRegistration"`
  EmailConfirmationStatus EmailConfirmationStatus `thrift:"emailConfirmationStatus,44" db:"emailConfirmationStatus" json:"emailConfirmationStatus"`
  AccountMigrationPincodeType AccountMigrationPincodeType `thrift:"accountMigrationPincodeType,45" db:"accountMigrationPincodeType" json:"accountMigrationPincodeType"`
  EnforcedInputAccountMigrationPincode bool `thrift:"enforcedInputAccountMigrationPincode,46" db:"enforcedInputAccountMigrationPincode" json:"enforcedInputAccountMigrationPincode"`
  SecurityCenterSettingsType SecurityCenterSettingsType `thrift:"securityCenterSettingsType,47" db:"securityCenterSettingsType" json:"securityCenterSettingsType"`
  AllowUnregistrationSecondaryDevice bool `thrift:"allowUnregistrationSecondaryDevice,48" db:"allowUnregistrationSecondaryDevice" json:"allowUnregistrationSecondaryDevice"`
  // unused field # 49
  PreferenceLocale string `thrift:"preferenceLocale,50" db:"preferenceLocale" json:"preferenceLocale"`
  // unused fields # 51 to 59
  CustomModes CustomMode `thrift:"customModes,60" db:"customModes" json:"customModes"`
  E2eeEnable bool `thrift:"e2eeEnable,61" db:"e2eeEnable" json:"e2eeEnable"`
  HitokotoBackupRequested bool `thrift:"hitokotoBackupRequested,62" db:"hitokotoBackupRequested" json:"hitokotoBackupRequested"`
  PrivacyProfileMusicPostToMyhome bool `thrift:"privacyProfileMusicPostToMyhome,63" db:"privacyProfileMusicPostToMyhome" json:"privacyProfileMusicPostToMyhome"`
  // unused field # 64
  PrivacyAllowNearby bool `thrift:"privacyAllowNearby,65" db:"privacyAllowNearby" json:"privacyAllowNearby"`
  AgreementNearbyTime int64 `thrift:"agreementNearbyTime,66" db:"agreementNearbyTime" json:"agreementNearbyTime"`
  AgreementSquareTime int64 `thrift:"agreementSquareTime,67" db:"agreementSquareTime" json:"agreementSquareTime"`
  NotificationMention bool `thrift:"notificationMention,68" db:"notificationMention" json:"notificationMention"`
  BotUseAgreementAcceptedAt int64 `thrift:"botUseAgreementAcceptedAt,69" db:"botUseAgreementAcceptedAt" json:"botUseAgreementAcceptedAt"`
  AgreementShakeFunction int64 `thrift:"agreementShakeFunction,70" db:"agreementShakeFunction" json:"agreementShakeFunction"`
  AgreementMobileContactName int64 `thrift:"agreementMobileContactName,71" db:"agreementMobileContactName" json:"agreementMobileContactName"`
  NotificationThumbnail bool `thrift:"notificationThumbnail,72" db:"notificationThumbnail" json:"notificationThumbnail"`
  AgreementSoundToText int64 `thrift:"agreementSoundToText,73" db:"agreementSoundToText" json:"agreementSoundToText"`
  PrivacyPolicyVersion string `thrift:"privacyPolicyVersion,74" db:"privacyPolicyVersion" json:"privacyPolicyVersion"`
  AgreementAdByWebAccess int64 `thrift:"agreementAdByWebAccess,75" db:"agreementAdByWebAccess" json:"agreementAdByWebAccess"`
  AgreementPhoneNumberMatching int64 `thrift:"agreementPhoneNumberMatching,76" db:"agreementPhoneNumberMatching" json:"agreementPhoneNumberMatching"`
  AgreementCommunicationInfo int64 `thrift:"agreementCommunicationInfo,77" db:"agreementCommunicationInfo" json:"agreementCommunicationInfo"`
  PrivacySharePersonalInfoToFriends PrivacyShareMyProfileType `thrift:"privacySharePersonalInfoToFriends,78" db:"privacySharePersonalInfoToFriends" json:"privacySharePersonalInfoToFriends"`
  AgreementThingsWirelessCommunication int64 `thrift:"agreementThingsWirelessCommunication,79" db:"agreementThingsWirelessCommunication" json:"agreementThingsWirelessCommunication"`
  AgreementGdpr int64 `thrift:"agreementGdpr,80" db:"agreementGdpr" json:"agreementGdpr"`
  PrivacyStatusMessageHistory StatusMessageHistoryPrivacyType `thrift:"privacyStatusMessageHistory,81" db:"privacyStatusMessageHistory" json:"privacyStatusMessageHistory"`
  AgreementProvideLocation int64 `thrift:"agreementProvideLocation,82" db:"agreementProvideLocation" json:"agreementProvideLocation"`
  AgreementBeacon int64 `thrift:"agreementBeacon,83" db:"agreementBeacon" json:"agreementBeacon"`
  // unused field # 84
  PrivacyAllowProfileHistory ProfileHistoryPrivacyType `thrift:"privacyAllowProfileHistory,85" db:"privacyAllowProfileHistory" json:"privacyAllowProfileHistory"`
  AgreementContentsSuggest int64 `thrift:"agreementContentsSuggest,86" db:"agreementContentsSuggest" json:"agreementContentsSuggest"`
  AgreementContentsSuggestDataCollection int64 `thrift:"agreementContentsSuggestDataCollection,87" db:"agreementContentsSuggestDataCollection" json:"agreementContentsSuggestDataCollection"`
  PrivacyAgeResult_ UserAgeType `thrift:"privacyAgeResult,88" db:"privacyAgeResult" json:"privacyAgeResult"`
  PrivacyAgeResultReceived bool `thrift:"privacyAgeResultReceived,89" db:"privacyAgeResultReceived" json:"privacyAgeResultReceived"`
  AgreementOcrImageCollection int64 `thrift:"agreementOcrImageCollection,90" db:"agreementOcrImageCollection" json:"agreementOcrImageCollection"`
  PrivacyAllowFollow bool `thrift:"privacyAllowFollow,91" db:"privacyAllowFollow" json:"privacyAllowFollow"`
  PrivacyShowFollowList bool `thrift:"privacyShowFollowList,92" db:"privacyShowFollowList" json:"privacyShowFollowList"`
}

func NewSettings() *Settings {
  return &Settings{}
}


func (p *Settings) GetNotificationThumbnail() bool {
  return p.NotificationThumbnail
}

func (p *Settings) GetPrivacySyncContacts() bool {
  return p.PrivacySyncContacts
}

func (p *Settings) GetPrivacySearchByPhoneNumber() bool {
  return p.PrivacySearchByPhoneNumber
}

func (p *Settings) GetPrivacySearchByUserid() bool {
  return p.PrivacySearchByUserid
}

func (p *Settings) GetPrivacySearchByEmail() bool {
  return p.PrivacySearchByEmail
}

func (p *Settings) GetPrivacyAllowSecondaryDeviceLogin() bool {
  return p.PrivacyAllowSecondaryDeviceLogin
}

func (p *Settings) GetPrivacyProfileImagePostToMyhome() bool {
  return p.PrivacyProfileImagePostToMyhome
}

func (p *Settings) GetPrivacyProfileMusicPostToMyhome() bool {
  return p.PrivacyProfileMusicPostToMyhome
}

func (p *Settings) GetPrivacyAllowProfileHistory() ProfileHistoryPrivacyType {
  return p.PrivacyAllowProfileHistory
}

func (p *Settings) GetPrivacyStatusMessageHistory() StatusMessageHistoryPrivacyType {
  return p.PrivacyStatusMessageHistory
}

func (p *Settings) GetPrivacyReceiveMessagesFromNotFriend() bool {
  return p.PrivacyReceiveMessagesFromNotFriend
}

func (p *Settings) GetPrivacyAgreeUseLineCoinToPaidCall() bool {
  return p.PrivacyAgreeUseLineCoinToPaidCall
}

func (p *Settings) GetPrivacyAgreeUsePaidCall() bool {
  return p.PrivacyAgreeUsePaidCall
}

func (p *Settings) GetPrivacyAllowFriendRequest() bool {
  return p.PrivacyAllowFriendRequest
}

func (p *Settings) GetPrivacyAllowNearby() bool {
  return p.PrivacyAllowNearby
}

func (p *Settings) GetPrivacySharePersonalInfoToFriends() PrivacyShareMyProfileType {
  return p.PrivacySharePersonalInfoToFriends
}

func (p *Settings) GetPrivacyAgeResult_() UserAgeType {
  return p.PrivacyAgeResult_
}

func (p *Settings) GetPrivacyAgeResultReceived() bool {
  return p.PrivacyAgeResultReceived
}

func (p *Settings) GetPrivacyAllowFollow() bool {
  return p.PrivacyAllowFollow
}

func (p *Settings) GetPrivacyShowFollowList() bool {
  return p.PrivacyShowFollowList
}

func (p *Settings) GetContactMyTicket() string {
  return p.ContactMyTicket
}

func (p *Settings) GetIdentityProvider() IdentityProvider {
  return p.IdentityProvider
}

func (p *Settings) GetIdentityIdentifier() string {
  return p.IdentityIdentifier
}

func (p *Settings) GetSnsAccounts() map[SnsIdType]string {
  return p.SnsAccounts
}

func (p *Settings) GetPhoneRegistration() bool {
  return p.PhoneRegistration
}

func (p *Settings) GetEmailConfirmationStatus() EmailConfirmationStatus {
  return p.EmailConfirmationStatus
}

func (p *Settings) GetAccountMigrationPincodeType() AccountMigrationPincodeType {
  return p.AccountMigrationPincodeType
}

func (p *Settings) GetEnforcedInputAccountMigrationPincode() bool {
  return p.EnforcedInputAccountMigrationPincode
}

func (p *Settings) GetSecurityCenterSettingsType() SecurityCenterSettingsType {
  return p.SecurityCenterSettingsType
}

func (p *Settings) GetAllowUnregistrationSecondaryDevice() bool {
  return p.AllowUnregistrationSecondaryDevice
}

func (p *Settings) GetPreferenceLocale() string {
  return p.PreferenceLocale
}

func (p *Settings) GetCustomModes() CustomMode {
  return p.CustomModes
}

func (p *Settings) GetE2eeEnable() bool {
  return p.E2eeEnable
}

func (p *Settings) GetHitokotoBackupRequested() bool {
  return p.HitokotoBackupRequested
}

func (p *Settings) GetAgreementNearbyTime() int64 {
  return p.AgreementNearbyTime
}

func (p *Settings) GetAgreementSquareTime() int64 {
  return p.AgreementSquareTime
}

func (p *Settings) GetBotUseAgreementAcceptedAt() int64 {
  return p.BotUseAgreementAcceptedAt
}

func (p *Settings) GetAgreementShakeFunction() int64 {
  return p.AgreementShakeFunction
}

func (p *Settings) GetAgreementMobileContactName() int64 {
  return p.AgreementMobileContactName
}

func (p *Settings) GetAgreementSoundToText() int64 {
  return p.AgreementSoundToText
}

func (p *Settings) GetPrivacyPolicyVersion() string {
  return p.PrivacyPolicyVersion
}

func (p *Settings) GetNotificationEnable() bool {
  return p.NotificationEnable
}

func (p *Settings) GetAgreementAdByWebAccess() int64 {
  return p.AgreementAdByWebAccess
}

func (p *Settings) GetNotificationMuteExpiration() int64 {
  return p.NotificationMuteExpiration
}

func (p *Settings) GetAgreementPhoneNumberMatching() int64 {
  return p.AgreementPhoneNumberMatching
}

func (p *Settings) GetNotificationNewMessage() bool {
  return p.NotificationNewMessage
}

func (p *Settings) GetAgreementCommunicationInfo() int64 {
  return p.AgreementCommunicationInfo
}

func (p *Settings) GetNotificationGroupInvitation() bool {
  return p.NotificationGroupInvitation
}

func (p *Settings) GetAgreementThingsWirelessCommunication() int64 {
  return p.AgreementThingsWirelessCommunication
}

func (p *Settings) GetNotificationShowMessage() bool {
  return p.NotificationShowMessage
}

func (p *Settings) GetAgreementGdpr() int64 {
  return p.AgreementGdpr
}

func (p *Settings) GetNotificationIncomingCall() bool {
  return p.NotificationIncomingCall
}

func (p *Settings) GetAgreementProvideLocation() int64 {
  return p.AgreementProvideLocation
}

func (p *Settings) GetNotificationSoundMessage() string {
  return p.NotificationSoundMessage
}

func (p *Settings) GetAgreementBeacon() int64 {
  return p.AgreementBeacon
}

func (p *Settings) GetNotificationSoundGroup() string {
  return p.NotificationSoundGroup
}

func (p *Settings) GetAgreementContentsSuggest() int64 {
  return p.AgreementContentsSuggest
}

func (p *Settings) GetNotificationDisabledWithSub() bool {
  return p.NotificationDisabledWithSub
}

func (p *Settings) GetAgreementContentsSuggestDataCollection() int64 {
  return p.AgreementContentsSuggestDataCollection
}

func (p *Settings) GetNotificationPayment() bool {
  return p.NotificationPayment
}

func (p *Settings) GetAgreementOcrImageCollection() int64 {
  return p.AgreementOcrImageCollection
}

func (p *Settings) GetNotificationMention() bool {
  return p.NotificationMention
}
func (p *Settings) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 72:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField72(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField21(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField22(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField23(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField24(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField25(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 63:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField63(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 85:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField85(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 81:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField81(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 26:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField26(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 27:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField27(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 28:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField28(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 29:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField29(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 65:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField65(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 78:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField78(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 88:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField88(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 89:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField89(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 91:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField91(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 92:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField92(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 30:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField30(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 40:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField40(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 41:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField41(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 42:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField42(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 43:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField43(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 44:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField44(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 45:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField45(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 46:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField46(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 47:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField47(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 48:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField48(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 50:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField50(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 60:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField60(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 61:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField61(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 62:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField62(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 66:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField66(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 67:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField67(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 69:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField69(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 70:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField70(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 71:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField71(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 73:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField73(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 74:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField74(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 75:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField75(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 76:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField76(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 77:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField77(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 79:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField79(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 80:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField80(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 82:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField82(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField16(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 83:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField83(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField17(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 86:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField86(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField18(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 87:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField87(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField19(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 90:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField90(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 68:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField68(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Settings)  ReadField72(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 72: ", err)
} else {
  p.NotificationThumbnail = v
}
  return nil
}

func (p *Settings)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.PrivacySyncContacts = v
}
  return nil
}

func (p *Settings)  ReadField21(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.PrivacySearchByPhoneNumber = v
}
  return nil
}

func (p *Settings)  ReadField22(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.PrivacySearchByUserid = v
}
  return nil
}

func (p *Settings)  ReadField23(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.PrivacySearchByEmail = v
}
  return nil
}

func (p *Settings)  ReadField24(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.PrivacyAllowSecondaryDeviceLogin = v
}
  return nil
}

func (p *Settings)  ReadField25(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  p.PrivacyProfileImagePostToMyhome = v
}
  return nil
}

func (p *Settings)  ReadField63(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 63: ", err)
} else {
  p.PrivacyProfileMusicPostToMyhome = v
}
  return nil
}

func (p *Settings)  ReadField85(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 85: ", err)
} else {
  temp := ProfileHistoryPrivacyType(v)
  p.PrivacyAllowProfileHistory = temp
}
  return nil
}

func (p *Settings)  ReadField81(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 81: ", err)
} else {
  temp := StatusMessageHistoryPrivacyType(v)
  p.PrivacyStatusMessageHistory = temp
}
  return nil
}

func (p *Settings)  ReadField26(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 26: ", err)
} else {
  p.PrivacyReceiveMessagesFromNotFriend = v
}
  return nil
}

func (p *Settings)  ReadField27(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 27: ", err)
} else {
  p.PrivacyAgreeUseLineCoinToPaidCall = v
}
  return nil
}

func (p *Settings)  ReadField28(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 28: ", err)
} else {
  p.PrivacyAgreeUsePaidCall = v
}
  return nil
}

func (p *Settings)  ReadField29(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 29: ", err)
} else {
  p.PrivacyAllowFriendRequest = v
}
  return nil
}

func (p *Settings)  ReadField65(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 65: ", err)
} else {
  p.PrivacyAllowNearby = v
}
  return nil
}

func (p *Settings)  ReadField78(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 78: ", err)
} else {
  temp := PrivacyShareMyProfileType(v)
  p.PrivacySharePersonalInfoToFriends = temp
}
  return nil
}

func (p *Settings)  ReadField88(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 88: ", err)
} else {
  temp := UserAgeType(v)
  p.PrivacyAgeResult_ = temp
}
  return nil
}

func (p *Settings)  ReadField89(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 89: ", err)
} else {
  p.PrivacyAgeResultReceived = v
}
  return nil
}

func (p *Settings)  ReadField91(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 91: ", err)
} else {
  p.PrivacyAllowFollow = v
}
  return nil
}

func (p *Settings)  ReadField92(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 92: ", err)
} else {
  p.PrivacyShowFollowList = v
}
  return nil
}

func (p *Settings)  ReadField30(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.ContactMyTicket = v
}
  return nil
}

func (p *Settings)  ReadField40(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 40: ", err)
} else {
  temp := IdentityProvider(v)
  p.IdentityProvider = temp
}
  return nil
}

func (p *Settings)  ReadField41(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 41: ", err)
} else {
  p.IdentityIdentifier = v
}
  return nil
}

func (p *Settings)  ReadField42(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[SnsIdType]string, size)
  p.SnsAccounts =  tMap
  for i := 0; i < size; i ++ {
var _key35 SnsIdType
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := SnsIdType(v)
    _key35 = temp
}
var _val36 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val36 = v
}
    p.SnsAccounts[_key35] = _val36
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Settings)  ReadField43(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 43: ", err)
} else {
  p.PhoneRegistration = v
}
  return nil
}

func (p *Settings)  ReadField44(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 44: ", err)
} else {
  temp := EmailConfirmationStatus(v)
  p.EmailConfirmationStatus = temp
}
  return nil
}

func (p *Settings)  ReadField45(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 45: ", err)
} else {
  temp := AccountMigrationPincodeType(v)
  p.AccountMigrationPincodeType = temp
}
  return nil
}

func (p *Settings)  ReadField46(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 46: ", err)
} else {
  p.EnforcedInputAccountMigrationPincode = v
}
  return nil
}

func (p *Settings)  ReadField47(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 47: ", err)
} else {
  temp := SecurityCenterSettingsType(v)
  p.SecurityCenterSettingsType = temp
}
  return nil
}

func (p *Settings)  ReadField48(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 48: ", err)
} else {
  p.AllowUnregistrationSecondaryDevice = v
}
  return nil
}

func (p *Settings)  ReadField50(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 50: ", err)
} else {
  p.PreferenceLocale = v
}
  return nil
}

func (p *Settings)  ReadField60(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 60: ", err)
} else {
  temp := CustomMode(v)
  p.CustomModes = temp
}
  return nil
}

func (p *Settings)  ReadField61(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 61: ", err)
} else {
  p.E2eeEnable = v
}
  return nil
}

func (p *Settings)  ReadField62(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 62: ", err)
} else {
  p.HitokotoBackupRequested = v
}
  return nil
}

func (p *Settings)  ReadField66(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 66: ", err)
} else {
  p.AgreementNearbyTime = v
}
  return nil
}

func (p *Settings)  ReadField67(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 67: ", err)
} else {
  p.AgreementSquareTime = v
}
  return nil
}

func (p *Settings)  ReadField69(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 69: ", err)
} else {
  p.BotUseAgreementAcceptedAt = v
}
  return nil
}

func (p *Settings)  ReadField70(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 70: ", err)
} else {
  p.AgreementShakeFunction = v
}
  return nil
}

func (p *Settings)  ReadField71(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 71: ", err)
} else {
  p.AgreementMobileContactName = v
}
  return nil
}

func (p *Settings)  ReadField73(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 73: ", err)
} else {
  p.AgreementSoundToText = v
}
  return nil
}

func (p *Settings)  ReadField74(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 74: ", err)
} else {
  p.PrivacyPolicyVersion = v
}
  return nil
}

func (p *Settings)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.NotificationEnable = v
}
  return nil
}

func (p *Settings)  ReadField75(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 75: ", err)
} else {
  p.AgreementAdByWebAccess = v
}
  return nil
}

func (p *Settings)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.NotificationMuteExpiration = v
}
  return nil
}

func (p *Settings)  ReadField76(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 76: ", err)
} else {
  p.AgreementPhoneNumberMatching = v
}
  return nil
}

func (p *Settings)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.NotificationNewMessage = v
}
  return nil
}

func (p *Settings)  ReadField77(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 77: ", err)
} else {
  p.AgreementCommunicationInfo = v
}
  return nil
}

func (p *Settings)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.NotificationGroupInvitation = v
}
  return nil
}

func (p *Settings)  ReadField79(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 79: ", err)
} else {
  p.AgreementThingsWirelessCommunication = v
}
  return nil
}

func (p *Settings)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.NotificationShowMessage = v
}
  return nil
}

func (p *Settings)  ReadField80(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 80: ", err)
} else {
  p.AgreementGdpr = v
}
  return nil
}

func (p *Settings)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.NotificationIncomingCall = v
}
  return nil
}

func (p *Settings)  ReadField82(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 82: ", err)
} else {
  p.AgreementProvideLocation = v
}
  return nil
}

func (p *Settings)  ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.NotificationSoundMessage = v
}
  return nil
}

func (p *Settings)  ReadField83(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 83: ", err)
} else {
  p.AgreementBeacon = v
}
  return nil
}

func (p *Settings)  ReadField17(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.NotificationSoundGroup = v
}
  return nil
}

func (p *Settings)  ReadField86(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 86: ", err)
} else {
  p.AgreementContentsSuggest = v
}
  return nil
}

func (p *Settings)  ReadField18(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.NotificationDisabledWithSub = v
}
  return nil
}

func (p *Settings)  ReadField87(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 87: ", err)
} else {
  p.AgreementContentsSuggestDataCollection = v
}
  return nil
}

func (p *Settings)  ReadField19(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.NotificationPayment = v
}
  return nil
}

func (p *Settings)  ReadField90(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 90: ", err)
} else {
  p.AgreementOcrImageCollection = v
}
  return nil
}

func (p *Settings)  ReadField68(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 68: ", err)
} else {
  p.NotificationMention = v
}
  return nil
}

func (p *Settings) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Settings"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
    if err := p.writeField16(ctx, oprot); err != nil { return err }
    if err := p.writeField17(ctx, oprot); err != nil { return err }
    if err := p.writeField18(ctx, oprot); err != nil { return err }
    if err := p.writeField19(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
    if err := p.writeField21(ctx, oprot); err != nil { return err }
    if err := p.writeField22(ctx, oprot); err != nil { return err }
    if err := p.writeField23(ctx, oprot); err != nil { return err }
    if err := p.writeField24(ctx, oprot); err != nil { return err }
    if err := p.writeField25(ctx, oprot); err != nil { return err }
    if err := p.writeField26(ctx, oprot); err != nil { return err }
    if err := p.writeField27(ctx, oprot); err != nil { return err }
    if err := p.writeField28(ctx, oprot); err != nil { return err }
    if err := p.writeField29(ctx, oprot); err != nil { return err }
    if err := p.writeField30(ctx, oprot); err != nil { return err }
    if err := p.writeField40(ctx, oprot); err != nil { return err }
    if err := p.writeField41(ctx, oprot); err != nil { return err }
    if err := p.writeField42(ctx, oprot); err != nil { return err }
    if err := p.writeField43(ctx, oprot); err != nil { return err }
    if err := p.writeField44(ctx, oprot); err != nil { return err }
    if err := p.writeField45(ctx, oprot); err != nil { return err }
    if err := p.writeField46(ctx, oprot); err != nil { return err }
    if err := p.writeField47(ctx, oprot); err != nil { return err }
    if err := p.writeField48(ctx, oprot); err != nil { return err }
    if err := p.writeField50(ctx, oprot); err != nil { return err }
    if err := p.writeField60(ctx, oprot); err != nil { return err }
    if err := p.writeField61(ctx, oprot); err != nil { return err }
    if err := p.writeField62(ctx, oprot); err != nil { return err }
    if err := p.writeField63(ctx, oprot); err != nil { return err }
    if err := p.writeField65(ctx, oprot); err != nil { return err }
    if err := p.writeField66(ctx, oprot); err != nil { return err }
    if err := p.writeField67(ctx, oprot); err != nil { return err }
    if err := p.writeField68(ctx, oprot); err != nil { return err }
    if err := p.writeField69(ctx, oprot); err != nil { return err }
    if err := p.writeField70(ctx, oprot); err != nil { return err }
    if err := p.writeField71(ctx, oprot); err != nil { return err }
    if err := p.writeField72(ctx, oprot); err != nil { return err }
    if err := p.writeField73(ctx, oprot); err != nil { return err }
    if err := p.writeField74(ctx, oprot); err != nil { return err }
    if err := p.writeField75(ctx, oprot); err != nil { return err }
    if err := p.writeField76(ctx, oprot); err != nil { return err }
    if err := p.writeField77(ctx, oprot); err != nil { return err }
    if err := p.writeField78(ctx, oprot); err != nil { return err }
    if err := p.writeField79(ctx, oprot); err != nil { return err }
    if err := p.writeField80(ctx, oprot); err != nil { return err }
    if err := p.writeField81(ctx, oprot); err != nil { return err }
    if err := p.writeField82(ctx, oprot); err != nil { return err }
    if err := p.writeField83(ctx, oprot); err != nil { return err }
    if err := p.writeField85(ctx, oprot); err != nil { return err }
    if err := p.writeField86(ctx, oprot); err != nil { return err }
    if err := p.writeField87(ctx, oprot); err != nil { return err }
    if err := p.writeField88(ctx, oprot); err != nil { return err }
    if err := p.writeField89(ctx, oprot); err != nil { return err }
    if err := p.writeField90(ctx, oprot); err != nil { return err }
    if err := p.writeField91(ctx, oprot); err != nil { return err }
    if err := p.writeField92(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Settings) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notificationEnable", thrift.BOOL, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:notificationEnable: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.NotificationEnable)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationEnable (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:notificationEnable: ", p), err) }
  return err
}

func (p *Settings) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notificationMuteExpiration", thrift.I64, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:notificationMuteExpiration: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.NotificationMuteExpiration)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationMuteExpiration (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:notificationMuteExpiration: ", p), err) }
  return err
}

func (p *Settings) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notificationNewMessage", thrift.BOOL, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:notificationNewMessage: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.NotificationNewMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationNewMessage (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:notificationNewMessage: ", p), err) }
  return err
}

func (p *Settings) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notificationGroupInvitation", thrift.BOOL, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:notificationGroupInvitation: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.NotificationGroupInvitation)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationGroupInvitation (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:notificationGroupInvitation: ", p), err) }
  return err
}

func (p *Settings) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notificationShowMessage", thrift.BOOL, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:notificationShowMessage: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.NotificationShowMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationShowMessage (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:notificationShowMessage: ", p), err) }
  return err
}

func (p *Settings) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notificationIncomingCall", thrift.BOOL, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:notificationIncomingCall: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.NotificationIncomingCall)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationIncomingCall (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:notificationIncomingCall: ", p), err) }
  return err
}

func (p *Settings) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notificationSoundMessage", thrift.STRING, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:notificationSoundMessage: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.NotificationSoundMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationSoundMessage (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:notificationSoundMessage: ", p), err) }
  return err
}

func (p *Settings) writeField17(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notificationSoundGroup", thrift.STRING, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:notificationSoundGroup: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.NotificationSoundGroup)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationSoundGroup (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:notificationSoundGroup: ", p), err) }
  return err
}

func (p *Settings) writeField18(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notificationDisabledWithSub", thrift.BOOL, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:notificationDisabledWithSub: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.NotificationDisabledWithSub)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationDisabledWithSub (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:notificationDisabledWithSub: ", p), err) }
  return err
}

func (p *Settings) writeField19(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notificationPayment", thrift.BOOL, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:notificationPayment: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.NotificationPayment)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationPayment (19) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:notificationPayment: ", p), err) }
  return err
}

func (p *Settings) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacySyncContacts", thrift.BOOL, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:privacySyncContacts: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacySyncContacts)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacySyncContacts (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:privacySyncContacts: ", p), err) }
  return err
}

func (p *Settings) writeField21(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacySearchByPhoneNumber", thrift.BOOL, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:privacySearchByPhoneNumber: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacySearchByPhoneNumber)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacySearchByPhoneNumber (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:privacySearchByPhoneNumber: ", p), err) }
  return err
}

func (p *Settings) writeField22(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacySearchByUserid", thrift.BOOL, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:privacySearchByUserid: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacySearchByUserid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacySearchByUserid (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:privacySearchByUserid: ", p), err) }
  return err
}

func (p *Settings) writeField23(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacySearchByEmail", thrift.BOOL, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:privacySearchByEmail: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacySearchByEmail)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacySearchByEmail (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:privacySearchByEmail: ", p), err) }
  return err
}

func (p *Settings) writeField24(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacyAllowSecondaryDeviceLogin", thrift.BOOL, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:privacyAllowSecondaryDeviceLogin: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacyAllowSecondaryDeviceLogin)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyAllowSecondaryDeviceLogin (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:privacyAllowSecondaryDeviceLogin: ", p), err) }
  return err
}

func (p *Settings) writeField25(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacyProfileImagePostToMyhome", thrift.BOOL, 25); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:privacyProfileImagePostToMyhome: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacyProfileImagePostToMyhome)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyProfileImagePostToMyhome (25) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 25:privacyProfileImagePostToMyhome: ", p), err) }
  return err
}

func (p *Settings) writeField26(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacyReceiveMessagesFromNotFriend", thrift.BOOL, 26); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:privacyReceiveMessagesFromNotFriend: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacyReceiveMessagesFromNotFriend)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyReceiveMessagesFromNotFriend (26) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 26:privacyReceiveMessagesFromNotFriend: ", p), err) }
  return err
}

func (p *Settings) writeField27(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacyAgreeUseLineCoinToPaidCall", thrift.BOOL, 27); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:privacyAgreeUseLineCoinToPaidCall: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacyAgreeUseLineCoinToPaidCall)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyAgreeUseLineCoinToPaidCall (27) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 27:privacyAgreeUseLineCoinToPaidCall: ", p), err) }
  return err
}

func (p *Settings) writeField28(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacyAgreeUsePaidCall", thrift.BOOL, 28); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:privacyAgreeUsePaidCall: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacyAgreeUsePaidCall)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyAgreeUsePaidCall (28) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 28:privacyAgreeUsePaidCall: ", p), err) }
  return err
}

func (p *Settings) writeField29(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacyAllowFriendRequest", thrift.BOOL, 29); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 29:privacyAllowFriendRequest: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacyAllowFriendRequest)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyAllowFriendRequest (29) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 29:privacyAllowFriendRequest: ", p), err) }
  return err
}

func (p *Settings) writeField30(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contactMyTicket", thrift.STRING, 30); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:contactMyTicket: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ContactMyTicket)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contactMyTicket (30) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 30:contactMyTicket: ", p), err) }
  return err
}

func (p *Settings) writeField40(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "identityProvider", thrift.I32, 40); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:identityProvider: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.IdentityProvider)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.identityProvider (40) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 40:identityProvider: ", p), err) }
  return err
}

func (p *Settings) writeField41(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "identityIdentifier", thrift.STRING, 41); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 41:identityIdentifier: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.IdentityIdentifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.identityIdentifier (41) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 41:identityIdentifier: ", p), err) }
  return err
}

func (p *Settings) writeField42(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "snsAccounts", thrift.MAP, 42); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 42:snsAccounts: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.STRING, len(p.SnsAccounts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.SnsAccounts {
    if err := oprot.WriteI32(ctx, int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 42:snsAccounts: ", p), err) }
  return err
}

func (p *Settings) writeField43(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "phoneRegistration", thrift.BOOL, 43); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 43:phoneRegistration: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PhoneRegistration)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phoneRegistration (43) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 43:phoneRegistration: ", p), err) }
  return err
}

func (p *Settings) writeField44(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "emailConfirmationStatus", thrift.I32, 44); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 44:emailConfirmationStatus: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.EmailConfirmationStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.emailConfirmationStatus (44) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 44:emailConfirmationStatus: ", p), err) }
  return err
}

func (p *Settings) writeField45(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "accountMigrationPincodeType", thrift.I32, 45); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 45:accountMigrationPincodeType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.AccountMigrationPincodeType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accountMigrationPincodeType (45) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 45:accountMigrationPincodeType: ", p), err) }
  return err
}

func (p *Settings) writeField46(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "enforcedInputAccountMigrationPincode", thrift.BOOL, 46); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 46:enforcedInputAccountMigrationPincode: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.EnforcedInputAccountMigrationPincode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.enforcedInputAccountMigrationPincode (46) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 46:enforcedInputAccountMigrationPincode: ", p), err) }
  return err
}

func (p *Settings) writeField47(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "securityCenterSettingsType", thrift.I32, 47); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 47:securityCenterSettingsType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SecurityCenterSettingsType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.securityCenterSettingsType (47) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 47:securityCenterSettingsType: ", p), err) }
  return err
}

func (p *Settings) writeField48(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "allowUnregistrationSecondaryDevice", thrift.BOOL, 48); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 48:allowUnregistrationSecondaryDevice: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.AllowUnregistrationSecondaryDevice)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.allowUnregistrationSecondaryDevice (48) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 48:allowUnregistrationSecondaryDevice: ", p), err) }
  return err
}

func (p *Settings) writeField50(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "preferenceLocale", thrift.STRING, 50); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 50:preferenceLocale: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PreferenceLocale)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.preferenceLocale (50) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 50:preferenceLocale: ", p), err) }
  return err
}

func (p *Settings) writeField60(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "customModes", thrift.I32, 60); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 60:customModes: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.CustomModes)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.customModes (60) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 60:customModes: ", p), err) }
  return err
}

func (p *Settings) writeField61(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "e2eeEnable", thrift.BOOL, 61); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 61:e2eeEnable: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.E2eeEnable)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.e2eeEnable (61) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 61:e2eeEnable: ", p), err) }
  return err
}

func (p *Settings) writeField62(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hitokotoBackupRequested", thrift.BOOL, 62); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 62:hitokotoBackupRequested: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.HitokotoBackupRequested)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hitokotoBackupRequested (62) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 62:hitokotoBackupRequested: ", p), err) }
  return err
}

func (p *Settings) writeField63(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacyProfileMusicPostToMyhome", thrift.BOOL, 63); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 63:privacyProfileMusicPostToMyhome: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacyProfileMusicPostToMyhome)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyProfileMusicPostToMyhome (63) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 63:privacyProfileMusicPostToMyhome: ", p), err) }
  return err
}

func (p *Settings) writeField65(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacyAllowNearby", thrift.BOOL, 65); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 65:privacyAllowNearby: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacyAllowNearby)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyAllowNearby (65) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 65:privacyAllowNearby: ", p), err) }
  return err
}

func (p *Settings) writeField66(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agreementNearbyTime", thrift.I64, 66); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 66:agreementNearbyTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgreementNearbyTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementNearbyTime (66) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 66:agreementNearbyTime: ", p), err) }
  return err
}

func (p *Settings) writeField67(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agreementSquareTime", thrift.I64, 67); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 67:agreementSquareTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgreementSquareTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementSquareTime (67) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 67:agreementSquareTime: ", p), err) }
  return err
}

func (p *Settings) writeField68(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notificationMention", thrift.BOOL, 68); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 68:notificationMention: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.NotificationMention)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationMention (68) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 68:notificationMention: ", p), err) }
  return err
}

func (p *Settings) writeField69(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "botUseAgreementAcceptedAt", thrift.I64, 69); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 69:botUseAgreementAcceptedAt: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.BotUseAgreementAcceptedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.botUseAgreementAcceptedAt (69) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 69:botUseAgreementAcceptedAt: ", p), err) }
  return err
}

func (p *Settings) writeField70(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agreementShakeFunction", thrift.I64, 70); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 70:agreementShakeFunction: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgreementShakeFunction)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementShakeFunction (70) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 70:agreementShakeFunction: ", p), err) }
  return err
}

func (p *Settings) writeField71(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agreementMobileContactName", thrift.I64, 71); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 71:agreementMobileContactName: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgreementMobileContactName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementMobileContactName (71) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 71:agreementMobileContactName: ", p), err) }
  return err
}

func (p *Settings) writeField72(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notificationThumbnail", thrift.BOOL, 72); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 72:notificationThumbnail: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.NotificationThumbnail)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationThumbnail (72) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 72:notificationThumbnail: ", p), err) }
  return err
}

func (p *Settings) writeField73(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agreementSoundToText", thrift.I64, 73); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 73:agreementSoundToText: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgreementSoundToText)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementSoundToText (73) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 73:agreementSoundToText: ", p), err) }
  return err
}

func (p *Settings) writeField74(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacyPolicyVersion", thrift.STRING, 74); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 74:privacyPolicyVersion: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PrivacyPolicyVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyPolicyVersion (74) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 74:privacyPolicyVersion: ", p), err) }
  return err
}

func (p *Settings) writeField75(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agreementAdByWebAccess", thrift.I64, 75); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 75:agreementAdByWebAccess: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgreementAdByWebAccess)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementAdByWebAccess (75) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 75:agreementAdByWebAccess: ", p), err) }
  return err
}

func (p *Settings) writeField76(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agreementPhoneNumberMatching", thrift.I64, 76); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 76:agreementPhoneNumberMatching: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgreementPhoneNumberMatching)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementPhoneNumberMatching (76) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 76:agreementPhoneNumberMatching: ", p), err) }
  return err
}

func (p *Settings) writeField77(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agreementCommunicationInfo", thrift.I64, 77); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 77:agreementCommunicationInfo: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgreementCommunicationInfo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementCommunicationInfo (77) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 77:agreementCommunicationInfo: ", p), err) }
  return err
}

func (p *Settings) writeField78(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacySharePersonalInfoToFriends", thrift.I32, 78); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 78:privacySharePersonalInfoToFriends: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PrivacySharePersonalInfoToFriends)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacySharePersonalInfoToFriends (78) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 78:privacySharePersonalInfoToFriends: ", p), err) }
  return err
}

func (p *Settings) writeField79(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agreementThingsWirelessCommunication", thrift.I64, 79); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 79:agreementThingsWirelessCommunication: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgreementThingsWirelessCommunication)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementThingsWirelessCommunication (79) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 79:agreementThingsWirelessCommunication: ", p), err) }
  return err
}

func (p *Settings) writeField80(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agreementGdpr", thrift.I64, 80); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 80:agreementGdpr: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgreementGdpr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementGdpr (80) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 80:agreementGdpr: ", p), err) }
  return err
}

func (p *Settings) writeField81(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacyStatusMessageHistory", thrift.I32, 81); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 81:privacyStatusMessageHistory: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PrivacyStatusMessageHistory)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyStatusMessageHistory (81) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 81:privacyStatusMessageHistory: ", p), err) }
  return err
}

func (p *Settings) writeField82(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agreementProvideLocation", thrift.I64, 82); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 82:agreementProvideLocation: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgreementProvideLocation)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementProvideLocation (82) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 82:agreementProvideLocation: ", p), err) }
  return err
}

func (p *Settings) writeField83(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agreementBeacon", thrift.I64, 83); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 83:agreementBeacon: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgreementBeacon)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementBeacon (83) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 83:agreementBeacon: ", p), err) }
  return err
}

func (p *Settings) writeField85(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacyAllowProfileHistory", thrift.I32, 85); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 85:privacyAllowProfileHistory: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PrivacyAllowProfileHistory)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyAllowProfileHistory (85) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 85:privacyAllowProfileHistory: ", p), err) }
  return err
}

func (p *Settings) writeField86(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agreementContentsSuggest", thrift.I64, 86); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 86:agreementContentsSuggest: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgreementContentsSuggest)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementContentsSuggest (86) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 86:agreementContentsSuggest: ", p), err) }
  return err
}

func (p *Settings) writeField87(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agreementContentsSuggestDataCollection", thrift.I64, 87); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 87:agreementContentsSuggestDataCollection: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgreementContentsSuggestDataCollection)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementContentsSuggestDataCollection (87) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 87:agreementContentsSuggestDataCollection: ", p), err) }
  return err
}

func (p *Settings) writeField88(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacyAgeResult", thrift.I32, 88); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 88:privacyAgeResult: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PrivacyAgeResult_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyAgeResult (88) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 88:privacyAgeResult: ", p), err) }
  return err
}

func (p *Settings) writeField89(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacyAgeResultReceived", thrift.BOOL, 89); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 89:privacyAgeResultReceived: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacyAgeResultReceived)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyAgeResultReceived (89) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 89:privacyAgeResultReceived: ", p), err) }
  return err
}

func (p *Settings) writeField90(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agreementOcrImageCollection", thrift.I64, 90); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 90:agreementOcrImageCollection: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgreementOcrImageCollection)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementOcrImageCollection (90) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 90:agreementOcrImageCollection: ", p), err) }
  return err
}

func (p *Settings) writeField91(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacyAllowFollow", thrift.BOOL, 91); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 91:privacyAllowFollow: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacyAllowFollow)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyAllowFollow (91) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 91:privacyAllowFollow: ", p), err) }
  return err
}

func (p *Settings) writeField92(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "privacyShowFollowList", thrift.BOOL, 92); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 92:privacyShowFollowList: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.PrivacyShowFollowList)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyShowFollowList (92) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 92:privacyShowFollowList: ", p), err) }
  return err
}

func (p *Settings) Equals(other *Settings) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.NotificationEnable != other.NotificationEnable { return false }
  if p.NotificationMuteExpiration != other.NotificationMuteExpiration { return false }
  if p.NotificationNewMessage != other.NotificationNewMessage { return false }
  if p.NotificationGroupInvitation != other.NotificationGroupInvitation { return false }
  if p.NotificationShowMessage != other.NotificationShowMessage { return false }
  if p.NotificationIncomingCall != other.NotificationIncomingCall { return false }
  if p.NotificationSoundMessage != other.NotificationSoundMessage { return false }
  if p.NotificationSoundGroup != other.NotificationSoundGroup { return false }
  if p.NotificationDisabledWithSub != other.NotificationDisabledWithSub { return false }
  if p.NotificationPayment != other.NotificationPayment { return false }
  if p.PrivacySyncContacts != other.PrivacySyncContacts { return false }
  if p.PrivacySearchByPhoneNumber != other.PrivacySearchByPhoneNumber { return false }
  if p.PrivacySearchByUserid != other.PrivacySearchByUserid { return false }
  if p.PrivacySearchByEmail != other.PrivacySearchByEmail { return false }
  if p.PrivacyAllowSecondaryDeviceLogin != other.PrivacyAllowSecondaryDeviceLogin { return false }
  if p.PrivacyProfileImagePostToMyhome != other.PrivacyProfileImagePostToMyhome { return false }
  if p.PrivacyReceiveMessagesFromNotFriend != other.PrivacyReceiveMessagesFromNotFriend { return false }
  if p.PrivacyAgreeUseLineCoinToPaidCall != other.PrivacyAgreeUseLineCoinToPaidCall { return false }
  if p.PrivacyAgreeUsePaidCall != other.PrivacyAgreeUsePaidCall { return false }
  if p.PrivacyAllowFriendRequest != other.PrivacyAllowFriendRequest { return false }
  if p.ContactMyTicket != other.ContactMyTicket { return false }
  if p.IdentityProvider != other.IdentityProvider { return false }
  if p.IdentityIdentifier != other.IdentityIdentifier { return false }
  if len(p.SnsAccounts) != len(other.SnsAccounts) { return false }
  for k, _tgt := range p.SnsAccounts {
    _src37 := other.SnsAccounts[k]
    if _tgt != _src37 { return false }
  }
  if p.PhoneRegistration != other.PhoneRegistration { return false }
  if p.EmailConfirmationStatus != other.EmailConfirmationStatus { return false }
  if p.AccountMigrationPincodeType != other.AccountMigrationPincodeType { return false }
  if p.EnforcedInputAccountMigrationPincode != other.EnforcedInputAccountMigrationPincode { return false }
  if p.SecurityCenterSettingsType != other.SecurityCenterSettingsType { return false }
  if p.AllowUnregistrationSecondaryDevice != other.AllowUnregistrationSecondaryDevice { return false }
  if p.PreferenceLocale != other.PreferenceLocale { return false }
  if p.CustomModes != other.CustomModes { return false }
  if p.E2eeEnable != other.E2eeEnable { return false }
  if p.HitokotoBackupRequested != other.HitokotoBackupRequested { return false }
  if p.PrivacyProfileMusicPostToMyhome != other.PrivacyProfileMusicPostToMyhome { return false }
  if p.PrivacyAllowNearby != other.PrivacyAllowNearby { return false }
  if p.AgreementNearbyTime != other.AgreementNearbyTime { return false }
  if p.AgreementSquareTime != other.AgreementSquareTime { return false }
  if p.NotificationMention != other.NotificationMention { return false }
  if p.BotUseAgreementAcceptedAt != other.BotUseAgreementAcceptedAt { return false }
  if p.AgreementShakeFunction != other.AgreementShakeFunction { return false }
  if p.AgreementMobileContactName != other.AgreementMobileContactName { return false }
  if p.NotificationThumbnail != other.NotificationThumbnail { return false }
  if p.AgreementSoundToText != other.AgreementSoundToText { return false }
  if p.PrivacyPolicyVersion != other.PrivacyPolicyVersion { return false }
  if p.AgreementAdByWebAccess != other.AgreementAdByWebAccess { return false }
  if p.AgreementPhoneNumberMatching != other.AgreementPhoneNumberMatching { return false }
  if p.AgreementCommunicationInfo != other.AgreementCommunicationInfo { return false }
  if p.PrivacySharePersonalInfoToFriends != other.PrivacySharePersonalInfoToFriends { return false }
  if p.AgreementThingsWirelessCommunication != other.AgreementThingsWirelessCommunication { return false }
  if p.AgreementGdpr != other.AgreementGdpr { return false }
  if p.PrivacyStatusMessageHistory != other.PrivacyStatusMessageHistory { return false }
  if p.AgreementProvideLocation != other.AgreementProvideLocation { return false }
  if p.AgreementBeacon != other.AgreementBeacon { return false }
  if p.PrivacyAllowProfileHistory != other.PrivacyAllowProfileHistory { return false }
  if p.AgreementContentsSuggest != other.AgreementContentsSuggest { return false }
  if p.AgreementContentsSuggestDataCollection != other.AgreementContentsSuggestDataCollection { return false }
  if p.PrivacyAgeResult_ != other.PrivacyAgeResult_ { return false }
  if p.PrivacyAgeResultReceived != other.PrivacyAgeResultReceived { return false }
  if p.AgreementOcrImageCollection != other.AgreementOcrImageCollection { return false }
  if p.PrivacyAllowFollow != other.PrivacyAllowFollow { return false }
  if p.PrivacyShowFollowList != other.PrivacyShowFollowList { return false }
  return true
}

func (p *Settings) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Settings(%+v)", *p)
}

// Attributes:
//  - Luid
//  - ContactType
//  - ContactKey
//  - Contact
type ContactRegistration struct {
  Contact *Contact `thrift:"contact,1" db:"contact" json:"contact"`
  // unused fields # 2 to 9
  Luid string `thrift:"luid,10" db:"luid" json:"luid"`
  ContactType ContactType `thrift:"contactType,11" db:"contactType" json:"contactType"`
  ContactKey string `thrift:"contactKey,12" db:"contactKey" json:"contactKey"`
}

func NewContactRegistration() *ContactRegistration {
  return &ContactRegistration{}
}


func (p *ContactRegistration) GetLuid() string {
  return p.Luid
}

func (p *ContactRegistration) GetContactType() ContactType {
  return p.ContactType
}

func (p *ContactRegistration) GetContactKey() string {
  return p.ContactKey
}
var ContactRegistration_Contact_DEFAULT *Contact
func (p *ContactRegistration) GetContact() *Contact {
  if !p.IsSetContact() {
    return ContactRegistration_Contact_DEFAULT
  }
return p.Contact
}
func (p *ContactRegistration) IsSetContact() bool {
  return p.Contact != nil
}

func (p *ContactRegistration) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ContactRegistration)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Luid = v
}
  return nil
}

func (p *ContactRegistration)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  temp := ContactType(v)
  p.ContactType = temp
}
  return nil
}

func (p *ContactRegistration)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.ContactKey = v
}
  return nil
}

func (p *ContactRegistration)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Contact = &Contact{}
  if err := p.Contact.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Contact), err)
  }
  return nil
}

func (p *ContactRegistration) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ContactRegistration"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ContactRegistration) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contact", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:contact: ", p), err) }
  if err := p.Contact.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Contact), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:contact: ", p), err) }
  return err
}

func (p *ContactRegistration) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "luid", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:luid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Luid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.luid (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:luid: ", p), err) }
  return err
}

func (p *ContactRegistration) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contactType", thrift.I32, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:contactType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ContactType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contactType (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:contactType: ", p), err) }
  return err
}

func (p *ContactRegistration) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contactKey", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:contactKey: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ContactKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contactKey (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:contactKey: ", p), err) }
  return err
}

func (p *ContactRegistration) Equals(other *ContactRegistration) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Contact.Equals(other.Contact) { return false }
  if p.Luid != other.Luid { return false }
  if p.ContactType != other.ContactType { return false }
  if p.ContactKey != other.ContactKey { return false }
  return true
}

func (p *ContactRegistration) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ContactRegistration(%+v)", *p)
}

// Attributes:
//  - Type
//  - Luid
//  - Phones
//  - Emails
//  - Userids
//  - MobileContactName
//  - PhoneticName
type ContactModification struct {
  Type ModificationType `thrift:"type,1" db:"type" json:"type"`
  Luid string `thrift:"luid,2" db:"luid" json:"luid"`
  // unused fields # 3 to 10
  Phones []string `thrift:"phones,11" db:"phones" json:"phones"`
  Emails []string `thrift:"emails,12" db:"emails" json:"emails"`
  Userids []string `thrift:"userids,13" db:"userids" json:"userids"`
  MobileContactName string `thrift:"mobileContactName,14" db:"mobileContactName" json:"mobileContactName"`
  PhoneticName string `thrift:"phoneticName,15" db:"phoneticName" json:"phoneticName"`
}

func NewContactModification() *ContactModification {
  return &ContactModification{}
}


func (p *ContactModification) GetType() ModificationType {
  return p.Type
}

func (p *ContactModification) GetLuid() string {
  return p.Luid
}

func (p *ContactModification) GetPhones() []string {
  return p.Phones
}

func (p *ContactModification) GetEmails() []string {
  return p.Emails
}

func (p *ContactModification) GetUserids() []string {
  return p.Userids
}

func (p *ContactModification) GetMobileContactName() string {
  return p.MobileContactName
}

func (p *ContactModification) GetPhoneticName() string {
  return p.PhoneticName
}
func (p *ContactModification) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ContactModification)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ModificationType(v)
  p.Type = temp
}
  return nil
}

func (p *ContactModification)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Luid = v
}
  return nil
}

func (p *ContactModification)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Phones =  tSlice
  for i := 0; i < size; i ++ {
var _elem38 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem38 = v
}
    p.Phones = append(p.Phones, _elem38)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ContactModification)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Emails =  tSlice
  for i := 0; i < size; i ++ {
var _elem39 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem39 = v
}
    p.Emails = append(p.Emails, _elem39)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ContactModification)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Userids =  tSlice
  for i := 0; i < size; i ++ {
var _elem40 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem40 = v
}
    p.Userids = append(p.Userids, _elem40)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ContactModification)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.MobileContactName = v
}
  return nil
}

func (p *ContactModification)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.PhoneticName = v
}
  return nil
}

func (p *ContactModification) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ContactModification"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ContactModification) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *ContactModification) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "luid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:luid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Luid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.luid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:luid: ", p), err) }
  return err
}

func (p *ContactModification) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "phones", thrift.LIST, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:phones: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Phones)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Phones {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:phones: ", p), err) }
  return err
}

func (p *ContactModification) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "emails", thrift.LIST, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:emails: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Emails)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Emails {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:emails: ", p), err) }
  return err
}

func (p *ContactModification) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "userids", thrift.LIST, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:userids: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Userids)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Userids {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:userids: ", p), err) }
  return err
}

func (p *ContactModification) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mobileContactName", thrift.STRING, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:mobileContactName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MobileContactName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mobileContactName (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:mobileContactName: ", p), err) }
  return err
}

func (p *ContactModification) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "phoneticName", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:phoneticName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PhoneticName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phoneticName (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:phoneticName: ", p), err) }
  return err
}

func (p *ContactModification) Equals(other *ContactModification) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Type != other.Type { return false }
  if p.Luid != other.Luid { return false }
  if len(p.Phones) != len(other.Phones) { return false }
  for i, _tgt := range p.Phones {
    _src41 := other.Phones[i]
    if _tgt != _src41 { return false }
  }
  if len(p.Emails) != len(other.Emails) { return false }
  for i, _tgt := range p.Emails {
    _src42 := other.Emails[i]
    if _tgt != _src42 { return false }
  }
  if len(p.Userids) != len(other.Userids) { return false }
  for i, _tgt := range p.Userids {
    _src43 := other.Userids[i]
    if _tgt != _src43 { return false }
  }
  if p.MobileContactName != other.MobileContactName { return false }
  if p.PhoneticName != other.PhoneticName { return false }
  return true
}

func (p *ContactModification) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ContactModification(%+v)", *p)
}

type InviteIntoChatResponse struct {
}

func NewInviteIntoChatResponse() *InviteIntoChatResponse {
  return &InviteIntoChatResponse{}
}

func (p *InviteIntoChatResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InviteIntoChatResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "InviteIntoChatResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InviteIntoChatResponse) Equals(other *InviteIntoChatResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *InviteIntoChatResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InviteIntoChatResponse(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ChatMid
//  - TargetUserMids
type InviteIntoChatRequest struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
  TargetUserMids []string `thrift:"targetUserMids,3" db:"targetUserMids" json:"targetUserMids"`
}

func NewInviteIntoChatRequest() *InviteIntoChatRequest {
  return &InviteIntoChatRequest{}
}


func (p *InviteIntoChatRequest) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *InviteIntoChatRequest) GetChatMid() string {
  return p.ChatMid
}

func (p *InviteIntoChatRequest) GetTargetUserMids() []string {
  return p.TargetUserMids
}
func (p *InviteIntoChatRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InviteIntoChatRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *InviteIntoChatRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *InviteIntoChatRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.TargetUserMids =  tSet
  for i := 0; i < size; i ++ {
var _elem44 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem44 = v
}
    p.TargetUserMids = append(p.TargetUserMids, _elem44)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *InviteIntoChatRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "InviteIntoChatRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InviteIntoChatRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *InviteIntoChatRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *InviteIntoChatRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "targetUserMids", thrift.SET, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:targetUserMids: ", p), err) }
  if err := oprot.WriteSetBegin(ctx, thrift.STRING, len(p.TargetUserMids)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.TargetUserMids); i++ {
    for j := i+1; j<len(p.TargetUserMids); j++ {
      if func(tgt, src string) bool {
        if tgt != src { return false }
        return true
      }(p.TargetUserMids[i], p.TargetUserMids[j]) {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.TargetUserMids))
      }
    }
  }
  for _, v := range p.TargetUserMids {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(ctx); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:targetUserMids: ", p), err) }
  return err
}

func (p *InviteIntoChatRequest) Equals(other *InviteIntoChatRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ReqSeq != other.ReqSeq { return false }
  if p.ChatMid != other.ChatMid { return false }
  if len(p.TargetUserMids) != len(other.TargetUserMids) { return false }
  for i, _tgt := range p.TargetUserMids {
    _src45 := other.TargetUserMids[i]
    if _tgt != _src45 { return false }
  }
  return true
}

func (p *InviteIntoChatRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InviteIntoChatRequest(%+v)", *p)
}

type DeleteSelfFromChatResponse struct {
}

func NewDeleteSelfFromChatResponse() *DeleteSelfFromChatResponse {
  return &DeleteSelfFromChatResponse{}
}

func (p *DeleteSelfFromChatResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeleteSelfFromChatResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DeleteSelfFromChatResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeleteSelfFromChatResponse) Equals(other *DeleteSelfFromChatResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *DeleteSelfFromChatResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeleteSelfFromChatResponse(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ChatMid
//  - LastSeenMessageDeliveredTime
//  - LastSeenMessageId
//  - LastMessageDeliveredTime
//  - LastMessageId
type DeleteSelfFromChatRequest struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
  LastSeenMessageDeliveredTime int64 `thrift:"lastSeenMessageDeliveredTime,3" db:"lastSeenMessageDeliveredTime" json:"lastSeenMessageDeliveredTime"`
  LastSeenMessageId string `thrift:"lastSeenMessageId,4" db:"lastSeenMessageId" json:"lastSeenMessageId"`
  LastMessageDeliveredTime int64 `thrift:"lastMessageDeliveredTime,5" db:"lastMessageDeliveredTime" json:"lastMessageDeliveredTime"`
  LastMessageId string `thrift:"lastMessageId,6" db:"lastMessageId" json:"lastMessageId"`
}

func NewDeleteSelfFromChatRequest() *DeleteSelfFromChatRequest {
  return &DeleteSelfFromChatRequest{}
}


func (p *DeleteSelfFromChatRequest) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *DeleteSelfFromChatRequest) GetChatMid() string {
  return p.ChatMid
}

func (p *DeleteSelfFromChatRequest) GetLastSeenMessageDeliveredTime() int64 {
  return p.LastSeenMessageDeliveredTime
}

func (p *DeleteSelfFromChatRequest) GetLastSeenMessageId() string {
  return p.LastSeenMessageId
}

func (p *DeleteSelfFromChatRequest) GetLastMessageDeliveredTime() int64 {
  return p.LastMessageDeliveredTime
}

func (p *DeleteSelfFromChatRequest) GetLastMessageId() string {
  return p.LastMessageId
}
func (p *DeleteSelfFromChatRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeleteSelfFromChatRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *DeleteSelfFromChatRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *DeleteSelfFromChatRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LastSeenMessageDeliveredTime = v
}
  return nil
}

func (p *DeleteSelfFromChatRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.LastSeenMessageId = v
}
  return nil
}

func (p *DeleteSelfFromChatRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.LastMessageDeliveredTime = v
}
  return nil
}

func (p *DeleteSelfFromChatRequest)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.LastMessageId = v
}
  return nil
}

func (p *DeleteSelfFromChatRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DeleteSelfFromChatRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeleteSelfFromChatRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *DeleteSelfFromChatRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *DeleteSelfFromChatRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastSeenMessageDeliveredTime", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lastSeenMessageDeliveredTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LastSeenMessageDeliveredTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastSeenMessageDeliveredTime (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lastSeenMessageDeliveredTime: ", p), err) }
  return err
}

func (p *DeleteSelfFromChatRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastSeenMessageId", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:lastSeenMessageId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.LastSeenMessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastSeenMessageId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:lastSeenMessageId: ", p), err) }
  return err
}

func (p *DeleteSelfFromChatRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastMessageDeliveredTime", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:lastMessageDeliveredTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LastMessageDeliveredTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastMessageDeliveredTime (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:lastMessageDeliveredTime: ", p), err) }
  return err
}

func (p *DeleteSelfFromChatRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastMessageId", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:lastMessageId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.LastMessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastMessageId (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:lastMessageId: ", p), err) }
  return err
}

func (p *DeleteSelfFromChatRequest) Equals(other *DeleteSelfFromChatRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ReqSeq != other.ReqSeq { return false }
  if p.ChatMid != other.ChatMid { return false }
  if p.LastSeenMessageDeliveredTime != other.LastSeenMessageDeliveredTime { return false }
  if p.LastSeenMessageId != other.LastSeenMessageId { return false }
  if p.LastMessageDeliveredTime != other.LastMessageDeliveredTime { return false }
  if p.LastMessageId != other.LastMessageId { return false }
  return true
}

func (p *DeleteSelfFromChatRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeleteSelfFromChatRequest(%+v)", *p)
}

// Attributes:
//  - MemberChatMids
//  - InvitedChatMids
type GetAllChatMidsResponse struct {
  MemberChatMids []string `thrift:"memberChatMids,1" db:"memberChatMids" json:"memberChatMids"`
  InvitedChatMids []string `thrift:"invitedChatMids,2" db:"invitedChatMids" json:"invitedChatMids"`
}

func NewGetAllChatMidsResponse() *GetAllChatMidsResponse {
  return &GetAllChatMidsResponse{}
}


func (p *GetAllChatMidsResponse) GetMemberChatMids() []string {
  return p.MemberChatMids
}

func (p *GetAllChatMidsResponse) GetInvitedChatMids() []string {
  return p.InvitedChatMids
}
func (p *GetAllChatMidsResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetAllChatMidsResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.MemberChatMids =  tSet
  for i := 0; i < size; i ++ {
var _elem46 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem46 = v
}
    p.MemberChatMids = append(p.MemberChatMids, _elem46)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *GetAllChatMidsResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.InvitedChatMids =  tSet
  for i := 0; i < size; i ++ {
var _elem47 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem47 = v
}
    p.InvitedChatMids = append(p.InvitedChatMids, _elem47)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *GetAllChatMidsResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetAllChatMidsResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetAllChatMidsResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "memberChatMids", thrift.SET, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberChatMids: ", p), err) }
  if err := oprot.WriteSetBegin(ctx, thrift.STRING, len(p.MemberChatMids)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.MemberChatMids); i++ {
    for j := i+1; j<len(p.MemberChatMids); j++ {
      if func(tgt, src string) bool {
        if tgt != src { return false }
        return true
      }(p.MemberChatMids[i], p.MemberChatMids[j]) {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.MemberChatMids))
      }
    }
  }
  for _, v := range p.MemberChatMids {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(ctx); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberChatMids: ", p), err) }
  return err
}

func (p *GetAllChatMidsResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "invitedChatMids", thrift.SET, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:invitedChatMids: ", p), err) }
  if err := oprot.WriteSetBegin(ctx, thrift.STRING, len(p.InvitedChatMids)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.InvitedChatMids); i++ {
    for j := i+1; j<len(p.InvitedChatMids); j++ {
      if func(tgt, src string) bool {
        if tgt != src { return false }
        return true
      }(p.InvitedChatMids[i], p.InvitedChatMids[j]) {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.InvitedChatMids))
      }
    }
  }
  for _, v := range p.InvitedChatMids {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(ctx); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:invitedChatMids: ", p), err) }
  return err
}

func (p *GetAllChatMidsResponse) Equals(other *GetAllChatMidsResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.MemberChatMids) != len(other.MemberChatMids) { return false }
  for i, _tgt := range p.MemberChatMids {
    _src48 := other.MemberChatMids[i]
    if _tgt != _src48 { return false }
  }
  if len(p.InvitedChatMids) != len(other.InvitedChatMids) { return false }
  for i, _tgt := range p.InvitedChatMids {
    _src49 := other.InvitedChatMids[i]
    if _tgt != _src49 { return false }
  }
  return true
}

func (p *GetAllChatMidsResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetAllChatMidsResponse(%+v)", *p)
}

// Attributes:
//  - WithMemberChats
//  - WithInvitedChats
type GetAllChatMidsRequest struct {
  WithMemberChats bool `thrift:"withMemberChats,1" db:"withMemberChats" json:"withMemberChats"`
  WithInvitedChats bool `thrift:"withInvitedChats,2" db:"withInvitedChats" json:"withInvitedChats"`
}

func NewGetAllChatMidsRequest() *GetAllChatMidsRequest {
  return &GetAllChatMidsRequest{}
}


func (p *GetAllChatMidsRequest) GetWithMemberChats() bool {
  return p.WithMemberChats
}

func (p *GetAllChatMidsRequest) GetWithInvitedChats() bool {
  return p.WithInvitedChats
}
func (p *GetAllChatMidsRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetAllChatMidsRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.WithMemberChats = v
}
  return nil
}

func (p *GetAllChatMidsRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.WithInvitedChats = v
}
  return nil
}

func (p *GetAllChatMidsRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GetAllChatMidsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetAllChatMidsRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "withMemberChats", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:withMemberChats: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.WithMemberChats)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.withMemberChats (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:withMemberChats: ", p), err) }
  return err
}

func (p *GetAllChatMidsRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "withInvitedChats", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:withInvitedChats: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.WithInvitedChats)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.withInvitedChats (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:withInvitedChats: ", p), err) }
  return err
}

func (p *GetAllChatMidsRequest) Equals(other *GetAllChatMidsRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.WithMemberChats != other.WithMemberChats { return false }
  if p.WithInvitedChats != other.WithInvitedChats { return false }
  return true
}

func (p *GetAllChatMidsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetAllChatMidsRequest(%+v)", *p)
}

// Attributes:
//  - Chat
type CreateChatResponse struct {
  Chat *Chat `thrift:"chat,1" db:"chat" json:"chat"`
}

func NewCreateChatResponse() *CreateChatResponse {
  return &CreateChatResponse{}
}

var CreateChatResponse_Chat_DEFAULT *Chat
func (p *CreateChatResponse) GetChat() *Chat {
  if !p.IsSetChat() {
    return CreateChatResponse_Chat_DEFAULT
  }
return p.Chat
}
func (p *CreateChatResponse) IsSetChat() bool {
  return p.Chat != nil
}

func (p *CreateChatResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateChatResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Chat = &Chat{}
  if err := p.Chat.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Chat), err)
  }
  return nil
}

func (p *CreateChatResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CreateChatResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateChatResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chat", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:chat: ", p), err) }
  if err := p.Chat.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Chat), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:chat: ", p), err) }
  return err
}

func (p *CreateChatResponse) Equals(other *CreateChatResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Chat.Equals(other.Chat) { return false }
  return true
}

func (p *CreateChatResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateChatResponse(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Type
//  - Name
//  - TargetUserMids
//  - PicturePath
type CreateChatRequest struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  Type ChatType `thrift:"type,2" db:"type" json:"type"`
  Name string `thrift:"name,3" db:"name" json:"name"`
  TargetUserMids []string `thrift:"targetUserMids,4" db:"targetUserMids" json:"targetUserMids"`
  PicturePath string `thrift:"picturePath,5" db:"picturePath" json:"picturePath"`
}

func NewCreateChatRequest() *CreateChatRequest {
  return &CreateChatRequest{}
}


func (p *CreateChatRequest) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *CreateChatRequest) GetType() ChatType {
  return p.Type
}

func (p *CreateChatRequest) GetName() string {
  return p.Name
}

func (p *CreateChatRequest) GetTargetUserMids() []string {
  return p.TargetUserMids
}

func (p *CreateChatRequest) GetPicturePath() string {
  return p.PicturePath
}
func (p *CreateChatRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateChatRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *CreateChatRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := ChatType(v)
  p.Type = temp
}
  return nil
}

func (p *CreateChatRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *CreateChatRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.TargetUserMids =  tSet
  for i := 0; i < size; i ++ {
var _elem50 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem50 = v
}
    p.TargetUserMids = append(p.TargetUserMids, _elem50)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *CreateChatRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.PicturePath = v
}
  return nil
}

func (p *CreateChatRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CreateChatRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateChatRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *CreateChatRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *CreateChatRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:name: ", p), err) }
  return err
}

func (p *CreateChatRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "targetUserMids", thrift.SET, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:targetUserMids: ", p), err) }
  if err := oprot.WriteSetBegin(ctx, thrift.STRING, len(p.TargetUserMids)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.TargetUserMids); i++ {
    for j := i+1; j<len(p.TargetUserMids); j++ {
      if func(tgt, src string) bool {
        if tgt != src { return false }
        return true
      }(p.TargetUserMids[i], p.TargetUserMids[j]) {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.TargetUserMids))
      }
    }
  }
  for _, v := range p.TargetUserMids {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(ctx); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:targetUserMids: ", p), err) }
  return err
}

func (p *CreateChatRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "picturePath", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:picturePath: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PicturePath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.picturePath (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:picturePath: ", p), err) }
  return err
}

func (p *CreateChatRequest) Equals(other *CreateChatRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ReqSeq != other.ReqSeq { return false }
  if p.Type != other.Type { return false }
  if p.Name != other.Name { return false }
  if len(p.TargetUserMids) != len(other.TargetUserMids) { return false }
  for i, _tgt := range p.TargetUserMids {
    _src51 := other.TargetUserMids[i]
    if _tgt != _src51 { return false }
  }
  if p.PicturePath != other.PicturePath { return false }
  return true
}

func (p *CreateChatRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateChatRequest(%+v)", *p)
}

type AcceptChatInvitationResponse struct {
}

func NewAcceptChatInvitationResponse() *AcceptChatInvitationResponse {
  return &AcceptChatInvitationResponse{}
}

func (p *AcceptChatInvitationResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AcceptChatInvitationResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AcceptChatInvitationResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AcceptChatInvitationResponse) Equals(other *AcceptChatInvitationResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *AcceptChatInvitationResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AcceptChatInvitationResponse(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ChatMid
type AcceptChatInvitationRequest struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
}

func NewAcceptChatInvitationRequest() *AcceptChatInvitationRequest {
  return &AcceptChatInvitationRequest{}
}


func (p *AcceptChatInvitationRequest) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *AcceptChatInvitationRequest) GetChatMid() string {
  return p.ChatMid
}
func (p *AcceptChatInvitationRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AcceptChatInvitationRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *AcceptChatInvitationRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *AcceptChatInvitationRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AcceptChatInvitationRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AcceptChatInvitationRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *AcceptChatInvitationRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *AcceptChatInvitationRequest) Equals(other *AcceptChatInvitationRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ReqSeq != other.ReqSeq { return false }
  if p.ChatMid != other.ChatMid { return false }
  return true
}

func (p *AcceptChatInvitationRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AcceptChatInvitationRequest(%+v)", *p)
}

type RejectChatInvitationResponse struct {
}

func NewRejectChatInvitationResponse() *RejectChatInvitationResponse {
  return &RejectChatInvitationResponse{}
}

func (p *RejectChatInvitationResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RejectChatInvitationResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RejectChatInvitationResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RejectChatInvitationResponse) Equals(other *RejectChatInvitationResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *RejectChatInvitationResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RejectChatInvitationResponse(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ChatMid
type RejectChatInvitationRequest struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
}

func NewRejectChatInvitationRequest() *RejectChatInvitationRequest {
  return &RejectChatInvitationRequest{}
}


func (p *RejectChatInvitationRequest) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *RejectChatInvitationRequest) GetChatMid() string {
  return p.ChatMid
}
func (p *RejectChatInvitationRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RejectChatInvitationRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *RejectChatInvitationRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *RejectChatInvitationRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RejectChatInvitationRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RejectChatInvitationRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *RejectChatInvitationRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *RejectChatInvitationRequest) Equals(other *RejectChatInvitationRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ReqSeq != other.ReqSeq { return false }
  if p.ChatMid != other.ChatMid { return false }
  return true
}

func (p *RejectChatInvitationRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RejectChatInvitationRequest(%+v)", *p)
}

type DeleteOtherFromChatResponse struct {
}

func NewDeleteOtherFromChatResponse() *DeleteOtherFromChatResponse {
  return &DeleteOtherFromChatResponse{}
}

func (p *DeleteOtherFromChatResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeleteOtherFromChatResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DeleteOtherFromChatResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeleteOtherFromChatResponse) Equals(other *DeleteOtherFromChatResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *DeleteOtherFromChatResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeleteOtherFromChatResponse(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ChatMid
//  - TargetUserMids
type DeleteOtherFromChatRequest struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
  TargetUserMids []string `thrift:"targetUserMids,3" db:"targetUserMids" json:"targetUserMids"`
}

func NewDeleteOtherFromChatRequest() *DeleteOtherFromChatRequest {
  return &DeleteOtherFromChatRequest{}
}


func (p *DeleteOtherFromChatRequest) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *DeleteOtherFromChatRequest) GetChatMid() string {
  return p.ChatMid
}

func (p *DeleteOtherFromChatRequest) GetTargetUserMids() []string {
  return p.TargetUserMids
}
func (p *DeleteOtherFromChatRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeleteOtherFromChatRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *DeleteOtherFromChatRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *DeleteOtherFromChatRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.TargetUserMids =  tSet
  for i := 0; i < size; i ++ {
var _elem52 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem52 = v
}
    p.TargetUserMids = append(p.TargetUserMids, _elem52)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *DeleteOtherFromChatRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "DeleteOtherFromChatRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeleteOtherFromChatRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *DeleteOtherFromChatRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *DeleteOtherFromChatRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "targetUserMids", thrift.SET, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:targetUserMids: ", p), err) }
  if err := oprot.WriteSetBegin(ctx, thrift.STRING, len(p.TargetUserMids)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.TargetUserMids); i++ {
    for j := i+1; j<len(p.TargetUserMids); j++ {
      if func(tgt, src string) bool {
        if tgt != src { return false }
        return true
      }(p.TargetUserMids[i], p.TargetUserMids[j]) {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.TargetUserMids))
      }
    }
  }
  for _, v := range p.TargetUserMids {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(ctx); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:targetUserMids: ", p), err) }
  return err
}

func (p *DeleteOtherFromChatRequest) Equals(other *DeleteOtherFromChatRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ReqSeq != other.ReqSeq { return false }
  if p.ChatMid != other.ChatMid { return false }
  if len(p.TargetUserMids) != len(other.TargetUserMids) { return false }
  for i, _tgt := range p.TargetUserMids {
    _src53 := other.TargetUserMids[i]
    if _tgt != _src53 { return false }
  }
  return true
}

func (p *DeleteOtherFromChatRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeleteOtherFromChatRequest(%+v)", *p)
}

type CancelChatInvitationResponse struct {
}

func NewCancelChatInvitationResponse() *CancelChatInvitationResponse {
  return &CancelChatInvitationResponse{}
}

func (p *CancelChatInvitationResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CancelChatInvitationResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CancelChatInvitationResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CancelChatInvitationResponse) Equals(other *CancelChatInvitationResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *CancelChatInvitationResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CancelChatInvitationResponse(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ChatMid
//  - TargetUserMids
type CancelChatInvitationRequest struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
  TargetUserMids []string `thrift:"targetUserMids,3" db:"targetUserMids" json:"targetUserMids"`
}

func NewCancelChatInvitationRequest() *CancelChatInvitationRequest {
  return &CancelChatInvitationRequest{}
}


func (p *CancelChatInvitationRequest) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *CancelChatInvitationRequest) GetChatMid() string {
  return p.ChatMid
}

func (p *CancelChatInvitationRequest) GetTargetUserMids() []string {
  return p.TargetUserMids
}
func (p *CancelChatInvitationRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CancelChatInvitationRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *CancelChatInvitationRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *CancelChatInvitationRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.TargetUserMids =  tSet
  for i := 0; i < size; i ++ {
var _elem54 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem54 = v
}
    p.TargetUserMids = append(p.TargetUserMids, _elem54)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *CancelChatInvitationRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CancelChatInvitationRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CancelChatInvitationRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *CancelChatInvitationRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *CancelChatInvitationRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "targetUserMids", thrift.SET, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:targetUserMids: ", p), err) }
  if err := oprot.WriteSetBegin(ctx, thrift.STRING, len(p.TargetUserMids)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.TargetUserMids); i++ {
    for j := i+1; j<len(p.TargetUserMids); j++ {
      if func(tgt, src string) bool {
        if tgt != src { return false }
        return true
      }(p.TargetUserMids[i], p.TargetUserMids[j]) {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.TargetUserMids))
      }
    }
  }
  for _, v := range p.TargetUserMids {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(ctx); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:targetUserMids: ", p), err) }
  return err
}

func (p *CancelChatInvitationRequest) Equals(other *CancelChatInvitationRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ReqSeq != other.ReqSeq { return false }
  if p.ChatMid != other.ChatMid { return false }
  if len(p.TargetUserMids) != len(other.TargetUserMids) { return false }
  for i, _tgt := range p.TargetUserMids {
    _src55 := other.TargetUserMids[i]
    if _tgt != _src55 { return false }
  }
  return true
}

func (p *CancelChatInvitationRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CancelChatInvitationRequest(%+v)", *p)
}

// Attributes:
//  - TokenKey
//  - ExpirationTime
//  - IssueTime
//  - ApplicationType
//  - SystemName
//  - AccessLocation
type LoginSession struct {
  TokenKey string `thrift:"tokenKey,1" db:"tokenKey" json:"tokenKey"`
  // unused field # 2
  ExpirationTime int64 `thrift:"expirationTime,3" db:"expirationTime" json:"expirationTime"`
  IssueTime int64 `thrift:"issueTime,4" db:"issueTime" json:"issueTime"`
  // unused fields # 5 to 10
  ApplicationType ApplicationType `thrift:"applicationType,11" db:"applicationType" json:"applicationType"`
  SystemName string `thrift:"systemName,12" db:"systemName" json:"systemName"`
  // unused fields # 13 to 21
  AccessLocation string `thrift:"accessLocation,22" db:"accessLocation" json:"accessLocation"`
}

func NewLoginSession() *LoginSession {
  return &LoginSession{}
}


func (p *LoginSession) GetTokenKey() string {
  return p.TokenKey
}

func (p *LoginSession) GetExpirationTime() int64 {
  return p.ExpirationTime
}

func (p *LoginSession) GetIssueTime() int64 {
  return p.IssueTime
}

func (p *LoginSession) GetApplicationType() ApplicationType {
  return p.ApplicationType
}

func (p *LoginSession) GetSystemName() string {
  return p.SystemName
}

func (p *LoginSession) GetAccessLocation() string {
  return p.AccessLocation
}
func (p *LoginSession) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField22(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LoginSession)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TokenKey = v
}
  return nil
}

func (p *LoginSession)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ExpirationTime = v
}
  return nil
}

func (p *LoginSession)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IssueTime = v
}
  return nil
}

func (p *LoginSession)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  temp := ApplicationType(v)
  p.ApplicationType = temp
}
  return nil
}

func (p *LoginSession)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.SystemName = v
}
  return nil
}

func (p *LoginSession)  ReadField22(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.AccessLocation = v
}
  return nil
}

func (p *LoginSession) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "LoginSession"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField22(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LoginSession) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tokenKey", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tokenKey: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TokenKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tokenKey (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tokenKey: ", p), err) }
  return err
}

func (p *LoginSession) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "expirationTime", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:expirationTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ExpirationTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.expirationTime (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:expirationTime: ", p), err) }
  return err
}

func (p *LoginSession) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "issueTime", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:issueTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.IssueTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.issueTime (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:issueTime: ", p), err) }
  return err
}

func (p *LoginSession) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "applicationType", thrift.I32, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:applicationType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ApplicationType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.applicationType (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:applicationType: ", p), err) }
  return err
}

func (p *LoginSession) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "systemName", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:systemName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SystemName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.systemName (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:systemName: ", p), err) }
  return err
}

func (p *LoginSession) writeField22(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "accessLocation", thrift.STRING, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:accessLocation: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AccessLocation)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accessLocation (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:accessLocation: ", p), err) }
  return err
}

func (p *LoginSession) Equals(other *LoginSession) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.TokenKey != other.TokenKey { return false }
  if p.ExpirationTime != other.ExpirationTime { return false }
  if p.IssueTime != other.IssueTime { return false }
  if p.ApplicationType != other.ApplicationType { return false }
  if p.SystemName != other.SystemName { return false }
  if p.AccessLocation != other.AccessLocation { return false }
  return true
}

func (p *LoginSession) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LoginSession(%+v)", *p)
}

// Attributes:
//  - Keynm
//  - Nvalue
//  - Evalue
//  - SessionKey
type RSAKey struct {
  Keynm string `thrift:"keynm,1" db:"keynm" json:"keynm"`
  Nvalue string `thrift:"nvalue,2" db:"nvalue" json:"nvalue"`
  Evalue string `thrift:"evalue,3" db:"evalue" json:"evalue"`
  SessionKey string `thrift:"sessionKey,4" db:"sessionKey" json:"sessionKey"`
}

func NewRSAKey() *RSAKey {
  return &RSAKey{}
}


func (p *RSAKey) GetKeynm() string {
  return p.Keynm
}

func (p *RSAKey) GetNvalue() string {
  return p.Nvalue
}

func (p *RSAKey) GetEvalue() string {
  return p.Evalue
}

func (p *RSAKey) GetSessionKey() string {
  return p.SessionKey
}
func (p *RSAKey) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RSAKey)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Keynm = v
}
  return nil
}

func (p *RSAKey)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Nvalue = v
}
  return nil
}

func (p *RSAKey)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Evalue = v
}
  return nil
}

func (p *RSAKey)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.SessionKey = v
}
  return nil
}

func (p *RSAKey) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RSAKey"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RSAKey) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keynm", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:keynm: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Keynm)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keynm (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:keynm: ", p), err) }
  return err
}

func (p *RSAKey) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "nvalue", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nvalue: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Nvalue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nvalue (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nvalue: ", p), err) }
  return err
}

func (p *RSAKey) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "evalue", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:evalue: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Evalue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.evalue (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:evalue: ", p), err) }
  return err
}

func (p *RSAKey) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sessionKey", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sessionKey: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SessionKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionKey (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sessionKey: ", p), err) }
  return err
}

func (p *RSAKey) Equals(other *RSAKey) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Keynm != other.Keynm { return false }
  if p.Nvalue != other.Nvalue { return false }
  if p.Evalue != other.Evalue { return false }
  if p.SessionKey != other.SessionKey { return false }
  return true
}

func (p *RSAKey) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RSAKey(%+v)", *p)
}

// Attributes:
//  - AllowedTypes
//  - PublicKey
//  - SpecVersion
type E2EENegotiationResult_ struct {
  AllowedTypes []ContentType `thrift:"allowedTypes,1" db:"allowedTypes" json:"allowedTypes"`
  PublicKey *E2EEPublicKey `thrift:"publicKey,2" db:"publicKey" json:"publicKey"`
  SpecVersion int32 `thrift:"specVersion,3" db:"specVersion" json:"specVersion"`
}

func NewE2EENegotiationResult_() *E2EENegotiationResult_ {
  return &E2EENegotiationResult_{}
}


func (p *E2EENegotiationResult_) GetAllowedTypes() []ContentType {
  return p.AllowedTypes
}
var E2EENegotiationResult__PublicKey_DEFAULT *E2EEPublicKey
func (p *E2EENegotiationResult_) GetPublicKey() *E2EEPublicKey {
  if !p.IsSetPublicKey() {
    return E2EENegotiationResult__PublicKey_DEFAULT
  }
return p.PublicKey
}

func (p *E2EENegotiationResult_) GetSpecVersion() int32 {
  return p.SpecVersion
}
func (p *E2EENegotiationResult_) IsSetPublicKey() bool {
  return p.PublicKey != nil
}

func (p *E2EENegotiationResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *E2EENegotiationResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]ContentType, 0, size)
  p.AllowedTypes =  tSet
  for i := 0; i < size; i ++ {
var _elem56 ContentType
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := ContentType(v)
    _elem56 = temp
}
    p.AllowedTypes = append(p.AllowedTypes, _elem56)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *E2EENegotiationResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.PublicKey = &E2EEPublicKey{}
  if err := p.PublicKey.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PublicKey), err)
  }
  return nil
}

func (p *E2EENegotiationResult_)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SpecVersion = v
}
  return nil
}

func (p *E2EENegotiationResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "E2EENegotiationResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *E2EENegotiationResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "allowedTypes", thrift.SET, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:allowedTypes: ", p), err) }
  if err := oprot.WriteSetBegin(ctx, thrift.I32, len(p.AllowedTypes)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.AllowedTypes); i++ {
    for j := i+1; j<len(p.AllowedTypes); j++ {
      if func(tgt, src ContentType) bool {
        if tgt != src { return false }
        return true
      }(p.AllowedTypes[i], p.AllowedTypes[j]) {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.AllowedTypes))
      }
    }
  }
  for _, v := range p.AllowedTypes {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(ctx); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:allowedTypes: ", p), err) }
  return err
}

func (p *E2EENegotiationResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "publicKey", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:publicKey: ", p), err) }
  if err := p.PublicKey.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PublicKey), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:publicKey: ", p), err) }
  return err
}

func (p *E2EENegotiationResult_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "specVersion", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:specVersion: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SpecVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.specVersion (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:specVersion: ", p), err) }
  return err
}

func (p *E2EENegotiationResult_) Equals(other *E2EENegotiationResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.AllowedTypes) != len(other.AllowedTypes) { return false }
  for i, _tgt := range p.AllowedTypes {
    _src57 := other.AllowedTypes[i]
    if _tgt != _src57 { return false }
  }
  if !p.PublicKey.Equals(other.PublicKey) { return false }
  if p.SpecVersion != other.SpecVersion { return false }
  return true
}

func (p *E2EENegotiationResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("E2EENegotiationResult_(%+v)", *p)
}

type TalkService interface {
  UnregisterUserAndDevice(ctx context.Context) (_r string, _err error)
  // Parameters:
  //  - ExpirationTime
  //  - MaxUseCount
  GenerateUserTicket(ctx context.Context, expirationTime int64, maxUseCount int32) (_r *Ticket, _err error)
  // Parameters:
  //  - ReqSeq
  //  - Attr
  //  - Value
  UpdateProfileAttribute(ctx context.Context, reqSeq int32, attr ProfileAttribute, value string) (_err error)
  // Parameters:
  //  - ReqSeq
  //  - AttributesToUpdate
  //  - Settings
  UpdateSettingsAttributes2(ctx context.Context, reqSeq int32, attributesToUpdate []SettingsAttributeEx, settings *Settings) (_r []SettingsAttributeEx, _err error)
  // Parameters:
  //  - SyncReason
  GetRecommendationIds(ctx context.Context, syncReason SyncReason) (_r []string, _err error)
  // Parameters:
  //  - SyncReason
  GetBlockedRecommendationIds(ctx context.Context, syncReason SyncReason) (_r []string, _err error)
  // Parameters:
  //  - SyncReason
  GetAllContactIds(ctx context.Context, syncReason SyncReason) (_r []string, _err error)
  // Parameters:
  //  - ID
  GetContact(ctx context.Context, id string) (_r *Contact, _err error)
  // Parameters:
  //  - LocalRev
  //  - Count
  //  - GlobalRev
  //  - IndividualRev
  FetchOps(ctx context.Context, localRev int64, count int32, globalRev int64, individualRev int64) (_r []*Operation, _err error)
  // Parameters:
  //  - Seq
  //  - Message
  SendMessage(ctx context.Context, seq int32, message *Message) (_r *Message, _err error)
  // Parameters:
  //  - Seq
  //  - ChatMid
  //  - LastMessageId
  //  - SessionId
  SendChatChecked(ctx context.Context, seq int32, chatMid string, lastMessageId string, sessionId int8) (_err error)
  // Parameters:
  //  - RoomId
  GetRoom(ctx context.Context, roomId string) (_r *Room, _err error)
  // Parameters:
  //  - Request
  UpdateChat(ctx context.Context, request *UpdateChatRequest) (_r *UpdateChatResponse, _err error)
  // Parameters:
  //  - Request
  GetChats(ctx context.Context, request *GetChatsRequest) (_r *GetChatsResponse, _err error)
  // Parameters:
  //  - IgnoreE2EEStatus
  //  - SyncReason
  GetE2EEPublicKeysEx(ctx context.Context, ignoreE2EEStatus bool, syncReason SyncReason) (_r []*E2EEPublicKey, _err error)
  // Parameters:
  //  - ReqSeq
  //  - EncryptedKeyChain
  //  - HashKeyChain
  RespondE2EEKeyExchange(ctx context.Context, reqSeq int32, encryptedKeyChain string, hashKeyChain string) (_err error)
  // Parameters:
  //  - KeyVersion
  //  - ChatMid
  GetLastE2EEGroupSharedKey(ctx context.Context, keyVersion int32, chatMid string) (_r *E2EEGroupSharedKey, _err error)
  // Parameters:
  //  - Verifier
  //  - PinCode
  VerifyQrcode(ctx context.Context, verifier string, pinCode string) (_r string, _err error)
  // Parameters:
  //  - Revision
  //  - RegionOfUsim
  //  - RegionOfTelephone
  //  - RegionOfLocale
  //  - Carrier
  //  - SyncReason
  GetConfigurations(ctx context.Context, revision int64, regionOfUsim string, regionOfTelephone string, regionOfLocale string, carrier string, syncReason SyncReason) (_r *Configurations, _err error)
  // Parameters:
  //  - Request
  ReissueChatTicket(ctx context.Context, request *ReissueChatTicketRequest) (_r *ReissueChatTicketResponse, _err error)
  Noop(ctx context.Context) (_err error)
  GetServerTime(ctx context.Context) (_r int64, _err error)
  // Parameters:
  //  - ReqSeq
  //  - Type
  //  - Target
  //  - Enablement
  SetNotificationsEnabled(ctx context.Context, reqSeq int32, type_a1 MIDType, target string, enablement bool) (_err error)
  // Parameters:
  //  - Provider
  //  - Identifier
  //  - Locale
  RequestAccountPasswordReset(ctx context.Context, provider IdentityProvider, identifier string, locale string) (_err error)
  // Parameters:
  //  - CountryGroup
  GetCountries(ctx context.Context, countryGroup CountryGroup) (_r []string, _err error)
  // Parameters:
  //  - ReqSeq
  //  - SearchId
  RegisterUserid(ctx context.Context, reqSeq int32, searchId string) (_r bool, _err error)
  // Parameters:
  //  - SearchId
  IsUseridAvailable(ctx context.Context, searchId string) (_r bool, _err error)
  // Parameters:
  //  - SyncReason
  GetProfile(ctx context.Context, syncReason SyncReason) (_r *Profile, _err error)
  // Parameters:
  //  - Region
  //  - Carrier
  //  - Phone
  //  - UdidHash
  //  - DeviceInfo
  //  - NetworkCode
  //  - Locale
  //  - SimInfo
  StartUpdateVerification(ctx context.Context, region string, carrier CarrierCode, phone string, udidHash string, deviceInfo *DeviceInfo, networkCode string, locale string, simInfo *SIMInfo) (_r *VerificationSessionData, _err error)
  // Parameters:
  //  - SessionId
  //  - PinCode
  //  - UdidHash
  //  - MigrationPincodeSessionId
  //  - OldUdidHash
  VerifyPhoneNumber(ctx context.Context, sessionId string, pinCode string, udidHash string, migrationPincodeSessionId string, oldUdidHash string) (_r *PhoneVerificationResult_, _err error)
  // Parameters:
  //  - AccountMigrationPincode
  UpdateAccountMigrationPincode(ctx context.Context, accountMigrationPincode string) (_err error)
  // Parameters:
  //  - SessionId
  ResendPinCode(ctx context.Context, sessionId string) (_err error)
  // Parameters:
  //  - SessionId
  //  - Method
  ChangeVerificationMethod(ctx context.Context, sessionId string, method VerificationMethod) (_r *VerificationSessionData, _err error)
  // Parameters:
  //  - SessionId
  FinishUpdateVerification(ctx context.Context, sessionId string) (_err error)
  // Parameters:
  //  - SyncReason
  GetSettings(ctx context.Context, syncReason SyncReason) (_r *Settings, _err error)
  // Parameters:
  //  - ReqSeq
  //  - ID
  BlockRecommendation(ctx context.Context, reqSeq int32, id string) (_err error)
  // Parameters:
  //  - ReqSeq
  //  - ID
  BlockContact(ctx context.Context, reqSeq int32, id string) (_err error)
  // Parameters:
  //  - ReqSeq
  //  - ID
  UnblockRecommendation(ctx context.Context, reqSeq int32, id string) (_err error)
  // Parameters:
  //  - ReqSeq
  //  - ID
  //  - Reference
  UnblockContact(ctx context.Context, reqSeq int32, id string, reference string) (_err error)
  // Parameters:
  //  - ReqSeq
  //  - Mid
  //  - Type
  //  - Reference
  FindAndAddContactsByMid(ctx context.Context, reqSeq int32, mid string, type_a1 ContactType, reference string) (_r map[string]*Contact, _err error)
  // Parameters:
  //  - SearchId
  FindContactByUserid(ctx context.Context, searchId string) (_r *Contact, _err error)
  // Parameters:
  //  - PhoneNumberList
  InviteFriendsBySms(ctx context.Context, phoneNumberList []string) (_err error)
  // Parameters:
  //  - Ids
  GetContacts(ctx context.Context, ids []string) (_r []*Contact, _err error)
  // Parameters:
  //  - ReqSeq
  //  - LocalContacts
  SyncContacts(ctx context.Context, reqSeq int32, localContacts []*ContactModification) (_r map[string]*ContactRegistration, _err error)
  // Parameters:
  //  - ReqSeq
  //  - Mid
  //  - Flag
  //  - Value
  UpdateContactSetting(ctx context.Context, reqSeq int32, mid string, flag ContactSetting, value string) (_err error)
  // Parameters:
  //  - Seq
  //  - ChatMid
  //  - LastMessageId
  //  - SessionId
  SendChatRemoved(ctx context.Context, seq int32, chatMid string, lastMessageId string, sessionId int8) (_err error)
  // Parameters:
  //  - ReqSeq
  //  - RoomId
  LeaveRoom(ctx context.Context, reqSeq int32, roomId string) (_err error)
  // Parameters:
  //  - Seq
  //  - MessageId
  UnsendMessage(ctx context.Context, seq int32, messageId string) (_err error)
  // Parameters:
  //  - ReqSeq
  //  - RoomId
  //  - ContactIds
  InviteIntoRoom(ctx context.Context, reqSeq int32, roomId string, contactIds []string) (_err error)
  // Parameters:
  //  - ReqSeq
  //  - ContactIds
  CreateRoom(ctx context.Context, reqSeq int32, contactIds []string) (_r *Room, _err error)
  // Parameters:
  //  - Request
  InviteIntoChat(ctx context.Context, request *InviteIntoChatRequest) (_r *InviteIntoChatResponse, _err error)
  // Parameters:
  //  - Request
  DeleteSelfFromChat(ctx context.Context, request *DeleteSelfFromChatRequest) (_r *DeleteSelfFromChatResponse, _err error)
  // Parameters:
  //  - Request
  //  - SyncReason
  GetAllChatMids(ctx context.Context, request *GetAllChatMidsRequest, syncReason SyncReason) (_r *GetAllChatMidsResponse, _err error)
  // Parameters:
  //  - Request
  CreateChat(ctx context.Context, request *CreateChatRequest) (_r *CreateChatResponse, _err error)
  // Parameters:
  //  - Request
  AcceptChatInvitation(ctx context.Context, request *AcceptChatInvitationRequest) (_r *AcceptChatInvitationResponse, _err error)
  // Parameters:
  //  - Request
  RejectChatInvitation(ctx context.Context, request *RejectChatInvitationRequest) (_r *RejectChatInvitationResponse, _err error)
  // Parameters:
  //  - Request
  DeleteOtherFromChat(ctx context.Context, request *DeleteOtherFromChatRequest) (_r *DeleteOtherFromChatResponse, _err error)
  // Parameters:
  //  - Request
  CancelChatInvitation(ctx context.Context, request *CancelChatInvitationRequest) (_r *CancelChatInvitationResponse, _err error)
  GetSessions(ctx context.Context) (_r []*LoginSession, _err error)
  // Parameters:
  //  - TokenKey
  LogoutSession(ctx context.Context, tokenKey string) (_err error)
  // Parameters:
  //  - LastRev
  //  - DeviceInfo
  //  - UdidHash
  //  - OldUdidHash
  NotifyUpdated(ctx context.Context, lastRev int64, deviceInfo *DeviceInfo, udidHash string, oldUdidHash string) (_err error)
  // Parameters:
  //  - Text
  SendEchoPush(ctx context.Context, text string) (_err error)
  // Parameters:
  //  - Type
  //  - Token
  UpdateNotificationToken(ctx context.Context, type_a1 NotificationType, token string) (_err error)
  // Parameters:
  //  - Provider
  GetRSAKeyInfo(ctx context.Context, provider IdentityProvider) (_r *RSAKey, _err error)
  // Parameters:
  //  - SyncReason
  GetBlockedContactIds(ctx context.Context, syncReason SyncReason) (_r []string, _err error)
  // Parameters:
  //  - ReqSeq
  //  - PublicKey
  RegisterE2EEPublicKey(ctx context.Context, reqSeq int32, publicKey *E2EEPublicKey) (_r *E2EEPublicKey, _err error)
  // Parameters:
  //  - Mid
  //  - KeyVersion
  //  - KeyId
  GetE2EEPublicKey(ctx context.Context, mid string, keyVersion int32, keyId int32) (_r *E2EEPublicKey, _err error)
  // Parameters:
  //  - Mid
  NegotiateE2EEPublicKey(ctx context.Context, mid string) (_r *E2EENegotiationResult_, _err error)
  // Parameters:
  //  - KeyVersion
  //  - ChatMid
  //  - Members
  //  - KeyIds
  //  - EncryptedSharedKeys
  RegisterE2EEGroupKey(ctx context.Context, keyVersion int32, chatMid string, members []string, keyIds []int32, encryptedSharedKeys []string) (_r *E2EEGroupSharedKey, _err error)
  // Parameters:
  //  - KeyVersion
  //  - ChatMid
  //  - GroupKeyId
  GetE2EEGroupSharedKey(ctx context.Context, keyVersion int32, chatMid string, groupKeyId int32) (_r *E2EEGroupSharedKey, _err error)
  // Parameters:
  //  - ChatMid
  GetLastE2EEPublicKeys(ctx context.Context, chatMid string) (_r *E2EEPublicKey, _err error)
}

type TalkServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewTalkServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TalkServiceClient {
  return &TalkServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewTalkServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TalkServiceClient {
  return &TalkServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTalkServiceClient(c thrift.TClient) *TalkServiceClient {
  return &TalkServiceClient{
    c: c,
  }
}

func (p *TalkServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *TalkServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *TalkServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

func (p *TalkServiceClient) UnregisterUserAndDevice(ctx context.Context) (_r string, _err error) {
  var _args58 TalkServiceUnregisterUserAndDeviceArgs
  var _result60 TalkServiceUnregisterUserAndDeviceResult
  var _meta59 thrift.ResponseMeta
  _meta59, _err = p.Client_().Call(ctx, "unregisterUserAndDevice", &_args58, &_result60)
  p.SetLastResponseMeta_(_meta59)
  if _err != nil {
    return
  }
  switch {
  case _result60.E!= nil:
    return _r, _result60.E
  }

  return _result60.GetSuccess(), nil
}

// Parameters:
//  - ExpirationTime
//  - MaxUseCount
func (p *TalkServiceClient) GenerateUserTicket(ctx context.Context, expirationTime int64, maxUseCount int32) (_r *Ticket, _err error) {
  var _args61 TalkServiceGenerateUserTicketArgs
  _args61.ExpirationTime = expirationTime
  _args61.MaxUseCount = maxUseCount
  var _result63 TalkServiceGenerateUserTicketResult
  var _meta62 thrift.ResponseMeta
  _meta62, _err = p.Client_().Call(ctx, "generateUserTicket", &_args61, &_result63)
  p.SetLastResponseMeta_(_meta62)
  if _err != nil {
    return
  }
  switch {
  case _result63.E!= nil:
    return _r, _result63.E
  }

  return _result63.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - Attr
//  - Value
func (p *TalkServiceClient) UpdateProfileAttribute(ctx context.Context, reqSeq int32, attr ProfileAttribute, value string) (_err error) {
  var _args64 TalkServiceUpdateProfileAttributeArgs
  _args64.ReqSeq = reqSeq
  _args64.Attr = attr
  _args64.Value = value
  var _result66 TalkServiceUpdateProfileAttributeResult
  var _meta65 thrift.ResponseMeta
  _meta65, _err = p.Client_().Call(ctx, "updateProfileAttribute", &_args64, &_result66)
  p.SetLastResponseMeta_(_meta65)
  if _err != nil {
    return
  }
  switch {
  case _result66.E!= nil:
    return _result66.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - AttributesToUpdate
//  - Settings
func (p *TalkServiceClient) UpdateSettingsAttributes2(ctx context.Context, reqSeq int32, attributesToUpdate []SettingsAttributeEx, settings *Settings) (_r []SettingsAttributeEx, _err error) {
  var _args67 TalkServiceUpdateSettingsAttributes2Args
  _args67.ReqSeq = reqSeq
  _args67.AttributesToUpdate = attributesToUpdate
  _args67.Settings = settings
  var _result69 TalkServiceUpdateSettingsAttributes2Result
  var _meta68 thrift.ResponseMeta
  _meta68, _err = p.Client_().Call(ctx, "updateSettingsAttributes2", &_args67, &_result69)
  p.SetLastResponseMeta_(_meta68)
  if _err != nil {
    return
  }
  switch {
  case _result69.E!= nil:
    return _r, _result69.E
  }

  return _result69.GetSuccess(), nil
}

// Parameters:
//  - SyncReason
func (p *TalkServiceClient) GetRecommendationIds(ctx context.Context, syncReason SyncReason) (_r []string, _err error) {
  var _args70 TalkServiceGetRecommendationIdsArgs
  _args70.SyncReason = syncReason
  var _result72 TalkServiceGetRecommendationIdsResult
  var _meta71 thrift.ResponseMeta
  _meta71, _err = p.Client_().Call(ctx, "getRecommendationIds", &_args70, &_result72)
  p.SetLastResponseMeta_(_meta71)
  if _err != nil {
    return
  }
  switch {
  case _result72.E!= nil:
    return _r, _result72.E
  }

  return _result72.GetSuccess(), nil
}

// Parameters:
//  - SyncReason
func (p *TalkServiceClient) GetBlockedRecommendationIds(ctx context.Context, syncReason SyncReason) (_r []string, _err error) {
  var _args73 TalkServiceGetBlockedRecommendationIdsArgs
  _args73.SyncReason = syncReason
  var _result75 TalkServiceGetBlockedRecommendationIdsResult
  var _meta74 thrift.ResponseMeta
  _meta74, _err = p.Client_().Call(ctx, "getBlockedRecommendationIds", &_args73, &_result75)
  p.SetLastResponseMeta_(_meta74)
  if _err != nil {
    return
  }
  switch {
  case _result75.E!= nil:
    return _r, _result75.E
  }

  return _result75.GetSuccess(), nil
}

// Parameters:
//  - SyncReason
func (p *TalkServiceClient) GetAllContactIds(ctx context.Context, syncReason SyncReason) (_r []string, _err error) {
  var _args76 TalkServiceGetAllContactIdsArgs
  _args76.SyncReason = syncReason
  var _result78 TalkServiceGetAllContactIdsResult
  var _meta77 thrift.ResponseMeta
  _meta77, _err = p.Client_().Call(ctx, "getAllContactIds", &_args76, &_result78)
  p.SetLastResponseMeta_(_meta77)
  if _err != nil {
    return
  }
  switch {
  case _result78.E!= nil:
    return _r, _result78.E
  }

  return _result78.GetSuccess(), nil
}

// Parameters:
//  - ID
func (p *TalkServiceClient) GetContact(ctx context.Context, id string) (_r *Contact, _err error) {
  var _args79 TalkServiceGetContactArgs
  _args79.ID = id
  var _result81 TalkServiceGetContactResult
  var _meta80 thrift.ResponseMeta
  _meta80, _err = p.Client_().Call(ctx, "getContact", &_args79, &_result81)
  p.SetLastResponseMeta_(_meta80)
  if _err != nil {
    return
  }
  switch {
  case _result81.E!= nil:
    return _r, _result81.E
  }

  return _result81.GetSuccess(), nil
}

// Parameters:
//  - LocalRev
//  - Count
//  - GlobalRev
//  - IndividualRev
func (p *TalkServiceClient) FetchOps(ctx context.Context, localRev int64, count int32, globalRev int64, individualRev int64) (_r []*Operation, _err error) {
  var _args82 TalkServiceFetchOpsArgs
  _args82.LocalRev = localRev
  _args82.Count = count
  _args82.GlobalRev = globalRev
  _args82.IndividualRev = individualRev
  var _result84 TalkServiceFetchOpsResult
  var _meta83 thrift.ResponseMeta
  _meta83, _err = p.Client_().Call(ctx, "fetchOps", &_args82, &_result84)
  p.SetLastResponseMeta_(_meta83)
  if _err != nil {
    return
  }
  switch {
  case _result84.E!= nil:
    return _r, _result84.E
  }

  return _result84.GetSuccess(), nil
}

// Parameters:
//  - Seq
//  - Message
func (p *TalkServiceClient) SendMessage(ctx context.Context, seq int32, message *Message) (_r *Message, _err error) {
  var _args85 TalkServiceSendMessageArgs
  _args85.Seq = seq
  _args85.Message = message
  var _result87 TalkServiceSendMessageResult
  var _meta86 thrift.ResponseMeta
  _meta86, _err = p.Client_().Call(ctx, "sendMessage", &_args85, &_result87)
  p.SetLastResponseMeta_(_meta86)
  if _err != nil {
    return
  }
  switch {
  case _result87.E!= nil:
    return _r, _result87.E
  }

  return _result87.GetSuccess(), nil
}

// Parameters:
//  - Seq
//  - ChatMid
//  - LastMessageId
//  - SessionId
func (p *TalkServiceClient) SendChatChecked(ctx context.Context, seq int32, chatMid string, lastMessageId string, sessionId int8) (_err error) {
  var _args88 TalkServiceSendChatCheckedArgs
  _args88.Seq = seq
  _args88.ChatMid = chatMid
  _args88.LastMessageId = lastMessageId
  _args88.SessionId = sessionId
  var _result90 TalkServiceSendChatCheckedResult
  var _meta89 thrift.ResponseMeta
  _meta89, _err = p.Client_().Call(ctx, "sendChatChecked", &_args88, &_result90)
  p.SetLastResponseMeta_(_meta89)
  if _err != nil {
    return
  }
  switch {
  case _result90.E!= nil:
    return _result90.E
  }

  return nil
}

// Parameters:
//  - RoomId
func (p *TalkServiceClient) GetRoom(ctx context.Context, roomId string) (_r *Room, _err error) {
  var _args91 TalkServiceGetRoomArgs
  _args91.RoomId = roomId
  var _result93 TalkServiceGetRoomResult
  var _meta92 thrift.ResponseMeta
  _meta92, _err = p.Client_().Call(ctx, "getRoom", &_args91, &_result93)
  p.SetLastResponseMeta_(_meta92)
  if _err != nil {
    return
  }
  switch {
  case _result93.E!= nil:
    return _r, _result93.E
  }

  return _result93.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) UpdateChat(ctx context.Context, request *UpdateChatRequest) (_r *UpdateChatResponse, _err error) {
  var _args94 TalkServiceUpdateChatArgs
  _args94.Request = request
  var _result96 TalkServiceUpdateChatResult
  var _meta95 thrift.ResponseMeta
  _meta95, _err = p.Client_().Call(ctx, "updateChat", &_args94, &_result96)
  p.SetLastResponseMeta_(_meta95)
  if _err != nil {
    return
  }
  switch {
  case _result96.E!= nil:
    return _r, _result96.E
  }

  return _result96.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) GetChats(ctx context.Context, request *GetChatsRequest) (_r *GetChatsResponse, _err error) {
  var _args97 TalkServiceGetChatsArgs
  _args97.Request = request
  var _result99 TalkServiceGetChatsResult
  var _meta98 thrift.ResponseMeta
  _meta98, _err = p.Client_().Call(ctx, "getChats", &_args97, &_result99)
  p.SetLastResponseMeta_(_meta98)
  if _err != nil {
    return
  }
  switch {
  case _result99.E!= nil:
    return _r, _result99.E
  }

  return _result99.GetSuccess(), nil
}

// Parameters:
//  - IgnoreE2EEStatus
//  - SyncReason
func (p *TalkServiceClient) GetE2EEPublicKeysEx(ctx context.Context, ignoreE2EEStatus bool, syncReason SyncReason) (_r []*E2EEPublicKey, _err error) {
  var _args100 TalkServiceGetE2EEPublicKeysExArgs
  _args100.IgnoreE2EEStatus = ignoreE2EEStatus
  _args100.SyncReason = syncReason
  var _result102 TalkServiceGetE2EEPublicKeysExResult
  var _meta101 thrift.ResponseMeta
  _meta101, _err = p.Client_().Call(ctx, "getE2EEPublicKeysEx", &_args100, &_result102)
  p.SetLastResponseMeta_(_meta101)
  if _err != nil {
    return
  }
  switch {
  case _result102.E!= nil:
    return _r, _result102.E
  }

  return _result102.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - EncryptedKeyChain
//  - HashKeyChain
func (p *TalkServiceClient) RespondE2EEKeyExchange(ctx context.Context, reqSeq int32, encryptedKeyChain string, hashKeyChain string) (_err error) {
  var _args103 TalkServiceRespondE2EEKeyExchangeArgs
  _args103.ReqSeq = reqSeq
  _args103.EncryptedKeyChain = encryptedKeyChain
  _args103.HashKeyChain = hashKeyChain
  var _result105 TalkServiceRespondE2EEKeyExchangeResult
  var _meta104 thrift.ResponseMeta
  _meta104, _err = p.Client_().Call(ctx, "respondE2EEKeyExchange", &_args103, &_result105)
  p.SetLastResponseMeta_(_meta104)
  if _err != nil {
    return
  }
  switch {
  case _result105.E!= nil:
    return _result105.E
  }

  return nil
}

// Parameters:
//  - KeyVersion
//  - ChatMid
func (p *TalkServiceClient) GetLastE2EEGroupSharedKey(ctx context.Context, keyVersion int32, chatMid string) (_r *E2EEGroupSharedKey, _err error) {
  var _args106 TalkServiceGetLastE2EEGroupSharedKeyArgs
  _args106.KeyVersion = keyVersion
  _args106.ChatMid = chatMid
  var _result108 TalkServiceGetLastE2EEGroupSharedKeyResult
  var _meta107 thrift.ResponseMeta
  _meta107, _err = p.Client_().Call(ctx, "getLastE2EEGroupSharedKey", &_args106, &_result108)
  p.SetLastResponseMeta_(_meta107)
  if _err != nil {
    return
  }
  switch {
  case _result108.E!= nil:
    return _r, _result108.E
  }

  return _result108.GetSuccess(), nil
}

// Parameters:
//  - Verifier
//  - PinCode
func (p *TalkServiceClient) VerifyQrcode(ctx context.Context, verifier string, pinCode string) (_r string, _err error) {
  var _args109 TalkServiceVerifyQrcodeArgs
  _args109.Verifier = verifier
  _args109.PinCode = pinCode
  var _result111 TalkServiceVerifyQrcodeResult
  var _meta110 thrift.ResponseMeta
  _meta110, _err = p.Client_().Call(ctx, "verifyQrcode", &_args109, &_result111)
  p.SetLastResponseMeta_(_meta110)
  if _err != nil {
    return
  }
  switch {
  case _result111.E!= nil:
    return _r, _result111.E
  }

  return _result111.GetSuccess(), nil
}

// Parameters:
//  - Revision
//  - RegionOfUsim
//  - RegionOfTelephone
//  - RegionOfLocale
//  - Carrier
//  - SyncReason
func (p *TalkServiceClient) GetConfigurations(ctx context.Context, revision int64, regionOfUsim string, regionOfTelephone string, regionOfLocale string, carrier string, syncReason SyncReason) (_r *Configurations, _err error) {
  var _args112 TalkServiceGetConfigurationsArgs
  _args112.Revision = revision
  _args112.RegionOfUsim = regionOfUsim
  _args112.RegionOfTelephone = regionOfTelephone
  _args112.RegionOfLocale = regionOfLocale
  _args112.Carrier = carrier
  _args112.SyncReason = syncReason
  var _result114 TalkServiceGetConfigurationsResult
  var _meta113 thrift.ResponseMeta
  _meta113, _err = p.Client_().Call(ctx, "getConfigurations", &_args112, &_result114)
  p.SetLastResponseMeta_(_meta113)
  if _err != nil {
    return
  }
  switch {
  case _result114.E!= nil:
    return _r, _result114.E
  }

  return _result114.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) ReissueChatTicket(ctx context.Context, request *ReissueChatTicketRequest) (_r *ReissueChatTicketResponse, _err error) {
  var _args115 TalkServiceReissueChatTicketArgs
  _args115.Request = request
  var _result117 TalkServiceReissueChatTicketResult
  var _meta116 thrift.ResponseMeta
  _meta116, _err = p.Client_().Call(ctx, "reissueChatTicket", &_args115, &_result117)
  p.SetLastResponseMeta_(_meta116)
  if _err != nil {
    return
  }
  switch {
  case _result117.E!= nil:
    return _r, _result117.E
  }

  return _result117.GetSuccess(), nil
}

func (p *TalkServiceClient) Noop(ctx context.Context) (_err error) {
  var _args118 TalkServiceNoopArgs
  var _result120 TalkServiceNoopResult
  var _meta119 thrift.ResponseMeta
  _meta119, _err = p.Client_().Call(ctx, "noop", &_args118, &_result120)
  p.SetLastResponseMeta_(_meta119)
  if _err != nil {
    return
  }
  switch {
  case _result120.E!= nil:
    return _result120.E
  }

  return nil
}

func (p *TalkServiceClient) GetServerTime(ctx context.Context) (_r int64, _err error) {
  var _args121 TalkServiceGetServerTimeArgs
  var _result123 TalkServiceGetServerTimeResult
  var _meta122 thrift.ResponseMeta
  _meta122, _err = p.Client_().Call(ctx, "getServerTime", &_args121, &_result123)
  p.SetLastResponseMeta_(_meta122)
  if _err != nil {
    return
  }
  switch {
  case _result123.E!= nil:
    return _r, _result123.E
  }

  return _result123.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - Type
//  - Target
//  - Enablement
func (p *TalkServiceClient) SetNotificationsEnabled(ctx context.Context, reqSeq int32, type_a1 MIDType, target string, enablement bool) (_err error) {
  var _args124 TalkServiceSetNotificationsEnabledArgs
  _args124.ReqSeq = reqSeq
  _args124.Type = type_a1
  _args124.Target = target
  _args124.Enablement = enablement
  var _result126 TalkServiceSetNotificationsEnabledResult
  var _meta125 thrift.ResponseMeta
  _meta125, _err = p.Client_().Call(ctx, "setNotificationsEnabled", &_args124, &_result126)
  p.SetLastResponseMeta_(_meta125)
  if _err != nil {
    return
  }
  switch {
  case _result126.E!= nil:
    return _result126.E
  }

  return nil
}

// Parameters:
//  - Provider
//  - Identifier
//  - Locale
func (p *TalkServiceClient) RequestAccountPasswordReset(ctx context.Context, provider IdentityProvider, identifier string, locale string) (_err error) {
  var _args127 TalkServiceRequestAccountPasswordResetArgs
  _args127.Provider = provider
  _args127.Identifier = identifier
  _args127.Locale = locale
  var _result129 TalkServiceRequestAccountPasswordResetResult
  var _meta128 thrift.ResponseMeta
  _meta128, _err = p.Client_().Call(ctx, "requestAccountPasswordReset", &_args127, &_result129)
  p.SetLastResponseMeta_(_meta128)
  if _err != nil {
    return
  }
  switch {
  case _result129.E!= nil:
    return _result129.E
  }

  return nil
}

// Parameters:
//  - CountryGroup
func (p *TalkServiceClient) GetCountries(ctx context.Context, countryGroup CountryGroup) (_r []string, _err error) {
  var _args130 TalkServiceGetCountriesArgs
  _args130.CountryGroup = countryGroup
  var _result132 TalkServiceGetCountriesResult
  var _meta131 thrift.ResponseMeta
  _meta131, _err = p.Client_().Call(ctx, "getCountries", &_args130, &_result132)
  p.SetLastResponseMeta_(_meta131)
  if _err != nil {
    return
  }
  switch {
  case _result132.E!= nil:
    return _r, _result132.E
  }

  return _result132.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - SearchId
func (p *TalkServiceClient) RegisterUserid(ctx context.Context, reqSeq int32, searchId string) (_r bool, _err error) {
  var _args133 TalkServiceRegisterUseridArgs
  _args133.ReqSeq = reqSeq
  _args133.SearchId = searchId
  var _result135 TalkServiceRegisterUseridResult
  var _meta134 thrift.ResponseMeta
  _meta134, _err = p.Client_().Call(ctx, "registerUserid", &_args133, &_result135)
  p.SetLastResponseMeta_(_meta134)
  if _err != nil {
    return
  }
  switch {
  case _result135.E!= nil:
    return _r, _result135.E
  }

  return _result135.GetSuccess(), nil
}

// Parameters:
//  - SearchId
func (p *TalkServiceClient) IsUseridAvailable(ctx context.Context, searchId string) (_r bool, _err error) {
  var _args136 TalkServiceIsUseridAvailableArgs
  _args136.SearchId = searchId
  var _result138 TalkServiceIsUseridAvailableResult
  var _meta137 thrift.ResponseMeta
  _meta137, _err = p.Client_().Call(ctx, "isUseridAvailable", &_args136, &_result138)
  p.SetLastResponseMeta_(_meta137)
  if _err != nil {
    return
  }
  switch {
  case _result138.E!= nil:
    return _r, _result138.E
  }

  return _result138.GetSuccess(), nil
}

// Parameters:
//  - SyncReason
func (p *TalkServiceClient) GetProfile(ctx context.Context, syncReason SyncReason) (_r *Profile, _err error) {
  var _args139 TalkServiceGetProfileArgs
  _args139.SyncReason = syncReason
  var _result141 TalkServiceGetProfileResult
  var _meta140 thrift.ResponseMeta
  _meta140, _err = p.Client_().Call(ctx, "getProfile", &_args139, &_result141)
  p.SetLastResponseMeta_(_meta140)
  if _err != nil {
    return
  }
  switch {
  case _result141.E!= nil:
    return _r, _result141.E
  }

  return _result141.GetSuccess(), nil
}

// Parameters:
//  - Region
//  - Carrier
//  - Phone
//  - UdidHash
//  - DeviceInfo
//  - NetworkCode
//  - Locale
//  - SimInfo
func (p *TalkServiceClient) StartUpdateVerification(ctx context.Context, region string, carrier CarrierCode, phone string, udidHash string, deviceInfo *DeviceInfo, networkCode string, locale string, simInfo *SIMInfo) (_r *VerificationSessionData, _err error) {
  var _args142 TalkServiceStartUpdateVerificationArgs
  _args142.Region = region
  _args142.Carrier = carrier
  _args142.Phone = phone
  _args142.UdidHash = udidHash
  _args142.DeviceInfo = deviceInfo
  _args142.NetworkCode = networkCode
  _args142.Locale = locale
  _args142.SimInfo = simInfo
  var _result144 TalkServiceStartUpdateVerificationResult
  var _meta143 thrift.ResponseMeta
  _meta143, _err = p.Client_().Call(ctx, "startUpdateVerification", &_args142, &_result144)
  p.SetLastResponseMeta_(_meta143)
  if _err != nil {
    return
  }
  switch {
  case _result144.E!= nil:
    return _r, _result144.E
  }

  return _result144.GetSuccess(), nil
}

// Parameters:
//  - SessionId
//  - PinCode
//  - UdidHash
//  - MigrationPincodeSessionId
//  - OldUdidHash
func (p *TalkServiceClient) VerifyPhoneNumber(ctx context.Context, sessionId string, pinCode string, udidHash string, migrationPincodeSessionId string, oldUdidHash string) (_r *PhoneVerificationResult_, _err error) {
  var _args145 TalkServiceVerifyPhoneNumberArgs
  _args145.SessionId = sessionId
  _args145.PinCode = pinCode
  _args145.UdidHash = udidHash
  _args145.MigrationPincodeSessionId = migrationPincodeSessionId
  _args145.OldUdidHash = oldUdidHash
  var _result147 TalkServiceVerifyPhoneNumberResult
  var _meta146 thrift.ResponseMeta
  _meta146, _err = p.Client_().Call(ctx, "verifyPhoneNumber", &_args145, &_result147)
  p.SetLastResponseMeta_(_meta146)
  if _err != nil {
    return
  }
  switch {
  case _result147.E!= nil:
    return _r, _result147.E
  }

  return _result147.GetSuccess(), nil
}

// Parameters:
//  - AccountMigrationPincode
func (p *TalkServiceClient) UpdateAccountMigrationPincode(ctx context.Context, accountMigrationPincode string) (_err error) {
  var _args148 TalkServiceUpdateAccountMigrationPincodeArgs
  _args148.AccountMigrationPincode = accountMigrationPincode
  var _result150 TalkServiceUpdateAccountMigrationPincodeResult
  var _meta149 thrift.ResponseMeta
  _meta149, _err = p.Client_().Call(ctx, "updateAccountMigrationPincode", &_args148, &_result150)
  p.SetLastResponseMeta_(_meta149)
  if _err != nil {
    return
  }
  switch {
  case _result150.E!= nil:
    return _result150.E
  }

  return nil
}

// Parameters:
//  - SessionId
func (p *TalkServiceClient) ResendPinCode(ctx context.Context, sessionId string) (_err error) {
  var _args151 TalkServiceResendPinCodeArgs
  _args151.SessionId = sessionId
  var _result153 TalkServiceResendPinCodeResult
  var _meta152 thrift.ResponseMeta
  _meta152, _err = p.Client_().Call(ctx, "resendPinCode", &_args151, &_result153)
  p.SetLastResponseMeta_(_meta152)
  if _err != nil {
    return
  }
  switch {
  case _result153.E!= nil:
    return _result153.E
  }

  return nil
}

// Parameters:
//  - SessionId
//  - Method
func (p *TalkServiceClient) ChangeVerificationMethod(ctx context.Context, sessionId string, method VerificationMethod) (_r *VerificationSessionData, _err error) {
  var _args154 TalkServiceChangeVerificationMethodArgs
  _args154.SessionId = sessionId
  _args154.Method = method
  var _result156 TalkServiceChangeVerificationMethodResult
  var _meta155 thrift.ResponseMeta
  _meta155, _err = p.Client_().Call(ctx, "changeVerificationMethod", &_args154, &_result156)
  p.SetLastResponseMeta_(_meta155)
  if _err != nil {
    return
  }
  switch {
  case _result156.E!= nil:
    return _r, _result156.E
  }

  return _result156.GetSuccess(), nil
}

// Parameters:
//  - SessionId
func (p *TalkServiceClient) FinishUpdateVerification(ctx context.Context, sessionId string) (_err error) {
  var _args157 TalkServiceFinishUpdateVerificationArgs
  _args157.SessionId = sessionId
  var _result159 TalkServiceFinishUpdateVerificationResult
  var _meta158 thrift.ResponseMeta
  _meta158, _err = p.Client_().Call(ctx, "finishUpdateVerification", &_args157, &_result159)
  p.SetLastResponseMeta_(_meta158)
  if _err != nil {
    return
  }
  switch {
  case _result159.E!= nil:
    return _result159.E
  }

  return nil
}

// Parameters:
//  - SyncReason
func (p *TalkServiceClient) GetSettings(ctx context.Context, syncReason SyncReason) (_r *Settings, _err error) {
  var _args160 TalkServiceGetSettingsArgs
  _args160.SyncReason = syncReason
  var _result162 TalkServiceGetSettingsResult
  var _meta161 thrift.ResponseMeta
  _meta161, _err = p.Client_().Call(ctx, "getSettings", &_args160, &_result162)
  p.SetLastResponseMeta_(_meta161)
  if _err != nil {
    return
  }
  switch {
  case _result162.E!= nil:
    return _r, _result162.E
  }

  return _result162.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - ID
func (p *TalkServiceClient) BlockRecommendation(ctx context.Context, reqSeq int32, id string) (_err error) {
  var _args163 TalkServiceBlockRecommendationArgs
  _args163.ReqSeq = reqSeq
  _args163.ID = id
  var _result165 TalkServiceBlockRecommendationResult
  var _meta164 thrift.ResponseMeta
  _meta164, _err = p.Client_().Call(ctx, "blockRecommendation", &_args163, &_result165)
  p.SetLastResponseMeta_(_meta164)
  if _err != nil {
    return
  }
  switch {
  case _result165.E!= nil:
    return _result165.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - ID
func (p *TalkServiceClient) BlockContact(ctx context.Context, reqSeq int32, id string) (_err error) {
  var _args166 TalkServiceBlockContactArgs
  _args166.ReqSeq = reqSeq
  _args166.ID = id
  var _result168 TalkServiceBlockContactResult
  var _meta167 thrift.ResponseMeta
  _meta167, _err = p.Client_().Call(ctx, "blockContact", &_args166, &_result168)
  p.SetLastResponseMeta_(_meta167)
  if _err != nil {
    return
  }
  switch {
  case _result168.E!= nil:
    return _result168.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - ID
func (p *TalkServiceClient) UnblockRecommendation(ctx context.Context, reqSeq int32, id string) (_err error) {
  var _args169 TalkServiceUnblockRecommendationArgs
  _args169.ReqSeq = reqSeq
  _args169.ID = id
  var _result171 TalkServiceUnblockRecommendationResult
  var _meta170 thrift.ResponseMeta
  _meta170, _err = p.Client_().Call(ctx, "unblockRecommendation", &_args169, &_result171)
  p.SetLastResponseMeta_(_meta170)
  if _err != nil {
    return
  }
  switch {
  case _result171.E!= nil:
    return _result171.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - ID
//  - Reference
func (p *TalkServiceClient) UnblockContact(ctx context.Context, reqSeq int32, id string, reference string) (_err error) {
  var _args172 TalkServiceUnblockContactArgs
  _args172.ReqSeq = reqSeq
  _args172.ID = id
  _args172.Reference = reference
  var _result174 TalkServiceUnblockContactResult
  var _meta173 thrift.ResponseMeta
  _meta173, _err = p.Client_().Call(ctx, "unblockContact", &_args172, &_result174)
  p.SetLastResponseMeta_(_meta173)
  if _err != nil {
    return
  }
  switch {
  case _result174.E!= nil:
    return _result174.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - Mid
//  - Type
//  - Reference
func (p *TalkServiceClient) FindAndAddContactsByMid(ctx context.Context, reqSeq int32, mid string, type_a1 ContactType, reference string) (_r map[string]*Contact, _err error) {
  var _args175 TalkServiceFindAndAddContactsByMidArgs
  _args175.ReqSeq = reqSeq
  _args175.Mid = mid
  _args175.Type = type_a1
  _args175.Reference = reference
  var _result177 TalkServiceFindAndAddContactsByMidResult
  var _meta176 thrift.ResponseMeta
  _meta176, _err = p.Client_().Call(ctx, "findAndAddContactsByMid", &_args175, &_result177)
  p.SetLastResponseMeta_(_meta176)
  if _err != nil {
    return
  }
  switch {
  case _result177.E!= nil:
    return _r, _result177.E
  }

  return _result177.GetSuccess(), nil
}

// Parameters:
//  - SearchId
func (p *TalkServiceClient) FindContactByUserid(ctx context.Context, searchId string) (_r *Contact, _err error) {
  var _args178 TalkServiceFindContactByUseridArgs
  _args178.SearchId = searchId
  var _result180 TalkServiceFindContactByUseridResult
  var _meta179 thrift.ResponseMeta
  _meta179, _err = p.Client_().Call(ctx, "findContactByUserid", &_args178, &_result180)
  p.SetLastResponseMeta_(_meta179)
  if _err != nil {
    return
  }
  switch {
  case _result180.E!= nil:
    return _r, _result180.E
  }

  return _result180.GetSuccess(), nil
}

// Parameters:
//  - PhoneNumberList
func (p *TalkServiceClient) InviteFriendsBySms(ctx context.Context, phoneNumberList []string) (_err error) {
  var _args181 TalkServiceInviteFriendsBySmsArgs
  _args181.PhoneNumberList = phoneNumberList
  var _result183 TalkServiceInviteFriendsBySmsResult
  var _meta182 thrift.ResponseMeta
  _meta182, _err = p.Client_().Call(ctx, "inviteFriendsBySms", &_args181, &_result183)
  p.SetLastResponseMeta_(_meta182)
  if _err != nil {
    return
  }
  switch {
  case _result183.E!= nil:
    return _result183.E
  }

  return nil
}

// Parameters:
//  - Ids
func (p *TalkServiceClient) GetContacts(ctx context.Context, ids []string) (_r []*Contact, _err error) {
  var _args184 TalkServiceGetContactsArgs
  _args184.Ids = ids
  var _result186 TalkServiceGetContactsResult
  var _meta185 thrift.ResponseMeta
  _meta185, _err = p.Client_().Call(ctx, "getContacts", &_args184, &_result186)
  p.SetLastResponseMeta_(_meta185)
  if _err != nil {
    return
  }
  switch {
  case _result186.E!= nil:
    return _r, _result186.E
  }

  return _result186.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - LocalContacts
func (p *TalkServiceClient) SyncContacts(ctx context.Context, reqSeq int32, localContacts []*ContactModification) (_r map[string]*ContactRegistration, _err error) {
  var _args187 TalkServiceSyncContactsArgs
  _args187.ReqSeq = reqSeq
  _args187.LocalContacts = localContacts
  var _result189 TalkServiceSyncContactsResult
  var _meta188 thrift.ResponseMeta
  _meta188, _err = p.Client_().Call(ctx, "syncContacts", &_args187, &_result189)
  p.SetLastResponseMeta_(_meta188)
  if _err != nil {
    return
  }
  switch {
  case _result189.E!= nil:
    return _r, _result189.E
  }

  return _result189.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - Mid
//  - Flag
//  - Value
func (p *TalkServiceClient) UpdateContactSetting(ctx context.Context, reqSeq int32, mid string, flag ContactSetting, value string) (_err error) {
  var _args190 TalkServiceUpdateContactSettingArgs
  _args190.ReqSeq = reqSeq
  _args190.Mid = mid
  _args190.Flag = flag
  _args190.Value = value
  var _result192 TalkServiceUpdateContactSettingResult
  var _meta191 thrift.ResponseMeta
  _meta191, _err = p.Client_().Call(ctx, "updateContactSetting", &_args190, &_result192)
  p.SetLastResponseMeta_(_meta191)
  if _err != nil {
    return
  }
  switch {
  case _result192.E!= nil:
    return _result192.E
  }

  return nil
}

// Parameters:
//  - Seq
//  - ChatMid
//  - LastMessageId
//  - SessionId
func (p *TalkServiceClient) SendChatRemoved(ctx context.Context, seq int32, chatMid string, lastMessageId string, sessionId int8) (_err error) {
  var _args193 TalkServiceSendChatRemovedArgs
  _args193.Seq = seq
  _args193.ChatMid = chatMid
  _args193.LastMessageId = lastMessageId
  _args193.SessionId = sessionId
  var _result195 TalkServiceSendChatRemovedResult
  var _meta194 thrift.ResponseMeta
  _meta194, _err = p.Client_().Call(ctx, "sendChatRemoved", &_args193, &_result195)
  p.SetLastResponseMeta_(_meta194)
  if _err != nil {
    return
  }
  switch {
  case _result195.E!= nil:
    return _result195.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - RoomId
func (p *TalkServiceClient) LeaveRoom(ctx context.Context, reqSeq int32, roomId string) (_err error) {
  var _args196 TalkServiceLeaveRoomArgs
  _args196.ReqSeq = reqSeq
  _args196.RoomId = roomId
  var _result198 TalkServiceLeaveRoomResult
  var _meta197 thrift.ResponseMeta
  _meta197, _err = p.Client_().Call(ctx, "leaveRoom", &_args196, &_result198)
  p.SetLastResponseMeta_(_meta197)
  if _err != nil {
    return
  }
  switch {
  case _result198.E!= nil:
    return _result198.E
  }

  return nil
}

// Parameters:
//  - Seq
//  - MessageId
func (p *TalkServiceClient) UnsendMessage(ctx context.Context, seq int32, messageId string) (_err error) {
  var _args199 TalkServiceUnsendMessageArgs
  _args199.Seq = seq
  _args199.MessageId = messageId
  var _result201 TalkServiceUnsendMessageResult
  var _meta200 thrift.ResponseMeta
  _meta200, _err = p.Client_().Call(ctx, "unsendMessage", &_args199, &_result201)
  p.SetLastResponseMeta_(_meta200)
  if _err != nil {
    return
  }
  switch {
  case _result201.E!= nil:
    return _result201.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - RoomId
//  - ContactIds
func (p *TalkServiceClient) InviteIntoRoom(ctx context.Context, reqSeq int32, roomId string, contactIds []string) (_err error) {
  var _args202 TalkServiceInviteIntoRoomArgs
  _args202.ReqSeq = reqSeq
  _args202.RoomId = roomId
  _args202.ContactIds = contactIds
  var _result204 TalkServiceInviteIntoRoomResult
  var _meta203 thrift.ResponseMeta
  _meta203, _err = p.Client_().Call(ctx, "inviteIntoRoom", &_args202, &_result204)
  p.SetLastResponseMeta_(_meta203)
  if _err != nil {
    return
  }
  switch {
  case _result204.E!= nil:
    return _result204.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - ContactIds
func (p *TalkServiceClient) CreateRoom(ctx context.Context, reqSeq int32, contactIds []string) (_r *Room, _err error) {
  var _args205 TalkServiceCreateRoomArgs
  _args205.ReqSeq = reqSeq
  _args205.ContactIds = contactIds
  var _result207 TalkServiceCreateRoomResult
  var _meta206 thrift.ResponseMeta
  _meta206, _err = p.Client_().Call(ctx, "createRoom", &_args205, &_result207)
  p.SetLastResponseMeta_(_meta206)
  if _err != nil {
    return
  }
  switch {
  case _result207.E!= nil:
    return _r, _result207.E
  }

  return _result207.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) InviteIntoChat(ctx context.Context, request *InviteIntoChatRequest) (_r *InviteIntoChatResponse, _err error) {
  var _args208 TalkServiceInviteIntoChatArgs
  _args208.Request = request
  var _result210 TalkServiceInviteIntoChatResult
  var _meta209 thrift.ResponseMeta
  _meta209, _err = p.Client_().Call(ctx, "inviteIntoChat", &_args208, &_result210)
  p.SetLastResponseMeta_(_meta209)
  if _err != nil {
    return
  }
  switch {
  case _result210.E!= nil:
    return _r, _result210.E
  }

  return _result210.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) DeleteSelfFromChat(ctx context.Context, request *DeleteSelfFromChatRequest) (_r *DeleteSelfFromChatResponse, _err error) {
  var _args211 TalkServiceDeleteSelfFromChatArgs
  _args211.Request = request
  var _result213 TalkServiceDeleteSelfFromChatResult
  var _meta212 thrift.ResponseMeta
  _meta212, _err = p.Client_().Call(ctx, "deleteSelfFromChat", &_args211, &_result213)
  p.SetLastResponseMeta_(_meta212)
  if _err != nil {
    return
  }
  switch {
  case _result213.E!= nil:
    return _r, _result213.E
  }

  return _result213.GetSuccess(), nil
}

// Parameters:
//  - Request
//  - SyncReason
func (p *TalkServiceClient) GetAllChatMids(ctx context.Context, request *GetAllChatMidsRequest, syncReason SyncReason) (_r *GetAllChatMidsResponse, _err error) {
  var _args214 TalkServiceGetAllChatMidsArgs
  _args214.Request = request
  _args214.SyncReason = syncReason
  var _result216 TalkServiceGetAllChatMidsResult
  var _meta215 thrift.ResponseMeta
  _meta215, _err = p.Client_().Call(ctx, "getAllChatMids", &_args214, &_result216)
  p.SetLastResponseMeta_(_meta215)
  if _err != nil {
    return
  }
  switch {
  case _result216.E!= nil:
    return _r, _result216.E
  }

  return _result216.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) CreateChat(ctx context.Context, request *CreateChatRequest) (_r *CreateChatResponse, _err error) {
  var _args217 TalkServiceCreateChatArgs
  _args217.Request = request
  var _result219 TalkServiceCreateChatResult
  var _meta218 thrift.ResponseMeta
  _meta218, _err = p.Client_().Call(ctx, "createChat", &_args217, &_result219)
  p.SetLastResponseMeta_(_meta218)
  if _err != nil {
    return
  }
  switch {
  case _result219.E!= nil:
    return _r, _result219.E
  }

  return _result219.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) AcceptChatInvitation(ctx context.Context, request *AcceptChatInvitationRequest) (_r *AcceptChatInvitationResponse, _err error) {
  var _args220 TalkServiceAcceptChatInvitationArgs
  _args220.Request = request
  var _result222 TalkServiceAcceptChatInvitationResult
  var _meta221 thrift.ResponseMeta
  _meta221, _err = p.Client_().Call(ctx, "acceptChatInvitation", &_args220, &_result222)
  p.SetLastResponseMeta_(_meta221)
  if _err != nil {
    return
  }
  switch {
  case _result222.E!= nil:
    return _r, _result222.E
  }

  return _result222.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) RejectChatInvitation(ctx context.Context, request *RejectChatInvitationRequest) (_r *RejectChatInvitationResponse, _err error) {
  var _args223 TalkServiceRejectChatInvitationArgs
  _args223.Request = request
  var _result225 TalkServiceRejectChatInvitationResult
  var _meta224 thrift.ResponseMeta
  _meta224, _err = p.Client_().Call(ctx, "rejectChatInvitation", &_args223, &_result225)
  p.SetLastResponseMeta_(_meta224)
  if _err != nil {
    return
  }
  switch {
  case _result225.E!= nil:
    return _r, _result225.E
  }

  return _result225.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) DeleteOtherFromChat(ctx context.Context, request *DeleteOtherFromChatRequest) (_r *DeleteOtherFromChatResponse, _err error) {
  var _args226 TalkServiceDeleteOtherFromChatArgs
  _args226.Request = request
  var _result228 TalkServiceDeleteOtherFromChatResult
  var _meta227 thrift.ResponseMeta
  _meta227, _err = p.Client_().Call(ctx, "deleteOtherFromChat", &_args226, &_result228)
  p.SetLastResponseMeta_(_meta227)
  if _err != nil {
    return
  }
  switch {
  case _result228.E!= nil:
    return _r, _result228.E
  }

  return _result228.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) CancelChatInvitation(ctx context.Context, request *CancelChatInvitationRequest) (_r *CancelChatInvitationResponse, _err error) {
  var _args229 TalkServiceCancelChatInvitationArgs
  _args229.Request = request
  var _result231 TalkServiceCancelChatInvitationResult
  var _meta230 thrift.ResponseMeta
  _meta230, _err = p.Client_().Call(ctx, "cancelChatInvitation", &_args229, &_result231)
  p.SetLastResponseMeta_(_meta230)
  if _err != nil {
    return
  }
  switch {
  case _result231.E!= nil:
    return _r, _result231.E
  }

  return _result231.GetSuccess(), nil
}

func (p *TalkServiceClient) GetSessions(ctx context.Context) (_r []*LoginSession, _err error) {
  var _args232 TalkServiceGetSessionsArgs
  var _result234 TalkServiceGetSessionsResult
  var _meta233 thrift.ResponseMeta
  _meta233, _err = p.Client_().Call(ctx, "getSessions", &_args232, &_result234)
  p.SetLastResponseMeta_(_meta233)
  if _err != nil {
    return
  }
  switch {
  case _result234.E!= nil:
    return _r, _result234.E
  }

  return _result234.GetSuccess(), nil
}

// Parameters:
//  - TokenKey
func (p *TalkServiceClient) LogoutSession(ctx context.Context, tokenKey string) (_err error) {
  var _args235 TalkServiceLogoutSessionArgs
  _args235.TokenKey = tokenKey
  var _result237 TalkServiceLogoutSessionResult
  var _meta236 thrift.ResponseMeta
  _meta236, _err = p.Client_().Call(ctx, "logoutSession", &_args235, &_result237)
  p.SetLastResponseMeta_(_meta236)
  if _err != nil {
    return
  }
  switch {
  case _result237.E!= nil:
    return _result237.E
  }

  return nil
}

// Parameters:
//  - LastRev
//  - DeviceInfo
//  - UdidHash
//  - OldUdidHash
func (p *TalkServiceClient) NotifyUpdated(ctx context.Context, lastRev int64, deviceInfo *DeviceInfo, udidHash string, oldUdidHash string) (_err error) {
  var _args238 TalkServiceNotifyUpdatedArgs
  _args238.LastRev = lastRev
  _args238.DeviceInfo = deviceInfo
  _args238.UdidHash = udidHash
  _args238.OldUdidHash = oldUdidHash
  var _result240 TalkServiceNotifyUpdatedResult
  var _meta239 thrift.ResponseMeta
  _meta239, _err = p.Client_().Call(ctx, "notifyUpdated", &_args238, &_result240)
  p.SetLastResponseMeta_(_meta239)
  if _err != nil {
    return
  }
  switch {
  case _result240.E!= nil:
    return _result240.E
  }

  return nil
}

// Parameters:
//  - Text
func (p *TalkServiceClient) SendEchoPush(ctx context.Context, text string) (_err error) {
  var _args241 TalkServiceSendEchoPushArgs
  _args241.Text = text
  var _result243 TalkServiceSendEchoPushResult
  var _meta242 thrift.ResponseMeta
  _meta242, _err = p.Client_().Call(ctx, "sendEchoPush", &_args241, &_result243)
  p.SetLastResponseMeta_(_meta242)
  if _err != nil {
    return
  }
  switch {
  case _result243.E!= nil:
    return _result243.E
  }

  return nil
}

// Parameters:
//  - Type
//  - Token
func (p *TalkServiceClient) UpdateNotificationToken(ctx context.Context, type_a1 NotificationType, token string) (_err error) {
  var _args244 TalkServiceUpdateNotificationTokenArgs
  _args244.Type = type_a1
  _args244.Token = token
  var _result246 TalkServiceUpdateNotificationTokenResult
  var _meta245 thrift.ResponseMeta
  _meta245, _err = p.Client_().Call(ctx, "updateNotificationToken", &_args244, &_result246)
  p.SetLastResponseMeta_(_meta245)
  if _err != nil {
    return
  }
  switch {
  case _result246.E!= nil:
    return _result246.E
  }

  return nil
}

// Parameters:
//  - Provider
func (p *TalkServiceClient) GetRSAKeyInfo(ctx context.Context, provider IdentityProvider) (_r *RSAKey, _err error) {
  var _args247 TalkServiceGetRSAKeyInfoArgs
  _args247.Provider = provider
  var _result249 TalkServiceGetRSAKeyInfoResult
  var _meta248 thrift.ResponseMeta
  _meta248, _err = p.Client_().Call(ctx, "getRSAKeyInfo", &_args247, &_result249)
  p.SetLastResponseMeta_(_meta248)
  if _err != nil {
    return
  }
  switch {
  case _result249.E!= nil:
    return _r, _result249.E
  }

  return _result249.GetSuccess(), nil
}

// Parameters:
//  - SyncReason
func (p *TalkServiceClient) GetBlockedContactIds(ctx context.Context, syncReason SyncReason) (_r []string, _err error) {
  var _args250 TalkServiceGetBlockedContactIdsArgs
  _args250.SyncReason = syncReason
  var _result252 TalkServiceGetBlockedContactIdsResult
  var _meta251 thrift.ResponseMeta
  _meta251, _err = p.Client_().Call(ctx, "getBlockedContactIds", &_args250, &_result252)
  p.SetLastResponseMeta_(_meta251)
  if _err != nil {
    return
  }
  switch {
  case _result252.E!= nil:
    return _r, _result252.E
  }

  return _result252.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - PublicKey
func (p *TalkServiceClient) RegisterE2EEPublicKey(ctx context.Context, reqSeq int32, publicKey *E2EEPublicKey) (_r *E2EEPublicKey, _err error) {
  var _args253 TalkServiceRegisterE2EEPublicKeyArgs
  _args253.ReqSeq = reqSeq
  _args253.PublicKey = publicKey
  var _result255 TalkServiceRegisterE2EEPublicKeyResult
  var _meta254 thrift.ResponseMeta
  _meta254, _err = p.Client_().Call(ctx, "registerE2EEPublicKey", &_args253, &_result255)
  p.SetLastResponseMeta_(_meta254)
  if _err != nil {
    return
  }
  switch {
  case _result255.E!= nil:
    return _r, _result255.E
  }

  return _result255.GetSuccess(), nil
}

// Parameters:
//  - Mid
//  - KeyVersion
//  - KeyId
func (p *TalkServiceClient) GetE2EEPublicKey(ctx context.Context, mid string, keyVersion int32, keyId int32) (_r *E2EEPublicKey, _err error) {
  var _args256 TalkServiceGetE2EEPublicKeyArgs
  _args256.Mid = mid
  _args256.KeyVersion = keyVersion
  _args256.KeyId = keyId
  var _result258 TalkServiceGetE2EEPublicKeyResult
  var _meta257 thrift.ResponseMeta
  _meta257, _err = p.Client_().Call(ctx, "getE2EEPublicKey", &_args256, &_result258)
  p.SetLastResponseMeta_(_meta257)
  if _err != nil {
    return
  }
  switch {
  case _result258.E!= nil:
    return _r, _result258.E
  }

  return _result258.GetSuccess(), nil
}

// Parameters:
//  - Mid
func (p *TalkServiceClient) NegotiateE2EEPublicKey(ctx context.Context, mid string) (_r *E2EENegotiationResult_, _err error) {
  var _args259 TalkServiceNegotiateE2EEPublicKeyArgs
  _args259.Mid = mid
  var _result261 TalkServiceNegotiateE2EEPublicKeyResult
  var _meta260 thrift.ResponseMeta
  _meta260, _err = p.Client_().Call(ctx, "negotiateE2EEPublicKey", &_args259, &_result261)
  p.SetLastResponseMeta_(_meta260)
  if _err != nil {
    return
  }
  switch {
  case _result261.E!= nil:
    return _r, _result261.E
  }

  return _result261.GetSuccess(), nil
}

// Parameters:
//  - KeyVersion
//  - ChatMid
//  - Members
//  - KeyIds
//  - EncryptedSharedKeys
func (p *TalkServiceClient) RegisterE2EEGroupKey(ctx context.Context, keyVersion int32, chatMid string, members []string, keyIds []int32, encryptedSharedKeys []string) (_r *E2EEGroupSharedKey, _err error) {
  var _args262 TalkServiceRegisterE2EEGroupKeyArgs
  _args262.KeyVersion = keyVersion
  _args262.ChatMid = chatMid
  _args262.Members = members
  _args262.KeyIds = keyIds
  _args262.EncryptedSharedKeys = encryptedSharedKeys
  var _result264 TalkServiceRegisterE2EEGroupKeyResult
  var _meta263 thrift.ResponseMeta
  _meta263, _err = p.Client_().Call(ctx, "registerE2EEGroupKey", &_args262, &_result264)
  p.SetLastResponseMeta_(_meta263)
  if _err != nil {
    return
  }
  switch {
  case _result264.E!= nil:
    return _r, _result264.E
  }

  return _result264.GetSuccess(), nil
}

// Parameters:
//  - KeyVersion
//  - ChatMid
//  - GroupKeyId
func (p *TalkServiceClient) GetE2EEGroupSharedKey(ctx context.Context, keyVersion int32, chatMid string, groupKeyId int32) (_r *E2EEGroupSharedKey, _err error) {
  var _args265 TalkServiceGetE2EEGroupSharedKeyArgs
  _args265.KeyVersion = keyVersion
  _args265.ChatMid = chatMid
  _args265.GroupKeyId = groupKeyId
  var _result267 TalkServiceGetE2EEGroupSharedKeyResult
  var _meta266 thrift.ResponseMeta
  _meta266, _err = p.Client_().Call(ctx, "getE2EEGroupSharedKey", &_args265, &_result267)
  p.SetLastResponseMeta_(_meta266)
  if _err != nil {
    return
  }
  switch {
  case _result267.E!= nil:
    return _r, _result267.E
  }

  return _result267.GetSuccess(), nil
}

// Parameters:
//  - ChatMid
func (p *TalkServiceClient) GetLastE2EEPublicKeys(ctx context.Context, chatMid string) (_r *E2EEPublicKey, _err error) {
  var _args268 TalkServiceGetLastE2EEPublicKeysArgs
  _args268.ChatMid = chatMid
  var _result270 TalkServiceGetLastE2EEPublicKeysResult
  var _meta269 thrift.ResponseMeta
  _meta269, _err = p.Client_().Call(ctx, "getLastE2EEPublicKeys", &_args268, &_result270)
  p.SetLastResponseMeta_(_meta269)
  if _err != nil {
    return
  }
  switch {
  case _result270.E!= nil:
    return _r, _result270.E
  }

  return _result270.GetSuccess(), nil
}

type TalkServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TalkService
}

func (p *TalkServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TalkServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TalkServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTalkServiceProcessor(handler TalkService) *TalkServiceProcessor {

  self271 := &TalkServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self271.processorMap["unregisterUserAndDevice"] = &talkServiceProcessorUnregisterUserAndDevice{handler:handler}
  self271.processorMap["generateUserTicket"] = &talkServiceProcessorGenerateUserTicket{handler:handler}
  self271.processorMap["updateProfileAttribute"] = &talkServiceProcessorUpdateProfileAttribute{handler:handler}
  self271.processorMap["updateSettingsAttributes2"] = &talkServiceProcessorUpdateSettingsAttributes2{handler:handler}
  self271.processorMap["getRecommendationIds"] = &talkServiceProcessorGetRecommendationIds{handler:handler}
  self271.processorMap["getBlockedRecommendationIds"] = &talkServiceProcessorGetBlockedRecommendationIds{handler:handler}
  self271.processorMap["getAllContactIds"] = &talkServiceProcessorGetAllContactIds{handler:handler}
  self271.processorMap["getContact"] = &talkServiceProcessorGetContact{handler:handler}
  self271.processorMap["fetchOps"] = &talkServiceProcessorFetchOps{handler:handler}
  self271.processorMap["sendMessage"] = &talkServiceProcessorSendMessage{handler:handler}
  self271.processorMap["sendChatChecked"] = &talkServiceProcessorSendChatChecked{handler:handler}
  self271.processorMap["getRoom"] = &talkServiceProcessorGetRoom{handler:handler}
  self271.processorMap["updateChat"] = &talkServiceProcessorUpdateChat{handler:handler}
  self271.processorMap["getChats"] = &talkServiceProcessorGetChats{handler:handler}
  self271.processorMap["getE2EEPublicKeysEx"] = &talkServiceProcessorGetE2EEPublicKeysEx{handler:handler}
  self271.processorMap["respondE2EEKeyExchange"] = &talkServiceProcessorRespondE2EEKeyExchange{handler:handler}
  self271.processorMap["getLastE2EEGroupSharedKey"] = &talkServiceProcessorGetLastE2EEGroupSharedKey{handler:handler}
  self271.processorMap["verifyQrcode"] = &talkServiceProcessorVerifyQrcode{handler:handler}
  self271.processorMap["getConfigurations"] = &talkServiceProcessorGetConfigurations{handler:handler}
  self271.processorMap["reissueChatTicket"] = &talkServiceProcessorReissueChatTicket{handler:handler}
  self271.processorMap["noop"] = &talkServiceProcessorNoop{handler:handler}
  self271.processorMap["getServerTime"] = &talkServiceProcessorGetServerTime{handler:handler}
  self271.processorMap["setNotificationsEnabled"] = &talkServiceProcessorSetNotificationsEnabled{handler:handler}
  self271.processorMap["requestAccountPasswordReset"] = &talkServiceProcessorRequestAccountPasswordReset{handler:handler}
  self271.processorMap["getCountries"] = &talkServiceProcessorGetCountries{handler:handler}
  self271.processorMap["registerUserid"] = &talkServiceProcessorRegisterUserid{handler:handler}
  self271.processorMap["isUseridAvailable"] = &talkServiceProcessorIsUseridAvailable{handler:handler}
  self271.processorMap["getProfile"] = &talkServiceProcessorGetProfile{handler:handler}
  self271.processorMap["startUpdateVerification"] = &talkServiceProcessorStartUpdateVerification{handler:handler}
  self271.processorMap["verifyPhoneNumber"] = &talkServiceProcessorVerifyPhoneNumber{handler:handler}
  self271.processorMap["updateAccountMigrationPincode"] = &talkServiceProcessorUpdateAccountMigrationPincode{handler:handler}
  self271.processorMap["resendPinCode"] = &talkServiceProcessorResendPinCode{handler:handler}
  self271.processorMap["changeVerificationMethod"] = &talkServiceProcessorChangeVerificationMethod{handler:handler}
  self271.processorMap["finishUpdateVerification"] = &talkServiceProcessorFinishUpdateVerification{handler:handler}
  self271.processorMap["getSettings"] = &talkServiceProcessorGetSettings{handler:handler}
  self271.processorMap["blockRecommendation"] = &talkServiceProcessorBlockRecommendation{handler:handler}
  self271.processorMap["blockContact"] = &talkServiceProcessorBlockContact{handler:handler}
  self271.processorMap["unblockRecommendation"] = &talkServiceProcessorUnblockRecommendation{handler:handler}
  self271.processorMap["unblockContact"] = &talkServiceProcessorUnblockContact{handler:handler}
  self271.processorMap["findAndAddContactsByMid"] = &talkServiceProcessorFindAndAddContactsByMid{handler:handler}
  self271.processorMap["findContactByUserid"] = &talkServiceProcessorFindContactByUserid{handler:handler}
  self271.processorMap["inviteFriendsBySms"] = &talkServiceProcessorInviteFriendsBySms{handler:handler}
  self271.processorMap["getContacts"] = &talkServiceProcessorGetContacts{handler:handler}
  self271.processorMap["syncContacts"] = &talkServiceProcessorSyncContacts{handler:handler}
  self271.processorMap["updateContactSetting"] = &talkServiceProcessorUpdateContactSetting{handler:handler}
  self271.processorMap["sendChatRemoved"] = &talkServiceProcessorSendChatRemoved{handler:handler}
  self271.processorMap["leaveRoom"] = &talkServiceProcessorLeaveRoom{handler:handler}
  self271.processorMap["unsendMessage"] = &talkServiceProcessorUnsendMessage{handler:handler}
  self271.processorMap["inviteIntoRoom"] = &talkServiceProcessorInviteIntoRoom{handler:handler}
  self271.processorMap["createRoom"] = &talkServiceProcessorCreateRoom{handler:handler}
  self271.processorMap["inviteIntoChat"] = &talkServiceProcessorInviteIntoChat{handler:handler}
  self271.processorMap["deleteSelfFromChat"] = &talkServiceProcessorDeleteSelfFromChat{handler:handler}
  self271.processorMap["getAllChatMids"] = &talkServiceProcessorGetAllChatMids{handler:handler}
  self271.processorMap["createChat"] = &talkServiceProcessorCreateChat{handler:handler}
  self271.processorMap["acceptChatInvitation"] = &talkServiceProcessorAcceptChatInvitation{handler:handler}
  self271.processorMap["rejectChatInvitation"] = &talkServiceProcessorRejectChatInvitation{handler:handler}
  self271.processorMap["deleteOtherFromChat"] = &talkServiceProcessorDeleteOtherFromChat{handler:handler}
  self271.processorMap["cancelChatInvitation"] = &talkServiceProcessorCancelChatInvitation{handler:handler}
  self271.processorMap["getSessions"] = &talkServiceProcessorGetSessions{handler:handler}
  self271.processorMap["logoutSession"] = &talkServiceProcessorLogoutSession{handler:handler}
  self271.processorMap["notifyUpdated"] = &talkServiceProcessorNotifyUpdated{handler:handler}
  self271.processorMap["sendEchoPush"] = &talkServiceProcessorSendEchoPush{handler:handler}
  self271.processorMap["updateNotificationToken"] = &talkServiceProcessorUpdateNotificationToken{handler:handler}
  self271.processorMap["getRSAKeyInfo"] = &talkServiceProcessorGetRSAKeyInfo{handler:handler}
  self271.processorMap["getBlockedContactIds"] = &talkServiceProcessorGetBlockedContactIds{handler:handler}
  self271.processorMap["registerE2EEPublicKey"] = &talkServiceProcessorRegisterE2EEPublicKey{handler:handler}
  self271.processorMap["getE2EEPublicKey"] = &talkServiceProcessorGetE2EEPublicKey{handler:handler}
  self271.processorMap["negotiateE2EEPublicKey"] = &talkServiceProcessorNegotiateE2EEPublicKey{handler:handler}
  self271.processorMap["registerE2EEGroupKey"] = &talkServiceProcessorRegisterE2EEGroupKey{handler:handler}
  self271.processorMap["getE2EEGroupSharedKey"] = &talkServiceProcessorGetE2EEGroupSharedKey{handler:handler}
  self271.processorMap["getLastE2EEPublicKeys"] = &talkServiceProcessorGetLastE2EEPublicKeys{handler:handler}
return self271
}

func (p *TalkServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x272 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x272.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x272

}

type talkServiceProcessorUnregisterUserAndDevice struct {
  handler TalkService
}

func (p *talkServiceProcessorUnregisterUserAndDevice) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUnregisterUserAndDeviceArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "unregisterUserAndDevice", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceUnregisterUserAndDeviceResult{}
  var retval string
  if retval, err2 = p.handler.UnregisterUserAndDevice(ctx); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unregisterUserAndDevice: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "unregisterUserAndDevice", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "unregisterUserAndDevice", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGenerateUserTicket struct {
  handler TalkService
}

func (p *talkServiceProcessorGenerateUserTicket) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGenerateUserTicketArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "generateUserTicket", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGenerateUserTicketResult{}
  var retval *Ticket
  if retval, err2 = p.handler.GenerateUserTicket(ctx, args.ExpirationTime, args.MaxUseCount); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing generateUserTicket: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "generateUserTicket", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "generateUserTicket", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUpdateProfileAttribute struct {
  handler TalkService
}

func (p *talkServiceProcessorUpdateProfileAttribute) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUpdateProfileAttributeArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "updateProfileAttribute", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceUpdateProfileAttributeResult{}
  if err2 = p.handler.UpdateProfileAttribute(ctx, args.ReqSeq, args.Attr, args.Value); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateProfileAttribute: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "updateProfileAttribute", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "updateProfileAttribute", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUpdateSettingsAttributes2 struct {
  handler TalkService
}

func (p *talkServiceProcessorUpdateSettingsAttributes2) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUpdateSettingsAttributes2Args{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "updateSettingsAttributes2", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceUpdateSettingsAttributes2Result{}
  var retval []SettingsAttributeEx
  if retval, err2 = p.handler.UpdateSettingsAttributes2(ctx, args.ReqSeq, args.AttributesToUpdate, args.Settings); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateSettingsAttributes2: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "updateSettingsAttributes2", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "updateSettingsAttributes2", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetRecommendationIds struct {
  handler TalkService
}

func (p *talkServiceProcessorGetRecommendationIds) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetRecommendationIdsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getRecommendationIds", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetRecommendationIdsResult{}
  var retval []string
  if retval, err2 = p.handler.GetRecommendationIds(ctx, args.SyncReason); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRecommendationIds: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getRecommendationIds", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getRecommendationIds", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetBlockedRecommendationIds struct {
  handler TalkService
}

func (p *talkServiceProcessorGetBlockedRecommendationIds) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetBlockedRecommendationIdsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getBlockedRecommendationIds", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetBlockedRecommendationIdsResult{}
  var retval []string
  if retval, err2 = p.handler.GetBlockedRecommendationIds(ctx, args.SyncReason); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBlockedRecommendationIds: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getBlockedRecommendationIds", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getBlockedRecommendationIds", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetAllContactIds struct {
  handler TalkService
}

func (p *talkServiceProcessorGetAllContactIds) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetAllContactIdsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getAllContactIds", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetAllContactIdsResult{}
  var retval []string
  if retval, err2 = p.handler.GetAllContactIds(ctx, args.SyncReason); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllContactIds: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getAllContactIds", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getAllContactIds", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetContact struct {
  handler TalkService
}

func (p *talkServiceProcessorGetContact) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetContactArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getContact", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetContactResult{}
  var retval *Contact
  if retval, err2 = p.handler.GetContact(ctx, args.ID); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getContact: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getContact", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getContact", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorFetchOps struct {
  handler TalkService
}

func (p *talkServiceProcessorFetchOps) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceFetchOpsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "fetchOps", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceFetchOpsResult{}
  var retval []*Operation
  if retval, err2 = p.handler.FetchOps(ctx, args.LocalRev, args.Count, args.GlobalRev, args.IndividualRev); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetchOps: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "fetchOps", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "fetchOps", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorSendMessage struct {
  handler TalkService
}

func (p *talkServiceProcessorSendMessage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceSendMessageArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "sendMessage", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceSendMessageResult{}
  var retval *Message
  if retval, err2 = p.handler.SendMessage(ctx, args.Seq, args.Message); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendMessage: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "sendMessage", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "sendMessage", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorSendChatChecked struct {
  handler TalkService
}

func (p *talkServiceProcessorSendChatChecked) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceSendChatCheckedArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "sendChatChecked", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceSendChatCheckedResult{}
  if err2 = p.handler.SendChatChecked(ctx, args.Seq, args.ChatMid, args.LastMessageId, args.SessionId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendChatChecked: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "sendChatChecked", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "sendChatChecked", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetRoom struct {
  handler TalkService
}

func (p *talkServiceProcessorGetRoom) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetRoomArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getRoom", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetRoomResult{}
  var retval *Room
  if retval, err2 = p.handler.GetRoom(ctx, args.RoomId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRoom: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getRoom", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getRoom", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUpdateChat struct {
  handler TalkService
}

func (p *talkServiceProcessorUpdateChat) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUpdateChatArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "updateChat", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceUpdateChatResult{}
  var retval *UpdateChatResponse
  if retval, err2 = p.handler.UpdateChat(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateChat: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "updateChat", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "updateChat", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetChats struct {
  handler TalkService
}

func (p *talkServiceProcessorGetChats) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetChatsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getChats", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetChatsResult{}
  var retval *GetChatsResponse
  if retval, err2 = p.handler.GetChats(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getChats: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getChats", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getChats", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetE2EEPublicKeysEx struct {
  handler TalkService
}

func (p *talkServiceProcessorGetE2EEPublicKeysEx) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetE2EEPublicKeysExArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getE2EEPublicKeysEx", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetE2EEPublicKeysExResult{}
  var retval []*E2EEPublicKey
  if retval, err2 = p.handler.GetE2EEPublicKeysEx(ctx, args.IgnoreE2EEStatus, args.SyncReason); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getE2EEPublicKeysEx: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getE2EEPublicKeysEx", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getE2EEPublicKeysEx", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRespondE2EEKeyExchange struct {
  handler TalkService
}

func (p *talkServiceProcessorRespondE2EEKeyExchange) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRespondE2EEKeyExchangeArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "respondE2EEKeyExchange", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceRespondE2EEKeyExchangeResult{}
  if err2 = p.handler.RespondE2EEKeyExchange(ctx, args.ReqSeq, args.EncryptedKeyChain, args.HashKeyChain); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing respondE2EEKeyExchange: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "respondE2EEKeyExchange", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "respondE2EEKeyExchange", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetLastE2EEGroupSharedKey struct {
  handler TalkService
}

func (p *talkServiceProcessorGetLastE2EEGroupSharedKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetLastE2EEGroupSharedKeyArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getLastE2EEGroupSharedKey", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetLastE2EEGroupSharedKeyResult{}
  var retval *E2EEGroupSharedKey
  if retval, err2 = p.handler.GetLastE2EEGroupSharedKey(ctx, args.KeyVersion, args.ChatMid); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getLastE2EEGroupSharedKey: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getLastE2EEGroupSharedKey", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getLastE2EEGroupSharedKey", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorVerifyQrcode struct {
  handler TalkService
}

func (p *talkServiceProcessorVerifyQrcode) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceVerifyQrcodeArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "verifyQrcode", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceVerifyQrcodeResult{}
  var retval string
  if retval, err2 = p.handler.VerifyQrcode(ctx, args.Verifier, args.PinCode); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing verifyQrcode: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "verifyQrcode", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "verifyQrcode", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetConfigurations struct {
  handler TalkService
}

func (p *talkServiceProcessorGetConfigurations) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetConfigurationsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getConfigurations", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetConfigurationsResult{}
  var retval *Configurations
  if retval, err2 = p.handler.GetConfigurations(ctx, args.Revision, args.RegionOfUsim, args.RegionOfTelephone, args.RegionOfLocale, args.Carrier, args.SyncReason); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getConfigurations: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getConfigurations", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getConfigurations", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorReissueChatTicket struct {
  handler TalkService
}

func (p *talkServiceProcessorReissueChatTicket) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceReissueChatTicketArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "reissueChatTicket", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceReissueChatTicketResult{}
  var retval *ReissueChatTicketResponse
  if retval, err2 = p.handler.ReissueChatTicket(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reissueChatTicket: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "reissueChatTicket", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "reissueChatTicket", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorNoop struct {
  handler TalkService
}

func (p *talkServiceProcessorNoop) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceNoopArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "noop", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceNoopResult{}
  if err2 = p.handler.Noop(ctx); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing noop: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "noop", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "noop", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetServerTime struct {
  handler TalkService
}

func (p *talkServiceProcessorGetServerTime) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetServerTimeArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getServerTime", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetServerTimeResult{}
  var retval int64
  if retval, err2 = p.handler.GetServerTime(ctx); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getServerTime: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getServerTime", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getServerTime", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorSetNotificationsEnabled struct {
  handler TalkService
}

func (p *talkServiceProcessorSetNotificationsEnabled) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceSetNotificationsEnabledArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "setNotificationsEnabled", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceSetNotificationsEnabledResult{}
  if err2 = p.handler.SetNotificationsEnabled(ctx, args.ReqSeq, args.Type, args.Target, args.Enablement); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setNotificationsEnabled: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "setNotificationsEnabled", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "setNotificationsEnabled", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRequestAccountPasswordReset struct {
  handler TalkService
}

func (p *talkServiceProcessorRequestAccountPasswordReset) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRequestAccountPasswordResetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "requestAccountPasswordReset", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceRequestAccountPasswordResetResult{}
  if err2 = p.handler.RequestAccountPasswordReset(ctx, args.Provider, args.Identifier, args.Locale); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing requestAccountPasswordReset: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "requestAccountPasswordReset", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "requestAccountPasswordReset", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetCountries struct {
  handler TalkService
}

func (p *talkServiceProcessorGetCountries) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetCountriesArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getCountries", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetCountriesResult{}
  var retval []string
  if retval, err2 = p.handler.GetCountries(ctx, args.CountryGroup); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCountries: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getCountries", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getCountries", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRegisterUserid struct {
  handler TalkService
}

func (p *talkServiceProcessorRegisterUserid) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRegisterUseridArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "registerUserid", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceRegisterUseridResult{}
  var retval bool
  if retval, err2 = p.handler.RegisterUserid(ctx, args.ReqSeq, args.SearchId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerUserid: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "registerUserid", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "registerUserid", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorIsUseridAvailable struct {
  handler TalkService
}

func (p *talkServiceProcessorIsUseridAvailable) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceIsUseridAvailableArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "isUseridAvailable", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceIsUseridAvailableResult{}
  var retval bool
  if retval, err2 = p.handler.IsUseridAvailable(ctx, args.SearchId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing isUseridAvailable: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "isUseridAvailable", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "isUseridAvailable", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetProfile struct {
  handler TalkService
}

func (p *talkServiceProcessorGetProfile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetProfileArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getProfile", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetProfileResult{}
  var retval *Profile
  if retval, err2 = p.handler.GetProfile(ctx, args.SyncReason); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getProfile: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getProfile", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getProfile", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorStartUpdateVerification struct {
  handler TalkService
}

func (p *talkServiceProcessorStartUpdateVerification) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceStartUpdateVerificationArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "startUpdateVerification", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceStartUpdateVerificationResult{}
  var retval *VerificationSessionData
  if retval, err2 = p.handler.StartUpdateVerification(ctx, args.Region, args.Carrier, args.Phone, args.UdidHash, args.DeviceInfo, args.NetworkCode, args.Locale, args.SimInfo); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing startUpdateVerification: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "startUpdateVerification", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "startUpdateVerification", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorVerifyPhoneNumber struct {
  handler TalkService
}

func (p *talkServiceProcessorVerifyPhoneNumber) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceVerifyPhoneNumberArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "verifyPhoneNumber", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceVerifyPhoneNumberResult{}
  var retval *PhoneVerificationResult_
  if retval, err2 = p.handler.VerifyPhoneNumber(ctx, args.SessionId, args.PinCode, args.UdidHash, args.MigrationPincodeSessionId, args.OldUdidHash); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing verifyPhoneNumber: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "verifyPhoneNumber", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "verifyPhoneNumber", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUpdateAccountMigrationPincode struct {
  handler TalkService
}

func (p *talkServiceProcessorUpdateAccountMigrationPincode) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUpdateAccountMigrationPincodeArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "updateAccountMigrationPincode", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceUpdateAccountMigrationPincodeResult{}
  if err2 = p.handler.UpdateAccountMigrationPincode(ctx, args.AccountMigrationPincode); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateAccountMigrationPincode: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "updateAccountMigrationPincode", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "updateAccountMigrationPincode", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorResendPinCode struct {
  handler TalkService
}

func (p *talkServiceProcessorResendPinCode) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceResendPinCodeArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "resendPinCode", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceResendPinCodeResult{}
  if err2 = p.handler.ResendPinCode(ctx, args.SessionId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing resendPinCode: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "resendPinCode", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "resendPinCode", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorChangeVerificationMethod struct {
  handler TalkService
}

func (p *talkServiceProcessorChangeVerificationMethod) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceChangeVerificationMethodArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "changeVerificationMethod", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceChangeVerificationMethodResult{}
  var retval *VerificationSessionData
  if retval, err2 = p.handler.ChangeVerificationMethod(ctx, args.SessionId, args.Method); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing changeVerificationMethod: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "changeVerificationMethod", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "changeVerificationMethod", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorFinishUpdateVerification struct {
  handler TalkService
}

func (p *talkServiceProcessorFinishUpdateVerification) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceFinishUpdateVerificationArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "finishUpdateVerification", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceFinishUpdateVerificationResult{}
  if err2 = p.handler.FinishUpdateVerification(ctx, args.SessionId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing finishUpdateVerification: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "finishUpdateVerification", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "finishUpdateVerification", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetSettings struct {
  handler TalkService
}

func (p *talkServiceProcessorGetSettings) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetSettingsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getSettings", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetSettingsResult{}
  var retval *Settings
  if retval, err2 = p.handler.GetSettings(ctx, args.SyncReason); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSettings: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getSettings", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getSettings", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorBlockRecommendation struct {
  handler TalkService
}

func (p *talkServiceProcessorBlockRecommendation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceBlockRecommendationArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "blockRecommendation", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceBlockRecommendationResult{}
  if err2 = p.handler.BlockRecommendation(ctx, args.ReqSeq, args.ID); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing blockRecommendation: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "blockRecommendation", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "blockRecommendation", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorBlockContact struct {
  handler TalkService
}

func (p *talkServiceProcessorBlockContact) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceBlockContactArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "blockContact", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceBlockContactResult{}
  if err2 = p.handler.BlockContact(ctx, args.ReqSeq, args.ID); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing blockContact: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "blockContact", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "blockContact", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUnblockRecommendation struct {
  handler TalkService
}

func (p *talkServiceProcessorUnblockRecommendation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUnblockRecommendationArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "unblockRecommendation", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceUnblockRecommendationResult{}
  if err2 = p.handler.UnblockRecommendation(ctx, args.ReqSeq, args.ID); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unblockRecommendation: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "unblockRecommendation", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "unblockRecommendation", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUnblockContact struct {
  handler TalkService
}

func (p *talkServiceProcessorUnblockContact) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUnblockContactArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "unblockContact", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceUnblockContactResult{}
  if err2 = p.handler.UnblockContact(ctx, args.ReqSeq, args.ID, args.Reference); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unblockContact: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "unblockContact", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "unblockContact", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorFindAndAddContactsByMid struct {
  handler TalkService
}

func (p *talkServiceProcessorFindAndAddContactsByMid) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceFindAndAddContactsByMidArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "findAndAddContactsByMid", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceFindAndAddContactsByMidResult{}
  var retval map[string]*Contact
  if retval, err2 = p.handler.FindAndAddContactsByMid(ctx, args.ReqSeq, args.Mid, args.Type, args.Reference); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findAndAddContactsByMid: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "findAndAddContactsByMid", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "findAndAddContactsByMid", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorFindContactByUserid struct {
  handler TalkService
}

func (p *talkServiceProcessorFindContactByUserid) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceFindContactByUseridArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "findContactByUserid", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceFindContactByUseridResult{}
  var retval *Contact
  if retval, err2 = p.handler.FindContactByUserid(ctx, args.SearchId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findContactByUserid: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "findContactByUserid", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "findContactByUserid", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorInviteFriendsBySms struct {
  handler TalkService
}

func (p *talkServiceProcessorInviteFriendsBySms) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceInviteFriendsBySmsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "inviteFriendsBySms", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceInviteFriendsBySmsResult{}
  if err2 = p.handler.InviteFriendsBySms(ctx, args.PhoneNumberList); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing inviteFriendsBySms: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "inviteFriendsBySms", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "inviteFriendsBySms", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetContacts struct {
  handler TalkService
}

func (p *talkServiceProcessorGetContacts) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetContactsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getContacts", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetContactsResult{}
  var retval []*Contact
  if retval, err2 = p.handler.GetContacts(ctx, args.Ids); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getContacts: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getContacts", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getContacts", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorSyncContacts struct {
  handler TalkService
}

func (p *talkServiceProcessorSyncContacts) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceSyncContactsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "syncContacts", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceSyncContactsResult{}
  var retval map[string]*ContactRegistration
  if retval, err2 = p.handler.SyncContacts(ctx, args.ReqSeq, args.LocalContacts); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing syncContacts: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "syncContacts", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "syncContacts", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUpdateContactSetting struct {
  handler TalkService
}

func (p *talkServiceProcessorUpdateContactSetting) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUpdateContactSettingArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "updateContactSetting", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceUpdateContactSettingResult{}
  if err2 = p.handler.UpdateContactSetting(ctx, args.ReqSeq, args.Mid, args.Flag, args.Value); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateContactSetting: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "updateContactSetting", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "updateContactSetting", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorSendChatRemoved struct {
  handler TalkService
}

func (p *talkServiceProcessorSendChatRemoved) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceSendChatRemovedArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "sendChatRemoved", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceSendChatRemovedResult{}
  if err2 = p.handler.SendChatRemoved(ctx, args.Seq, args.ChatMid, args.LastMessageId, args.SessionId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendChatRemoved: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "sendChatRemoved", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "sendChatRemoved", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorLeaveRoom struct {
  handler TalkService
}

func (p *talkServiceProcessorLeaveRoom) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceLeaveRoomArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "leaveRoom", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceLeaveRoomResult{}
  if err2 = p.handler.LeaveRoom(ctx, args.ReqSeq, args.RoomId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing leaveRoom: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "leaveRoom", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "leaveRoom", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUnsendMessage struct {
  handler TalkService
}

func (p *talkServiceProcessorUnsendMessage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUnsendMessageArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "unsendMessage", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceUnsendMessageResult{}
  if err2 = p.handler.UnsendMessage(ctx, args.Seq, args.MessageId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unsendMessage: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "unsendMessage", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "unsendMessage", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorInviteIntoRoom struct {
  handler TalkService
}

func (p *talkServiceProcessorInviteIntoRoom) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceInviteIntoRoomArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "inviteIntoRoom", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceInviteIntoRoomResult{}
  if err2 = p.handler.InviteIntoRoom(ctx, args.ReqSeq, args.RoomId, args.ContactIds); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing inviteIntoRoom: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "inviteIntoRoom", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "inviteIntoRoom", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorCreateRoom struct {
  handler TalkService
}

func (p *talkServiceProcessorCreateRoom) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceCreateRoomArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "createRoom", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceCreateRoomResult{}
  var retval *Room
  if retval, err2 = p.handler.CreateRoom(ctx, args.ReqSeq, args.ContactIds); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createRoom: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "createRoom", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "createRoom", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorInviteIntoChat struct {
  handler TalkService
}

func (p *talkServiceProcessorInviteIntoChat) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceInviteIntoChatArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "inviteIntoChat", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceInviteIntoChatResult{}
  var retval *InviteIntoChatResponse
  if retval, err2 = p.handler.InviteIntoChat(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing inviteIntoChat: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "inviteIntoChat", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "inviteIntoChat", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorDeleteSelfFromChat struct {
  handler TalkService
}

func (p *talkServiceProcessorDeleteSelfFromChat) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceDeleteSelfFromChatArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "deleteSelfFromChat", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceDeleteSelfFromChatResult{}
  var retval *DeleteSelfFromChatResponse
  if retval, err2 = p.handler.DeleteSelfFromChat(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteSelfFromChat: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "deleteSelfFromChat", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "deleteSelfFromChat", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetAllChatMids struct {
  handler TalkService
}

func (p *talkServiceProcessorGetAllChatMids) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetAllChatMidsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getAllChatMids", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetAllChatMidsResult{}
  var retval *GetAllChatMidsResponse
  if retval, err2 = p.handler.GetAllChatMids(ctx, args.Request, args.SyncReason); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllChatMids: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getAllChatMids", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getAllChatMids", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorCreateChat struct {
  handler TalkService
}

func (p *talkServiceProcessorCreateChat) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceCreateChatArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "createChat", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceCreateChatResult{}
  var retval *CreateChatResponse
  if retval, err2 = p.handler.CreateChat(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createChat: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "createChat", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "createChat", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorAcceptChatInvitation struct {
  handler TalkService
}

func (p *talkServiceProcessorAcceptChatInvitation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceAcceptChatInvitationArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "acceptChatInvitation", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceAcceptChatInvitationResult{}
  var retval *AcceptChatInvitationResponse
  if retval, err2 = p.handler.AcceptChatInvitation(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing acceptChatInvitation: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "acceptChatInvitation", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "acceptChatInvitation", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRejectChatInvitation struct {
  handler TalkService
}

func (p *talkServiceProcessorRejectChatInvitation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRejectChatInvitationArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "rejectChatInvitation", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceRejectChatInvitationResult{}
  var retval *RejectChatInvitationResponse
  if retval, err2 = p.handler.RejectChatInvitation(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rejectChatInvitation: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "rejectChatInvitation", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "rejectChatInvitation", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorDeleteOtherFromChat struct {
  handler TalkService
}

func (p *talkServiceProcessorDeleteOtherFromChat) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceDeleteOtherFromChatArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "deleteOtherFromChat", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceDeleteOtherFromChatResult{}
  var retval *DeleteOtherFromChatResponse
  if retval, err2 = p.handler.DeleteOtherFromChat(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteOtherFromChat: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "deleteOtherFromChat", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "deleteOtherFromChat", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorCancelChatInvitation struct {
  handler TalkService
}

func (p *talkServiceProcessorCancelChatInvitation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceCancelChatInvitationArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "cancelChatInvitation", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceCancelChatInvitationResult{}
  var retval *CancelChatInvitationResponse
  if retval, err2 = p.handler.CancelChatInvitation(ctx, args.Request); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing cancelChatInvitation: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "cancelChatInvitation", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "cancelChatInvitation", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetSessions struct {
  handler TalkService
}

func (p *talkServiceProcessorGetSessions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetSessionsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getSessions", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetSessionsResult{}
  var retval []*LoginSession
  if retval, err2 = p.handler.GetSessions(ctx); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSessions: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getSessions", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getSessions", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorLogoutSession struct {
  handler TalkService
}

func (p *talkServiceProcessorLogoutSession) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceLogoutSessionArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "logoutSession", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceLogoutSessionResult{}
  if err2 = p.handler.LogoutSession(ctx, args.TokenKey); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing logoutSession: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "logoutSession", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "logoutSession", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorNotifyUpdated struct {
  handler TalkService
}

func (p *talkServiceProcessorNotifyUpdated) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceNotifyUpdatedArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "notifyUpdated", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceNotifyUpdatedResult{}
  if err2 = p.handler.NotifyUpdated(ctx, args.LastRev, args.DeviceInfo, args.UdidHash, args.OldUdidHash); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing notifyUpdated: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "notifyUpdated", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "notifyUpdated", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorSendEchoPush struct {
  handler TalkService
}

func (p *talkServiceProcessorSendEchoPush) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceSendEchoPushArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "sendEchoPush", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceSendEchoPushResult{}
  if err2 = p.handler.SendEchoPush(ctx, args.Text); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendEchoPush: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "sendEchoPush", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "sendEchoPush", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUpdateNotificationToken struct {
  handler TalkService
}

func (p *talkServiceProcessorUpdateNotificationToken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUpdateNotificationTokenArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "updateNotificationToken", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceUpdateNotificationTokenResult{}
  if err2 = p.handler.UpdateNotificationToken(ctx, args.Type, args.Token); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateNotificationToken: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "updateNotificationToken", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "updateNotificationToken", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetRSAKeyInfo struct {
  handler TalkService
}

func (p *talkServiceProcessorGetRSAKeyInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetRSAKeyInfoArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getRSAKeyInfo", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetRSAKeyInfoResult{}
  var retval *RSAKey
  if retval, err2 = p.handler.GetRSAKeyInfo(ctx, args.Provider); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRSAKeyInfo: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getRSAKeyInfo", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getRSAKeyInfo", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetBlockedContactIds struct {
  handler TalkService
}

func (p *talkServiceProcessorGetBlockedContactIds) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetBlockedContactIdsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getBlockedContactIds", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetBlockedContactIdsResult{}
  var retval []string
  if retval, err2 = p.handler.GetBlockedContactIds(ctx, args.SyncReason); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBlockedContactIds: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getBlockedContactIds", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getBlockedContactIds", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRegisterE2EEPublicKey struct {
  handler TalkService
}

func (p *talkServiceProcessorRegisterE2EEPublicKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRegisterE2EEPublicKeyArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "registerE2EEPublicKey", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceRegisterE2EEPublicKeyResult{}
  var retval *E2EEPublicKey
  if retval, err2 = p.handler.RegisterE2EEPublicKey(ctx, args.ReqSeq, args.PublicKey); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerE2EEPublicKey: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "registerE2EEPublicKey", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "registerE2EEPublicKey", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetE2EEPublicKey struct {
  handler TalkService
}

func (p *talkServiceProcessorGetE2EEPublicKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetE2EEPublicKeyArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getE2EEPublicKey", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetE2EEPublicKeyResult{}
  var retval *E2EEPublicKey
  if retval, err2 = p.handler.GetE2EEPublicKey(ctx, args.Mid, args.KeyVersion, args.KeyId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getE2EEPublicKey: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getE2EEPublicKey", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getE2EEPublicKey", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorNegotiateE2EEPublicKey struct {
  handler TalkService
}

func (p *talkServiceProcessorNegotiateE2EEPublicKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceNegotiateE2EEPublicKeyArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "negotiateE2EEPublicKey", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceNegotiateE2EEPublicKeyResult{}
  var retval *E2EENegotiationResult_
  if retval, err2 = p.handler.NegotiateE2EEPublicKey(ctx, args.Mid); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing negotiateE2EEPublicKey: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "negotiateE2EEPublicKey", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "negotiateE2EEPublicKey", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRegisterE2EEGroupKey struct {
  handler TalkService
}

func (p *talkServiceProcessorRegisterE2EEGroupKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRegisterE2EEGroupKeyArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "registerE2EEGroupKey", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceRegisterE2EEGroupKeyResult{}
  var retval *E2EEGroupSharedKey
  if retval, err2 = p.handler.RegisterE2EEGroupKey(ctx, args.KeyVersion, args.ChatMid, args.Members, args.KeyIds, args.EncryptedSharedKeys); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerE2EEGroupKey: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "registerE2EEGroupKey", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "registerE2EEGroupKey", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetE2EEGroupSharedKey struct {
  handler TalkService
}

func (p *talkServiceProcessorGetE2EEGroupSharedKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetE2EEGroupSharedKeyArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getE2EEGroupSharedKey", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetE2EEGroupSharedKeyResult{}
  var retval *E2EEGroupSharedKey
  if retval, err2 = p.handler.GetE2EEGroupSharedKey(ctx, args.KeyVersion, args.ChatMid, args.GroupKeyId); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getE2EEGroupSharedKey: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getE2EEGroupSharedKey", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getE2EEGroupSharedKey", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetLastE2EEPublicKeys struct {
  handler TalkService
}

func (p *talkServiceProcessorGetLastE2EEPublicKeys) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetLastE2EEPublicKeysArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getLastE2EEPublicKeys", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetLastE2EEPublicKeysResult{}
  var retval *E2EEPublicKey
  if retval, err2 = p.handler.GetLastE2EEPublicKeys(ctx, args.ChatMid); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getLastE2EEPublicKeys: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getLastE2EEPublicKeys", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getLastE2EEPublicKeys", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

type TalkServiceUnregisterUserAndDeviceArgs struct {
}

func NewTalkServiceUnregisterUserAndDeviceArgs() *TalkServiceUnregisterUserAndDeviceArgs {
  return &TalkServiceUnregisterUserAndDeviceArgs{}
}

func (p *TalkServiceUnregisterUserAndDeviceArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUnregisterUserAndDeviceArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "unregisterUserAndDevice_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUnregisterUserAndDeviceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUnregisterUserAndDeviceArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceUnregisterUserAndDeviceResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUnregisterUserAndDeviceResult() *TalkServiceUnregisterUserAndDeviceResult {
  return &TalkServiceUnregisterUserAndDeviceResult{}
}

var TalkServiceUnregisterUserAndDeviceResult_Success_DEFAULT string
func (p *TalkServiceUnregisterUserAndDeviceResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return TalkServiceUnregisterUserAndDeviceResult_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceUnregisterUserAndDeviceResult_E_DEFAULT *TalkException
func (p *TalkServiceUnregisterUserAndDeviceResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUnregisterUserAndDeviceResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUnregisterUserAndDeviceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceUnregisterUserAndDeviceResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUnregisterUserAndDeviceResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUnregisterUserAndDeviceResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceUnregisterUserAndDeviceResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUnregisterUserAndDeviceResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "unregisterUserAndDevice_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUnregisterUserAndDeviceResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceUnregisterUserAndDeviceResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUnregisterUserAndDeviceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUnregisterUserAndDeviceResult(%+v)", *p)
}

// Attributes:
//  - ExpirationTime
//  - MaxUseCount
type TalkServiceGenerateUserTicketArgs struct {
  // unused fields # 1 to 2
  ExpirationTime int64 `thrift:"expirationTime,3" db:"expirationTime" json:"expirationTime"`
  MaxUseCount int32 `thrift:"maxUseCount,4" db:"maxUseCount" json:"maxUseCount"`
}

func NewTalkServiceGenerateUserTicketArgs() *TalkServiceGenerateUserTicketArgs {
  return &TalkServiceGenerateUserTicketArgs{}
}


func (p *TalkServiceGenerateUserTicketArgs) GetExpirationTime() int64 {
  return p.ExpirationTime
}

func (p *TalkServiceGenerateUserTicketArgs) GetMaxUseCount() int32 {
  return p.MaxUseCount
}
func (p *TalkServiceGenerateUserTicketArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGenerateUserTicketArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ExpirationTime = v
}
  return nil
}

func (p *TalkServiceGenerateUserTicketArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MaxUseCount = v
}
  return nil
}

func (p *TalkServiceGenerateUserTicketArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "generateUserTicket_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGenerateUserTicketArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "expirationTime", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:expirationTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ExpirationTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.expirationTime (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:expirationTime: ", p), err) }
  return err
}

func (p *TalkServiceGenerateUserTicketArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "maxUseCount", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:maxUseCount: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MaxUseCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.maxUseCount (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:maxUseCount: ", p), err) }
  return err
}

func (p *TalkServiceGenerateUserTicketArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGenerateUserTicketArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGenerateUserTicketResult struct {
  Success *Ticket `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGenerateUserTicketResult() *TalkServiceGenerateUserTicketResult {
  return &TalkServiceGenerateUserTicketResult{}
}

var TalkServiceGenerateUserTicketResult_Success_DEFAULT *Ticket
func (p *TalkServiceGenerateUserTicketResult) GetSuccess() *Ticket {
  if !p.IsSetSuccess() {
    return TalkServiceGenerateUserTicketResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGenerateUserTicketResult_E_DEFAULT *TalkException
func (p *TalkServiceGenerateUserTicketResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGenerateUserTicketResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGenerateUserTicketResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGenerateUserTicketResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGenerateUserTicketResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGenerateUserTicketResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Ticket{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGenerateUserTicketResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGenerateUserTicketResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "generateUserTicket_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGenerateUserTicketResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGenerateUserTicketResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGenerateUserTicketResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGenerateUserTicketResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Attr
//  - Value
type TalkServiceUpdateProfileAttributeArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  Attr ProfileAttribute `thrift:"attr,2" db:"attr" json:"attr"`
  Value string `thrift:"value,3" db:"value" json:"value"`
}

func NewTalkServiceUpdateProfileAttributeArgs() *TalkServiceUpdateProfileAttributeArgs {
  return &TalkServiceUpdateProfileAttributeArgs{}
}


func (p *TalkServiceUpdateProfileAttributeArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceUpdateProfileAttributeArgs) GetAttr() ProfileAttribute {
  return p.Attr
}

func (p *TalkServiceUpdateProfileAttributeArgs) GetValue() string {
  return p.Value
}
func (p *TalkServiceUpdateProfileAttributeArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateProfileAttributeArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceUpdateProfileAttributeArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := ProfileAttribute(v)
  p.Attr = temp
}
  return nil
}

func (p *TalkServiceUpdateProfileAttributeArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *TalkServiceUpdateProfileAttributeArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateProfileAttribute_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateProfileAttributeArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceUpdateProfileAttributeArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "attr", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:attr: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Attr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.attr (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:attr: ", p), err) }
  return err
}

func (p *TalkServiceUpdateProfileAttributeArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "value", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:value: ", p), err) }
  return err
}

func (p *TalkServiceUpdateProfileAttributeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateProfileAttributeArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUpdateProfileAttributeResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdateProfileAttributeResult() *TalkServiceUpdateProfileAttributeResult {
  return &TalkServiceUpdateProfileAttributeResult{}
}

var TalkServiceUpdateProfileAttributeResult_E_DEFAULT *TalkException
func (p *TalkServiceUpdateProfileAttributeResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUpdateProfileAttributeResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUpdateProfileAttributeResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUpdateProfileAttributeResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateProfileAttributeResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUpdateProfileAttributeResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateProfileAttribute_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateProfileAttributeResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateProfileAttributeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateProfileAttributeResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - AttributesToUpdate
//  - Settings
type TalkServiceUpdateSettingsAttributes2Args struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  // unused field # 2
  Settings *Settings `thrift:"settings,3" db:"settings" json:"settings"`
  AttributesToUpdate []SettingsAttributeEx `thrift:"attributesToUpdate,4" db:"attributesToUpdate" json:"attributesToUpdate"`
}

func NewTalkServiceUpdateSettingsAttributes2Args() *TalkServiceUpdateSettingsAttributes2Args {
  return &TalkServiceUpdateSettingsAttributes2Args{}
}


func (p *TalkServiceUpdateSettingsAttributes2Args) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceUpdateSettingsAttributes2Args) GetAttributesToUpdate() []SettingsAttributeEx {
  return p.AttributesToUpdate
}
var TalkServiceUpdateSettingsAttributes2Args_Settings_DEFAULT *Settings
func (p *TalkServiceUpdateSettingsAttributes2Args) GetSettings() *Settings {
  if !p.IsSetSettings() {
    return TalkServiceUpdateSettingsAttributes2Args_Settings_DEFAULT
  }
return p.Settings
}
func (p *TalkServiceUpdateSettingsAttributes2Args) IsSetSettings() bool {
  return p.Settings != nil
}

func (p *TalkServiceUpdateSettingsAttributes2Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateSettingsAttributes2Args)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceUpdateSettingsAttributes2Args)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]SettingsAttributeEx, 0, size)
  p.AttributesToUpdate =  tSet
  for i := 0; i < size; i ++ {
var _elem273 SettingsAttributeEx
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := SettingsAttributeEx(v)
    _elem273 = temp
}
    p.AttributesToUpdate = append(p.AttributesToUpdate, _elem273)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TalkServiceUpdateSettingsAttributes2Args)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Settings = &Settings{}
  if err := p.Settings.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Settings), err)
  }
  return nil
}

func (p *TalkServiceUpdateSettingsAttributes2Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateSettingsAttributes2_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateSettingsAttributes2Args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceUpdateSettingsAttributes2Args) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "settings", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:settings: ", p), err) }
  if err := p.Settings.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Settings), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:settings: ", p), err) }
  return err
}

func (p *TalkServiceUpdateSettingsAttributes2Args) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "attributesToUpdate", thrift.SET, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:attributesToUpdate: ", p), err) }
  if err := oprot.WriteSetBegin(ctx, thrift.I32, len(p.AttributesToUpdate)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.AttributesToUpdate); i++ {
    for j := i+1; j<len(p.AttributesToUpdate); j++ {
      if func(tgt, src SettingsAttributeEx) bool {
        if tgt != src { return false }
        return true
      }(p.AttributesToUpdate[i], p.AttributesToUpdate[j]) {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.AttributesToUpdate))
      }
    }
  }
  for _, v := range p.AttributesToUpdate {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(ctx); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:attributesToUpdate: ", p), err) }
  return err
}

func (p *TalkServiceUpdateSettingsAttributes2Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateSettingsAttributes2Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceUpdateSettingsAttributes2Result struct {
  Success []SettingsAttributeEx `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdateSettingsAttributes2Result() *TalkServiceUpdateSettingsAttributes2Result {
  return &TalkServiceUpdateSettingsAttributes2Result{}
}

var TalkServiceUpdateSettingsAttributes2Result_Success_DEFAULT []SettingsAttributeEx

func (p *TalkServiceUpdateSettingsAttributes2Result) GetSuccess() []SettingsAttributeEx {
  return p.Success
}
var TalkServiceUpdateSettingsAttributes2Result_E_DEFAULT *TalkException
func (p *TalkServiceUpdateSettingsAttributes2Result) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUpdateSettingsAttributes2Result_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUpdateSettingsAttributes2Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceUpdateSettingsAttributes2Result) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUpdateSettingsAttributes2Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateSettingsAttributes2Result)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]SettingsAttributeEx, 0, size)
  p.Success =  tSet
  for i := 0; i < size; i ++ {
var _elem274 SettingsAttributeEx
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := SettingsAttributeEx(v)
    _elem274 = temp
}
    p.Success = append(p.Success, _elem274)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TalkServiceUpdateSettingsAttributes2Result)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUpdateSettingsAttributes2Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateSettingsAttributes2_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateSettingsAttributes2Result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.SET, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteSetBegin(ctx, thrift.I32, len(p.Success)); err != nil {
      return thrift.PrependError("error writing set begin: ", err)
    }
    for i := 0; i<len(p.Success); i++ {
      for j := i+1; j<len(p.Success); j++ {
        if func(tgt, src SettingsAttributeEx) bool {
          if tgt != src { return false }
          return true
        }(p.Success[i], p.Success[j]) {
          return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Success))
        }
      }
    }
    for _, v := range p.Success {
      if err := oprot.WriteI32(ctx, int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteSetEnd(ctx); err != nil {
      return thrift.PrependError("error writing set end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateSettingsAttributes2Result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateSettingsAttributes2Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateSettingsAttributes2Result(%+v)", *p)
}

// Attributes:
//  - SyncReason
type TalkServiceGetRecommendationIdsArgs struct {
  SyncReason SyncReason `thrift:"syncReason,1" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetRecommendationIdsArgs() *TalkServiceGetRecommendationIdsArgs {
  return &TalkServiceGetRecommendationIdsArgs{}
}


func (p *TalkServiceGetRecommendationIdsArgs) GetSyncReason() SyncReason {
  return p.SyncReason
}
func (p *TalkServiceGetRecommendationIdsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetRecommendationIdsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SyncReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *TalkServiceGetRecommendationIdsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRecommendationIds_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetRecommendationIdsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncReason", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncReason: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncReason: ", p), err) }
  return err
}

func (p *TalkServiceGetRecommendationIdsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetRecommendationIdsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetRecommendationIdsResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetRecommendationIdsResult() *TalkServiceGetRecommendationIdsResult {
  return &TalkServiceGetRecommendationIdsResult{}
}

var TalkServiceGetRecommendationIdsResult_Success_DEFAULT []string

func (p *TalkServiceGetRecommendationIdsResult) GetSuccess() []string {
  return p.Success
}
var TalkServiceGetRecommendationIdsResult_E_DEFAULT *TalkException
func (p *TalkServiceGetRecommendationIdsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetRecommendationIdsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetRecommendationIdsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetRecommendationIdsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetRecommendationIdsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetRecommendationIdsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem275 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem275 = v
}
    p.Success = append(p.Success, _elem275)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetRecommendationIdsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetRecommendationIdsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRecommendationIds_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetRecommendationIdsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetRecommendationIdsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetRecommendationIdsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetRecommendationIdsResult(%+v)", *p)
}

// Attributes:
//  - SyncReason
type TalkServiceGetBlockedRecommendationIdsArgs struct {
  SyncReason SyncReason `thrift:"syncReason,1" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetBlockedRecommendationIdsArgs() *TalkServiceGetBlockedRecommendationIdsArgs {
  return &TalkServiceGetBlockedRecommendationIdsArgs{}
}


func (p *TalkServiceGetBlockedRecommendationIdsArgs) GetSyncReason() SyncReason {
  return p.SyncReason
}
func (p *TalkServiceGetBlockedRecommendationIdsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetBlockedRecommendationIdsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SyncReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *TalkServiceGetBlockedRecommendationIdsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getBlockedRecommendationIds_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetBlockedRecommendationIdsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncReason", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncReason: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncReason: ", p), err) }
  return err
}

func (p *TalkServiceGetBlockedRecommendationIdsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetBlockedRecommendationIdsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetBlockedRecommendationIdsResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetBlockedRecommendationIdsResult() *TalkServiceGetBlockedRecommendationIdsResult {
  return &TalkServiceGetBlockedRecommendationIdsResult{}
}

var TalkServiceGetBlockedRecommendationIdsResult_Success_DEFAULT []string

func (p *TalkServiceGetBlockedRecommendationIdsResult) GetSuccess() []string {
  return p.Success
}
var TalkServiceGetBlockedRecommendationIdsResult_E_DEFAULT *TalkException
func (p *TalkServiceGetBlockedRecommendationIdsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetBlockedRecommendationIdsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetBlockedRecommendationIdsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetBlockedRecommendationIdsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetBlockedRecommendationIdsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetBlockedRecommendationIdsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem276 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem276 = v
}
    p.Success = append(p.Success, _elem276)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetBlockedRecommendationIdsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetBlockedRecommendationIdsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getBlockedRecommendationIds_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetBlockedRecommendationIdsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetBlockedRecommendationIdsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetBlockedRecommendationIdsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetBlockedRecommendationIdsResult(%+v)", *p)
}

// Attributes:
//  - SyncReason
type TalkServiceGetAllContactIdsArgs struct {
  SyncReason SyncReason `thrift:"syncReason,1" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetAllContactIdsArgs() *TalkServiceGetAllContactIdsArgs {
  return &TalkServiceGetAllContactIdsArgs{}
}


func (p *TalkServiceGetAllContactIdsArgs) GetSyncReason() SyncReason {
  return p.SyncReason
}
func (p *TalkServiceGetAllContactIdsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetAllContactIdsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SyncReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *TalkServiceGetAllContactIdsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getAllContactIds_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetAllContactIdsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncReason", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncReason: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncReason: ", p), err) }
  return err
}

func (p *TalkServiceGetAllContactIdsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetAllContactIdsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetAllContactIdsResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetAllContactIdsResult() *TalkServiceGetAllContactIdsResult {
  return &TalkServiceGetAllContactIdsResult{}
}

var TalkServiceGetAllContactIdsResult_Success_DEFAULT []string

func (p *TalkServiceGetAllContactIdsResult) GetSuccess() []string {
  return p.Success
}
var TalkServiceGetAllContactIdsResult_E_DEFAULT *TalkException
func (p *TalkServiceGetAllContactIdsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetAllContactIdsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetAllContactIdsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetAllContactIdsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetAllContactIdsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetAllContactIdsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem277 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem277 = v
}
    p.Success = append(p.Success, _elem277)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetAllContactIdsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetAllContactIdsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getAllContactIds_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetAllContactIdsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetAllContactIdsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetAllContactIdsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetAllContactIdsResult(%+v)", *p)
}

// Attributes:
//  - ID
type TalkServiceGetContactArgs struct {
  // unused field # 1
  ID string `thrift:"id,2" db:"id" json:"id"`
}

func NewTalkServiceGetContactArgs() *TalkServiceGetContactArgs {
  return &TalkServiceGetContactArgs{}
}


func (p *TalkServiceGetContactArgs) GetID() string {
  return p.ID
}
func (p *TalkServiceGetContactArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetContactArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TalkServiceGetContactArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getContact_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetContactArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *TalkServiceGetContactArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetContactArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetContactResult struct {
  Success *Contact `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetContactResult() *TalkServiceGetContactResult {
  return &TalkServiceGetContactResult{}
}

var TalkServiceGetContactResult_Success_DEFAULT *Contact
func (p *TalkServiceGetContactResult) GetSuccess() *Contact {
  if !p.IsSetSuccess() {
    return TalkServiceGetContactResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetContactResult_E_DEFAULT *TalkException
func (p *TalkServiceGetContactResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetContactResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetContactResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetContactResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetContactResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetContactResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Contact{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetContactResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetContactResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getContact_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetContactResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetContactResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetContactResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetContactResult(%+v)", *p)
}

// Attributes:
//  - LocalRev
//  - Count
//  - GlobalRev
//  - IndividualRev
type TalkServiceFetchOpsArgs struct {
  // unused field # 1
  LocalRev int64 `thrift:"localRev,2" db:"localRev" json:"localRev"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
  GlobalRev int64 `thrift:"globalRev,4" db:"globalRev" json:"globalRev"`
  IndividualRev int64 `thrift:"individualRev,5" db:"individualRev" json:"individualRev"`
}

func NewTalkServiceFetchOpsArgs() *TalkServiceFetchOpsArgs {
  return &TalkServiceFetchOpsArgs{}
}


func (p *TalkServiceFetchOpsArgs) GetLocalRev() int64 {
  return p.LocalRev
}

func (p *TalkServiceFetchOpsArgs) GetCount() int32 {
  return p.Count
}

func (p *TalkServiceFetchOpsArgs) GetGlobalRev() int64 {
  return p.GlobalRev
}

func (p *TalkServiceFetchOpsArgs) GetIndividualRev() int64 {
  return p.IndividualRev
}
func (p *TalkServiceFetchOpsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFetchOpsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LocalRev = v
}
  return nil
}

func (p *TalkServiceFetchOpsArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TalkServiceFetchOpsArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.GlobalRev = v
}
  return nil
}

func (p *TalkServiceFetchOpsArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.IndividualRev = v
}
  return nil
}

func (p *TalkServiceFetchOpsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "fetchOps_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFetchOpsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "localRev", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:localRev: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LocalRev)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.localRev (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:localRev: ", p), err) }
  return err
}

func (p *TalkServiceFetchOpsArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *TalkServiceFetchOpsArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "globalRev", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:globalRev: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.GlobalRev)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.globalRev (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:globalRev: ", p), err) }
  return err
}

func (p *TalkServiceFetchOpsArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "individualRev", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:individualRev: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.IndividualRev)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.individualRev (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:individualRev: ", p), err) }
  return err
}

func (p *TalkServiceFetchOpsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFetchOpsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFetchOpsResult struct {
  Success []*Operation `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFetchOpsResult() *TalkServiceFetchOpsResult {
  return &TalkServiceFetchOpsResult{}
}

var TalkServiceFetchOpsResult_Success_DEFAULT []*Operation

func (p *TalkServiceFetchOpsResult) GetSuccess() []*Operation {
  return p.Success
}
var TalkServiceFetchOpsResult_E_DEFAULT *TalkException
func (p *TalkServiceFetchOpsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceFetchOpsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceFetchOpsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceFetchOpsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceFetchOpsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFetchOpsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Operation, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem278 := &Operation{}
    if err := _elem278.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem278), err)
    }
    p.Success = append(p.Success, _elem278)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceFetchOpsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceFetchOpsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "fetchOps_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFetchOpsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceFetchOpsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceFetchOpsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFetchOpsResult(%+v)", *p)
}

// Attributes:
//  - Seq
//  - Message
type TalkServiceSendMessageArgs struct {
  Seq int32 `thrift:"seq,1" db:"seq" json:"seq"`
  Message *Message `thrift:"message,2" db:"message" json:"message"`
}

func NewTalkServiceSendMessageArgs() *TalkServiceSendMessageArgs {
  return &TalkServiceSendMessageArgs{}
}


func (p *TalkServiceSendMessageArgs) GetSeq() int32 {
  return p.Seq
}
var TalkServiceSendMessageArgs_Message_DEFAULT *Message
func (p *TalkServiceSendMessageArgs) GetMessage() *Message {
  if !p.IsSetMessage() {
    return TalkServiceSendMessageArgs_Message_DEFAULT
  }
return p.Message
}
func (p *TalkServiceSendMessageArgs) IsSetMessage() bool {
  return p.Message != nil
}

func (p *TalkServiceSendMessageArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSendMessageArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Seq = v
}
  return nil
}

func (p *TalkServiceSendMessageArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Message = &Message{}
  if err := p.Message.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Message), err)
  }
  return nil
}

func (p *TalkServiceSendMessageArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sendMessage_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSendMessageArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "seq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Seq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq: ", p), err) }
  return err
}

func (p *TalkServiceSendMessageArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
  if err := p.Message.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Message), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  return err
}

func (p *TalkServiceSendMessageArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSendMessageArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceSendMessageResult struct {
  Success *Message `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceSendMessageResult() *TalkServiceSendMessageResult {
  return &TalkServiceSendMessageResult{}
}

var TalkServiceSendMessageResult_Success_DEFAULT *Message
func (p *TalkServiceSendMessageResult) GetSuccess() *Message {
  if !p.IsSetSuccess() {
    return TalkServiceSendMessageResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceSendMessageResult_E_DEFAULT *TalkException
func (p *TalkServiceSendMessageResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceSendMessageResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceSendMessageResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceSendMessageResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceSendMessageResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSendMessageResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Message{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceSendMessageResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceSendMessageResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sendMessage_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSendMessageResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceSendMessageResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceSendMessageResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSendMessageResult(%+v)", *p)
}

// Attributes:
//  - Seq
//  - ChatMid
//  - LastMessageId
//  - SessionId
type TalkServiceSendChatCheckedArgs struct {
  Seq int32 `thrift:"seq,1" db:"seq" json:"seq"`
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
  LastMessageId string `thrift:"lastMessageId,3" db:"lastMessageId" json:"lastMessageId"`
  SessionId int8 `thrift:"sessionId,4" db:"sessionId" json:"sessionId"`
}

func NewTalkServiceSendChatCheckedArgs() *TalkServiceSendChatCheckedArgs {
  return &TalkServiceSendChatCheckedArgs{}
}


func (p *TalkServiceSendChatCheckedArgs) GetSeq() int32 {
  return p.Seq
}

func (p *TalkServiceSendChatCheckedArgs) GetChatMid() string {
  return p.ChatMid
}

func (p *TalkServiceSendChatCheckedArgs) GetLastMessageId() string {
  return p.LastMessageId
}

func (p *TalkServiceSendChatCheckedArgs) GetSessionId() int8 {
  return p.SessionId
}
func (p *TalkServiceSendChatCheckedArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSendChatCheckedArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Seq = v
}
  return nil
}

func (p *TalkServiceSendChatCheckedArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *TalkServiceSendChatCheckedArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LastMessageId = v
}
  return nil
}

func (p *TalkServiceSendChatCheckedArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := int8(v)
  p.SessionId = temp
}
  return nil
}

func (p *TalkServiceSendChatCheckedArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sendChatChecked_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSendChatCheckedArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "seq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Seq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq: ", p), err) }
  return err
}

func (p *TalkServiceSendChatCheckedArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *TalkServiceSendChatCheckedArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastMessageId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lastMessageId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.LastMessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastMessageId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lastMessageId: ", p), err) }
  return err
}

func (p *TalkServiceSendChatCheckedArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sessionId", thrift.BYTE, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sessionId: ", p), err) }
  if err := oprot.WriteByte(ctx, int8(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sessionId: ", p), err) }
  return err
}

func (p *TalkServiceSendChatCheckedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSendChatCheckedArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceSendChatCheckedResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceSendChatCheckedResult() *TalkServiceSendChatCheckedResult {
  return &TalkServiceSendChatCheckedResult{}
}

var TalkServiceSendChatCheckedResult_E_DEFAULT *TalkException
func (p *TalkServiceSendChatCheckedResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceSendChatCheckedResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceSendChatCheckedResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceSendChatCheckedResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSendChatCheckedResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceSendChatCheckedResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sendChatChecked_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSendChatCheckedResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceSendChatCheckedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSendChatCheckedResult(%+v)", *p)
}

// Attributes:
//  - RoomId
type TalkServiceGetRoomArgs struct {
  // unused field # 1
  RoomId string `thrift:"roomId,2" db:"roomId" json:"roomId"`
}

func NewTalkServiceGetRoomArgs() *TalkServiceGetRoomArgs {
  return &TalkServiceGetRoomArgs{}
}


func (p *TalkServiceGetRoomArgs) GetRoomId() string {
  return p.RoomId
}
func (p *TalkServiceGetRoomArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetRoomArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RoomId = v
}
  return nil
}

func (p *TalkServiceGetRoomArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRoom_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetRoomArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "roomId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:roomId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RoomId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roomId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:roomId: ", p), err) }
  return err
}

func (p *TalkServiceGetRoomArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetRoomArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetRoomResult struct {
  Success *Room `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetRoomResult() *TalkServiceGetRoomResult {
  return &TalkServiceGetRoomResult{}
}

var TalkServiceGetRoomResult_Success_DEFAULT *Room
func (p *TalkServiceGetRoomResult) GetSuccess() *Room {
  if !p.IsSetSuccess() {
    return TalkServiceGetRoomResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetRoomResult_E_DEFAULT *TalkException
func (p *TalkServiceGetRoomResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetRoomResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetRoomResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetRoomResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetRoomResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetRoomResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Room{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetRoomResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetRoomResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRoom_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetRoomResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetRoomResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetRoomResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetRoomResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceUpdateChatArgs struct {
  Request *UpdateChatRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceUpdateChatArgs() *TalkServiceUpdateChatArgs {
  return &TalkServiceUpdateChatArgs{}
}

var TalkServiceUpdateChatArgs_Request_DEFAULT *UpdateChatRequest
func (p *TalkServiceUpdateChatArgs) GetRequest() *UpdateChatRequest {
  if !p.IsSetRequest() {
    return TalkServiceUpdateChatArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceUpdateChatArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceUpdateChatArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateChatArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &UpdateChatRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceUpdateChatArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateChat_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateChatArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceUpdateChatArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateChatArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceUpdateChatResult struct {
  Success *UpdateChatResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdateChatResult() *TalkServiceUpdateChatResult {
  return &TalkServiceUpdateChatResult{}
}

var TalkServiceUpdateChatResult_Success_DEFAULT *UpdateChatResponse
func (p *TalkServiceUpdateChatResult) GetSuccess() *UpdateChatResponse {
  if !p.IsSetSuccess() {
    return TalkServiceUpdateChatResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceUpdateChatResult_E_DEFAULT *TalkException
func (p *TalkServiceUpdateChatResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUpdateChatResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUpdateChatResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceUpdateChatResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUpdateChatResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateChatResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &UpdateChatResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceUpdateChatResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUpdateChatResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateChat_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateChatResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateChatResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateChatResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateChatResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceGetChatsArgs struct {
  Request *GetChatsRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceGetChatsArgs() *TalkServiceGetChatsArgs {
  return &TalkServiceGetChatsArgs{}
}

var TalkServiceGetChatsArgs_Request_DEFAULT *GetChatsRequest
func (p *TalkServiceGetChatsArgs) GetRequest() *GetChatsRequest {
  if !p.IsSetRequest() {
    return TalkServiceGetChatsArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceGetChatsArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceGetChatsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetChatsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &GetChatsRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceGetChatsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getChats_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetChatsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceGetChatsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetChatsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetChatsResult struct {
  Success *GetChatsResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetChatsResult() *TalkServiceGetChatsResult {
  return &TalkServiceGetChatsResult{}
}

var TalkServiceGetChatsResult_Success_DEFAULT *GetChatsResponse
func (p *TalkServiceGetChatsResult) GetSuccess() *GetChatsResponse {
  if !p.IsSetSuccess() {
    return TalkServiceGetChatsResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetChatsResult_E_DEFAULT *TalkException
func (p *TalkServiceGetChatsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetChatsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetChatsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetChatsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetChatsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetChatsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetChatsResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetChatsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetChatsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getChats_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetChatsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetChatsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetChatsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetChatsResult(%+v)", *p)
}

// Attributes:
//  - IgnoreE2EEStatus
//  - SyncReason
type TalkServiceGetE2EEPublicKeysExArgs struct {
  // unused field # 1
  IgnoreE2EEStatus bool `thrift:"ignoreE2EEStatus,2" db:"ignoreE2EEStatus" json:"ignoreE2EEStatus"`
  SyncReason SyncReason `thrift:"syncReason,3" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetE2EEPublicKeysExArgs() *TalkServiceGetE2EEPublicKeysExArgs {
  return &TalkServiceGetE2EEPublicKeysExArgs{}
}


func (p *TalkServiceGetE2EEPublicKeysExArgs) GetIgnoreE2EEStatus() bool {
  return p.IgnoreE2EEStatus
}

func (p *TalkServiceGetE2EEPublicKeysExArgs) GetSyncReason() SyncReason {
  return p.SyncReason
}
func (p *TalkServiceGetE2EEPublicKeysExArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetE2EEPublicKeysExArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IgnoreE2EEStatus = v
}
  return nil
}

func (p *TalkServiceGetE2EEPublicKeysExArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := SyncReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *TalkServiceGetE2EEPublicKeysExArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getE2EEPublicKeysEx_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetE2EEPublicKeysExArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ignoreE2EEStatus", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ignoreE2EEStatus: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IgnoreE2EEStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ignoreE2EEStatus (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ignoreE2EEStatus: ", p), err) }
  return err
}

func (p *TalkServiceGetE2EEPublicKeysExArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncReason", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:syncReason: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:syncReason: ", p), err) }
  return err
}

func (p *TalkServiceGetE2EEPublicKeysExArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetE2EEPublicKeysExArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetE2EEPublicKeysExResult struct {
  Success []*E2EEPublicKey `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetE2EEPublicKeysExResult() *TalkServiceGetE2EEPublicKeysExResult {
  return &TalkServiceGetE2EEPublicKeysExResult{}
}

var TalkServiceGetE2EEPublicKeysExResult_Success_DEFAULT []*E2EEPublicKey

func (p *TalkServiceGetE2EEPublicKeysExResult) GetSuccess() []*E2EEPublicKey {
  return p.Success
}
var TalkServiceGetE2EEPublicKeysExResult_E_DEFAULT *TalkException
func (p *TalkServiceGetE2EEPublicKeysExResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetE2EEPublicKeysExResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetE2EEPublicKeysExResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetE2EEPublicKeysExResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetE2EEPublicKeysExResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetE2EEPublicKeysExResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*E2EEPublicKey, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem279 := &E2EEPublicKey{}
    if err := _elem279.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem279), err)
    }
    p.Success = append(p.Success, _elem279)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetE2EEPublicKeysExResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetE2EEPublicKeysExResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getE2EEPublicKeysEx_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetE2EEPublicKeysExResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetE2EEPublicKeysExResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetE2EEPublicKeysExResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetE2EEPublicKeysExResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - EncryptedKeyChain
//  - HashKeyChain
type TalkServiceRespondE2EEKeyExchangeArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  EncryptedKeyChain string `thrift:"encryptedKeyChain,2" db:"encryptedKeyChain" json:"encryptedKeyChain"`
  HashKeyChain string `thrift:"hashKeyChain,3" db:"hashKeyChain" json:"hashKeyChain"`
}

func NewTalkServiceRespondE2EEKeyExchangeArgs() *TalkServiceRespondE2EEKeyExchangeArgs {
  return &TalkServiceRespondE2EEKeyExchangeArgs{}
}


func (p *TalkServiceRespondE2EEKeyExchangeArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceRespondE2EEKeyExchangeArgs) GetEncryptedKeyChain() string {
  return p.EncryptedKeyChain
}

func (p *TalkServiceRespondE2EEKeyExchangeArgs) GetHashKeyChain() string {
  return p.HashKeyChain
}
func (p *TalkServiceRespondE2EEKeyExchangeArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRespondE2EEKeyExchangeArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceRespondE2EEKeyExchangeArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.EncryptedKeyChain = v
}
  return nil
}

func (p *TalkServiceRespondE2EEKeyExchangeArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.HashKeyChain = v
}
  return nil
}

func (p *TalkServiceRespondE2EEKeyExchangeArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "respondE2EEKeyExchange_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRespondE2EEKeyExchangeArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceRespondE2EEKeyExchangeArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "encryptedKeyChain", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:encryptedKeyChain: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.EncryptedKeyChain)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.encryptedKeyChain (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:encryptedKeyChain: ", p), err) }
  return err
}

func (p *TalkServiceRespondE2EEKeyExchangeArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hashKeyChain", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hashKeyChain: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.HashKeyChain)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hashKeyChain (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hashKeyChain: ", p), err) }
  return err
}

func (p *TalkServiceRespondE2EEKeyExchangeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRespondE2EEKeyExchangeArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceRespondE2EEKeyExchangeResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRespondE2EEKeyExchangeResult() *TalkServiceRespondE2EEKeyExchangeResult {
  return &TalkServiceRespondE2EEKeyExchangeResult{}
}

var TalkServiceRespondE2EEKeyExchangeResult_E_DEFAULT *TalkException
func (p *TalkServiceRespondE2EEKeyExchangeResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRespondE2EEKeyExchangeResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRespondE2EEKeyExchangeResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRespondE2EEKeyExchangeResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRespondE2EEKeyExchangeResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRespondE2EEKeyExchangeResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "respondE2EEKeyExchange_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRespondE2EEKeyExchangeResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRespondE2EEKeyExchangeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRespondE2EEKeyExchangeResult(%+v)", *p)
}

// Attributes:
//  - KeyVersion
//  - ChatMid
type TalkServiceGetLastE2EEGroupSharedKeyArgs struct {
  // unused field # 1
  KeyVersion int32 `thrift:"keyVersion,2" db:"keyVersion" json:"keyVersion"`
  ChatMid string `thrift:"chatMid,3" db:"chatMid" json:"chatMid"`
}

func NewTalkServiceGetLastE2EEGroupSharedKeyArgs() *TalkServiceGetLastE2EEGroupSharedKeyArgs {
  return &TalkServiceGetLastE2EEGroupSharedKeyArgs{}
}


func (p *TalkServiceGetLastE2EEGroupSharedKeyArgs) GetKeyVersion() int32 {
  return p.KeyVersion
}

func (p *TalkServiceGetLastE2EEGroupSharedKeyArgs) GetChatMid() string {
  return p.ChatMid
}
func (p *TalkServiceGetLastE2EEGroupSharedKeyArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetLastE2EEGroupSharedKeyArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.KeyVersion = v
}
  return nil
}

func (p *TalkServiceGetLastE2EEGroupSharedKeyArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *TalkServiceGetLastE2EEGroupSharedKeyArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getLastE2EEGroupSharedKey_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetLastE2EEGroupSharedKeyArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keyVersion", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:keyVersion: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.KeyVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keyVersion (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:keyVersion: ", p), err) }
  return err
}

func (p *TalkServiceGetLastE2EEGroupSharedKeyArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:chatMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:chatMid: ", p), err) }
  return err
}

func (p *TalkServiceGetLastE2EEGroupSharedKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetLastE2EEGroupSharedKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetLastE2EEGroupSharedKeyResult struct {
  Success *E2EEGroupSharedKey `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetLastE2EEGroupSharedKeyResult() *TalkServiceGetLastE2EEGroupSharedKeyResult {
  return &TalkServiceGetLastE2EEGroupSharedKeyResult{}
}

var TalkServiceGetLastE2EEGroupSharedKeyResult_Success_DEFAULT *E2EEGroupSharedKey
func (p *TalkServiceGetLastE2EEGroupSharedKeyResult) GetSuccess() *E2EEGroupSharedKey {
  if !p.IsSetSuccess() {
    return TalkServiceGetLastE2EEGroupSharedKeyResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetLastE2EEGroupSharedKeyResult_E_DEFAULT *TalkException
func (p *TalkServiceGetLastE2EEGroupSharedKeyResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetLastE2EEGroupSharedKeyResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetLastE2EEGroupSharedKeyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetLastE2EEGroupSharedKeyResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetLastE2EEGroupSharedKeyResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetLastE2EEGroupSharedKeyResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &E2EEGroupSharedKey{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetLastE2EEGroupSharedKeyResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetLastE2EEGroupSharedKeyResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getLastE2EEGroupSharedKey_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetLastE2EEGroupSharedKeyResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetLastE2EEGroupSharedKeyResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetLastE2EEGroupSharedKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetLastE2EEGroupSharedKeyResult(%+v)", *p)
}

// Attributes:
//  - Verifier
//  - PinCode
type TalkServiceVerifyQrcodeArgs struct {
  // unused field # 1
  Verifier string `thrift:"verifier,2" db:"verifier" json:"verifier"`
  PinCode string `thrift:"pinCode,3" db:"pinCode" json:"pinCode"`
}

func NewTalkServiceVerifyQrcodeArgs() *TalkServiceVerifyQrcodeArgs {
  return &TalkServiceVerifyQrcodeArgs{}
}


func (p *TalkServiceVerifyQrcodeArgs) GetVerifier() string {
  return p.Verifier
}

func (p *TalkServiceVerifyQrcodeArgs) GetPinCode() string {
  return p.PinCode
}
func (p *TalkServiceVerifyQrcodeArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceVerifyQrcodeArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Verifier = v
}
  return nil
}

func (p *TalkServiceVerifyQrcodeArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PinCode = v
}
  return nil
}

func (p *TalkServiceVerifyQrcodeArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "verifyQrcode_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceVerifyQrcodeArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "verifier", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:verifier: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Verifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.verifier (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:verifier: ", p), err) }
  return err
}

func (p *TalkServiceVerifyQrcodeArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pinCode", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pinCode: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PinCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pinCode (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pinCode: ", p), err) }
  return err
}

func (p *TalkServiceVerifyQrcodeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceVerifyQrcodeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceVerifyQrcodeResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceVerifyQrcodeResult() *TalkServiceVerifyQrcodeResult {
  return &TalkServiceVerifyQrcodeResult{}
}

var TalkServiceVerifyQrcodeResult_Success_DEFAULT string
func (p *TalkServiceVerifyQrcodeResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return TalkServiceVerifyQrcodeResult_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceVerifyQrcodeResult_E_DEFAULT *TalkException
func (p *TalkServiceVerifyQrcodeResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceVerifyQrcodeResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceVerifyQrcodeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceVerifyQrcodeResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceVerifyQrcodeResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceVerifyQrcodeResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceVerifyQrcodeResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceVerifyQrcodeResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "verifyQrcode_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceVerifyQrcodeResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceVerifyQrcodeResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceVerifyQrcodeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceVerifyQrcodeResult(%+v)", *p)
}

// Attributes:
//  - Revision
//  - RegionOfUsim
//  - RegionOfTelephone
//  - RegionOfLocale
//  - Carrier
//  - SyncReason
type TalkServiceGetConfigurationsArgs struct {
  // unused field # 1
  Revision int64 `thrift:"revision,2" db:"revision" json:"revision"`
  RegionOfUsim string `thrift:"regionOfUsim,3" db:"regionOfUsim" json:"regionOfUsim"`
  RegionOfTelephone string `thrift:"regionOfTelephone,4" db:"regionOfTelephone" json:"regionOfTelephone"`
  RegionOfLocale string `thrift:"regionOfLocale,5" db:"regionOfLocale" json:"regionOfLocale"`
  Carrier string `thrift:"carrier,6" db:"carrier" json:"carrier"`
  SyncReason SyncReason `thrift:"syncReason,7" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetConfigurationsArgs() *TalkServiceGetConfigurationsArgs {
  return &TalkServiceGetConfigurationsArgs{}
}


func (p *TalkServiceGetConfigurationsArgs) GetRevision() int64 {
  return p.Revision
}

func (p *TalkServiceGetConfigurationsArgs) GetRegionOfUsim() string {
  return p.RegionOfUsim
}

func (p *TalkServiceGetConfigurationsArgs) GetRegionOfTelephone() string {
  return p.RegionOfTelephone
}

func (p *TalkServiceGetConfigurationsArgs) GetRegionOfLocale() string {
  return p.RegionOfLocale
}

func (p *TalkServiceGetConfigurationsArgs) GetCarrier() string {
  return p.Carrier
}

func (p *TalkServiceGetConfigurationsArgs) GetSyncReason() SyncReason {
  return p.SyncReason
}
func (p *TalkServiceGetConfigurationsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetConfigurationsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Revision = v
}
  return nil
}

func (p *TalkServiceGetConfigurationsArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RegionOfUsim = v
}
  return nil
}

func (p *TalkServiceGetConfigurationsArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.RegionOfTelephone = v
}
  return nil
}

func (p *TalkServiceGetConfigurationsArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.RegionOfLocale = v
}
  return nil
}

func (p *TalkServiceGetConfigurationsArgs)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Carrier = v
}
  return nil
}

func (p *TalkServiceGetConfigurationsArgs)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := SyncReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *TalkServiceGetConfigurationsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getConfigurations_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetConfigurationsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "revision", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:revision: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Revision)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.revision (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:revision: ", p), err) }
  return err
}

func (p *TalkServiceGetConfigurationsArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "regionOfUsim", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:regionOfUsim: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RegionOfUsim)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.regionOfUsim (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:regionOfUsim: ", p), err) }
  return err
}

func (p *TalkServiceGetConfigurationsArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "regionOfTelephone", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:regionOfTelephone: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RegionOfTelephone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.regionOfTelephone (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:regionOfTelephone: ", p), err) }
  return err
}

func (p *TalkServiceGetConfigurationsArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "regionOfLocale", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:regionOfLocale: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RegionOfLocale)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.regionOfLocale (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:regionOfLocale: ", p), err) }
  return err
}

func (p *TalkServiceGetConfigurationsArgs) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:carrier: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Carrier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.carrier (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:carrier: ", p), err) }
  return err
}

func (p *TalkServiceGetConfigurationsArgs) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncReason", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:syncReason: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:syncReason: ", p), err) }
  return err
}

func (p *TalkServiceGetConfigurationsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetConfigurationsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetConfigurationsResult struct {
  Success *Configurations `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetConfigurationsResult() *TalkServiceGetConfigurationsResult {
  return &TalkServiceGetConfigurationsResult{}
}

var TalkServiceGetConfigurationsResult_Success_DEFAULT *Configurations
func (p *TalkServiceGetConfigurationsResult) GetSuccess() *Configurations {
  if !p.IsSetSuccess() {
    return TalkServiceGetConfigurationsResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetConfigurationsResult_E_DEFAULT *TalkException
func (p *TalkServiceGetConfigurationsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetConfigurationsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetConfigurationsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetConfigurationsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetConfigurationsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetConfigurationsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Configurations{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetConfigurationsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetConfigurationsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getConfigurations_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetConfigurationsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetConfigurationsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetConfigurationsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetConfigurationsResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceReissueChatTicketArgs struct {
  Request *ReissueChatTicketRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceReissueChatTicketArgs() *TalkServiceReissueChatTicketArgs {
  return &TalkServiceReissueChatTicketArgs{}
}

var TalkServiceReissueChatTicketArgs_Request_DEFAULT *ReissueChatTicketRequest
func (p *TalkServiceReissueChatTicketArgs) GetRequest() *ReissueChatTicketRequest {
  if !p.IsSetRequest() {
    return TalkServiceReissueChatTicketArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceReissueChatTicketArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceReissueChatTicketArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceReissueChatTicketArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &ReissueChatTicketRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceReissueChatTicketArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "reissueChatTicket_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceReissueChatTicketArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceReissueChatTicketArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceReissueChatTicketArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceReissueChatTicketResult struct {
  Success *ReissueChatTicketResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceReissueChatTicketResult() *TalkServiceReissueChatTicketResult {
  return &TalkServiceReissueChatTicketResult{}
}

var TalkServiceReissueChatTicketResult_Success_DEFAULT *ReissueChatTicketResponse
func (p *TalkServiceReissueChatTicketResult) GetSuccess() *ReissueChatTicketResponse {
  if !p.IsSetSuccess() {
    return TalkServiceReissueChatTicketResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceReissueChatTicketResult_E_DEFAULT *TalkException
func (p *TalkServiceReissueChatTicketResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceReissueChatTicketResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceReissueChatTicketResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceReissueChatTicketResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceReissueChatTicketResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceReissueChatTicketResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ReissueChatTicketResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceReissueChatTicketResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceReissueChatTicketResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "reissueChatTicket_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceReissueChatTicketResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceReissueChatTicketResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceReissueChatTicketResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceReissueChatTicketResult(%+v)", *p)
}

type TalkServiceNoopArgs struct {
}

func NewTalkServiceNoopArgs() *TalkServiceNoopArgs {
  return &TalkServiceNoopArgs{}
}

func (p *TalkServiceNoopArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceNoopArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "noop_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceNoopArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceNoopArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceNoopResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceNoopResult() *TalkServiceNoopResult {
  return &TalkServiceNoopResult{}
}

var TalkServiceNoopResult_E_DEFAULT *TalkException
func (p *TalkServiceNoopResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceNoopResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceNoopResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceNoopResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceNoopResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceNoopResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "noop_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceNoopResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceNoopResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceNoopResult(%+v)", *p)
}

type TalkServiceGetServerTimeArgs struct {
}

func NewTalkServiceGetServerTimeArgs() *TalkServiceGetServerTimeArgs {
  return &TalkServiceGetServerTimeArgs{}
}

func (p *TalkServiceGetServerTimeArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetServerTimeArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getServerTime_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetServerTimeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetServerTimeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetServerTimeResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetServerTimeResult() *TalkServiceGetServerTimeResult {
  return &TalkServiceGetServerTimeResult{}
}

var TalkServiceGetServerTimeResult_Success_DEFAULT int64
func (p *TalkServiceGetServerTimeResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return TalkServiceGetServerTimeResult_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceGetServerTimeResult_E_DEFAULT *TalkException
func (p *TalkServiceGetServerTimeResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetServerTimeResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetServerTimeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetServerTimeResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetServerTimeResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetServerTimeResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceGetServerTimeResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetServerTimeResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getServerTime_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetServerTimeResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetServerTimeResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetServerTimeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetServerTimeResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Type
//  - Target
//  - Enablement
type TalkServiceSetNotificationsEnabledArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  Type MIDType `thrift:"type,2" db:"type" json:"type"`
  Target string `thrift:"target,3" db:"target" json:"target"`
  Enablement bool `thrift:"enablement,4" db:"enablement" json:"enablement"`
}

func NewTalkServiceSetNotificationsEnabledArgs() *TalkServiceSetNotificationsEnabledArgs {
  return &TalkServiceSetNotificationsEnabledArgs{}
}


func (p *TalkServiceSetNotificationsEnabledArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceSetNotificationsEnabledArgs) GetType() MIDType {
  return p.Type
}

func (p *TalkServiceSetNotificationsEnabledArgs) GetTarget() string {
  return p.Target
}

func (p *TalkServiceSetNotificationsEnabledArgs) GetEnablement() bool {
  return p.Enablement
}
func (p *TalkServiceSetNotificationsEnabledArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSetNotificationsEnabledArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceSetNotificationsEnabledArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := MIDType(v)
  p.Type = temp
}
  return nil
}

func (p *TalkServiceSetNotificationsEnabledArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Target = v
}
  return nil
}

func (p *TalkServiceSetNotificationsEnabledArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Enablement = v
}
  return nil
}

func (p *TalkServiceSetNotificationsEnabledArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "setNotificationsEnabled_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSetNotificationsEnabledArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceSetNotificationsEnabledArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *TalkServiceSetNotificationsEnabledArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "target", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:target: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Target)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.target (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:target: ", p), err) }
  return err
}

func (p *TalkServiceSetNotificationsEnabledArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "enablement", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:enablement: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Enablement)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.enablement (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:enablement: ", p), err) }
  return err
}

func (p *TalkServiceSetNotificationsEnabledArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSetNotificationsEnabledArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceSetNotificationsEnabledResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceSetNotificationsEnabledResult() *TalkServiceSetNotificationsEnabledResult {
  return &TalkServiceSetNotificationsEnabledResult{}
}

var TalkServiceSetNotificationsEnabledResult_E_DEFAULT *TalkException
func (p *TalkServiceSetNotificationsEnabledResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceSetNotificationsEnabledResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceSetNotificationsEnabledResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceSetNotificationsEnabledResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSetNotificationsEnabledResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceSetNotificationsEnabledResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "setNotificationsEnabled_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSetNotificationsEnabledResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceSetNotificationsEnabledResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSetNotificationsEnabledResult(%+v)", *p)
}

// Attributes:
//  - Provider
//  - Identifier
//  - Locale
type TalkServiceRequestAccountPasswordResetArgs struct {
  // unused field # 1
  Identifier string `thrift:"identifier,2" db:"identifier" json:"identifier"`
  // unused field # 3
  Provider IdentityProvider `thrift:"provider,4" db:"provider" json:"provider"`
  Locale string `thrift:"locale,5" db:"locale" json:"locale"`
}

func NewTalkServiceRequestAccountPasswordResetArgs() *TalkServiceRequestAccountPasswordResetArgs {
  return &TalkServiceRequestAccountPasswordResetArgs{}
}


func (p *TalkServiceRequestAccountPasswordResetArgs) GetProvider() IdentityProvider {
  return p.Provider
}

func (p *TalkServiceRequestAccountPasswordResetArgs) GetIdentifier() string {
  return p.Identifier
}

func (p *TalkServiceRequestAccountPasswordResetArgs) GetLocale() string {
  return p.Locale
}
func (p *TalkServiceRequestAccountPasswordResetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRequestAccountPasswordResetArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := IdentityProvider(v)
  p.Provider = temp
}
  return nil
}

func (p *TalkServiceRequestAccountPasswordResetArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Identifier = v
}
  return nil
}

func (p *TalkServiceRequestAccountPasswordResetArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Locale = v
}
  return nil
}

func (p *TalkServiceRequestAccountPasswordResetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "requestAccountPasswordReset_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRequestAccountPasswordResetArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "identifier", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:identifier: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Identifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.identifier (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:identifier: ", p), err) }
  return err
}

func (p *TalkServiceRequestAccountPasswordResetArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "provider", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:provider: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Provider)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.provider (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:provider: ", p), err) }
  return err
}

func (p *TalkServiceRequestAccountPasswordResetArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "locale", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:locale: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Locale)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.locale (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:locale: ", p), err) }
  return err
}

func (p *TalkServiceRequestAccountPasswordResetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRequestAccountPasswordResetArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceRequestAccountPasswordResetResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRequestAccountPasswordResetResult() *TalkServiceRequestAccountPasswordResetResult {
  return &TalkServiceRequestAccountPasswordResetResult{}
}

var TalkServiceRequestAccountPasswordResetResult_E_DEFAULT *TalkException
func (p *TalkServiceRequestAccountPasswordResetResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRequestAccountPasswordResetResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRequestAccountPasswordResetResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRequestAccountPasswordResetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRequestAccountPasswordResetResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRequestAccountPasswordResetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "requestAccountPasswordReset_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRequestAccountPasswordResetResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRequestAccountPasswordResetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRequestAccountPasswordResetResult(%+v)", *p)
}

// Attributes:
//  - CountryGroup
type TalkServiceGetCountriesArgs struct {
  // unused field # 1
  CountryGroup CountryGroup `thrift:"countryGroup,2" db:"countryGroup" json:"countryGroup"`
}

func NewTalkServiceGetCountriesArgs() *TalkServiceGetCountriesArgs {
  return &TalkServiceGetCountriesArgs{}
}


func (p *TalkServiceGetCountriesArgs) GetCountryGroup() CountryGroup {
  return p.CountryGroup
}
func (p *TalkServiceGetCountriesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetCountriesArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := CountryGroup(v)
  p.CountryGroup = temp
}
  return nil
}

func (p *TalkServiceGetCountriesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getCountries_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetCountriesArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "countryGroup", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:countryGroup: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.CountryGroup)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.countryGroup (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:countryGroup: ", p), err) }
  return err
}

func (p *TalkServiceGetCountriesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetCountriesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetCountriesResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetCountriesResult() *TalkServiceGetCountriesResult {
  return &TalkServiceGetCountriesResult{}
}

var TalkServiceGetCountriesResult_Success_DEFAULT []string

func (p *TalkServiceGetCountriesResult) GetSuccess() []string {
  return p.Success
}
var TalkServiceGetCountriesResult_E_DEFAULT *TalkException
func (p *TalkServiceGetCountriesResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetCountriesResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetCountriesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetCountriesResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetCountriesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetCountriesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Success =  tSet
  for i := 0; i < size; i ++ {
var _elem280 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem280 = v
}
    p.Success = append(p.Success, _elem280)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TalkServiceGetCountriesResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetCountriesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getCountries_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetCountriesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.SET, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteSetBegin(ctx, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing set begin: ", err)
    }
    for i := 0; i<len(p.Success); i++ {
      for j := i+1; j<len(p.Success); j++ {
        if func(tgt, src string) bool {
          if tgt != src { return false }
          return true
        }(p.Success[i], p.Success[j]) {
          return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Success))
        }
      }
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteSetEnd(ctx); err != nil {
      return thrift.PrependError("error writing set end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetCountriesResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetCountriesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetCountriesResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - SearchId
type TalkServiceRegisterUseridArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  SearchId string `thrift:"searchId,2" db:"searchId" json:"searchId"`
}

func NewTalkServiceRegisterUseridArgs() *TalkServiceRegisterUseridArgs {
  return &TalkServiceRegisterUseridArgs{}
}


func (p *TalkServiceRegisterUseridArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceRegisterUseridArgs) GetSearchId() string {
  return p.SearchId
}
func (p *TalkServiceRegisterUseridArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRegisterUseridArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceRegisterUseridArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SearchId = v
}
  return nil
}

func (p *TalkServiceRegisterUseridArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "registerUserid_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRegisterUseridArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceRegisterUseridArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "searchId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:searchId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SearchId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.searchId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:searchId: ", p), err) }
  return err
}

func (p *TalkServiceRegisterUseridArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRegisterUseridArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceRegisterUseridResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRegisterUseridResult() *TalkServiceRegisterUseridResult {
  return &TalkServiceRegisterUseridResult{}
}

var TalkServiceRegisterUseridResult_Success_DEFAULT bool
func (p *TalkServiceRegisterUseridResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TalkServiceRegisterUseridResult_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceRegisterUseridResult_E_DEFAULT *TalkException
func (p *TalkServiceRegisterUseridResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRegisterUseridResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRegisterUseridResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceRegisterUseridResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRegisterUseridResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRegisterUseridResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceRegisterUseridResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRegisterUseridResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "registerUserid_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRegisterUseridResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceRegisterUseridResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRegisterUseridResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRegisterUseridResult(%+v)", *p)
}

// Attributes:
//  - SearchId
type TalkServiceIsUseridAvailableArgs struct {
  // unused field # 1
  SearchId string `thrift:"searchId,2" db:"searchId" json:"searchId"`
}

func NewTalkServiceIsUseridAvailableArgs() *TalkServiceIsUseridAvailableArgs {
  return &TalkServiceIsUseridAvailableArgs{}
}


func (p *TalkServiceIsUseridAvailableArgs) GetSearchId() string {
  return p.SearchId
}
func (p *TalkServiceIsUseridAvailableArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceIsUseridAvailableArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SearchId = v
}
  return nil
}

func (p *TalkServiceIsUseridAvailableArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "isUseridAvailable_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceIsUseridAvailableArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "searchId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:searchId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SearchId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.searchId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:searchId: ", p), err) }
  return err
}

func (p *TalkServiceIsUseridAvailableArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceIsUseridAvailableArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceIsUseridAvailableResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceIsUseridAvailableResult() *TalkServiceIsUseridAvailableResult {
  return &TalkServiceIsUseridAvailableResult{}
}

var TalkServiceIsUseridAvailableResult_Success_DEFAULT bool
func (p *TalkServiceIsUseridAvailableResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TalkServiceIsUseridAvailableResult_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceIsUseridAvailableResult_E_DEFAULT *TalkException
func (p *TalkServiceIsUseridAvailableResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceIsUseridAvailableResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceIsUseridAvailableResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceIsUseridAvailableResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceIsUseridAvailableResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceIsUseridAvailableResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceIsUseridAvailableResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceIsUseridAvailableResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "isUseridAvailable_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceIsUseridAvailableResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceIsUseridAvailableResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceIsUseridAvailableResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceIsUseridAvailableResult(%+v)", *p)
}

// Attributes:
//  - SyncReason
type TalkServiceGetProfileArgs struct {
  SyncReason SyncReason `thrift:"syncReason,1" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetProfileArgs() *TalkServiceGetProfileArgs {
  return &TalkServiceGetProfileArgs{}
}


func (p *TalkServiceGetProfileArgs) GetSyncReason() SyncReason {
  return p.SyncReason
}
func (p *TalkServiceGetProfileArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetProfileArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SyncReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *TalkServiceGetProfileArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getProfile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetProfileArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncReason", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncReason: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncReason: ", p), err) }
  return err
}

func (p *TalkServiceGetProfileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetProfileArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetProfileResult struct {
  Success *Profile `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetProfileResult() *TalkServiceGetProfileResult {
  return &TalkServiceGetProfileResult{}
}

var TalkServiceGetProfileResult_Success_DEFAULT *Profile
func (p *TalkServiceGetProfileResult) GetSuccess() *Profile {
  if !p.IsSetSuccess() {
    return TalkServiceGetProfileResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetProfileResult_E_DEFAULT *TalkException
func (p *TalkServiceGetProfileResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetProfileResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetProfileResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetProfileResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetProfileResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetProfileResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Profile{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetProfileResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetProfileResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getProfile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetProfileResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetProfileResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetProfileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetProfileResult(%+v)", *p)
}

// Attributes:
//  - Region
//  - Carrier
//  - Phone
//  - UdidHash
//  - DeviceInfo
//  - NetworkCode
//  - Locale
//  - SimInfo
type TalkServiceStartUpdateVerificationArgs struct {
  // unused field # 1
  Region string `thrift:"region,2" db:"region" json:"region"`
  Carrier CarrierCode `thrift:"carrier,3" db:"carrier" json:"carrier"`
  Phone string `thrift:"phone,4" db:"phone" json:"phone"`
  UdidHash string `thrift:"udidHash,5" db:"udidHash" json:"udidHash"`
  DeviceInfo *DeviceInfo `thrift:"deviceInfo,6" db:"deviceInfo" json:"deviceInfo"`
  NetworkCode string `thrift:"networkCode,7" db:"networkCode" json:"networkCode"`
  Locale string `thrift:"locale,8" db:"locale" json:"locale"`
  SimInfo *SIMInfo `thrift:"simInfo,9" db:"simInfo" json:"simInfo"`
}

func NewTalkServiceStartUpdateVerificationArgs() *TalkServiceStartUpdateVerificationArgs {
  return &TalkServiceStartUpdateVerificationArgs{}
}


func (p *TalkServiceStartUpdateVerificationArgs) GetRegion() string {
  return p.Region
}

func (p *TalkServiceStartUpdateVerificationArgs) GetCarrier() CarrierCode {
  return p.Carrier
}

func (p *TalkServiceStartUpdateVerificationArgs) GetPhone() string {
  return p.Phone
}

func (p *TalkServiceStartUpdateVerificationArgs) GetUdidHash() string {
  return p.UdidHash
}
var TalkServiceStartUpdateVerificationArgs_DeviceInfo_DEFAULT *DeviceInfo
func (p *TalkServiceStartUpdateVerificationArgs) GetDeviceInfo() *DeviceInfo {
  if !p.IsSetDeviceInfo() {
    return TalkServiceStartUpdateVerificationArgs_DeviceInfo_DEFAULT
  }
return p.DeviceInfo
}

func (p *TalkServiceStartUpdateVerificationArgs) GetNetworkCode() string {
  return p.NetworkCode
}

func (p *TalkServiceStartUpdateVerificationArgs) GetLocale() string {
  return p.Locale
}
var TalkServiceStartUpdateVerificationArgs_SimInfo_DEFAULT *SIMInfo
func (p *TalkServiceStartUpdateVerificationArgs) GetSimInfo() *SIMInfo {
  if !p.IsSetSimInfo() {
    return TalkServiceStartUpdateVerificationArgs_SimInfo_DEFAULT
  }
return p.SimInfo
}
func (p *TalkServiceStartUpdateVerificationArgs) IsSetDeviceInfo() bool {
  return p.DeviceInfo != nil
}

func (p *TalkServiceStartUpdateVerificationArgs) IsSetSimInfo() bool {
  return p.SimInfo != nil
}

func (p *TalkServiceStartUpdateVerificationArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceStartUpdateVerificationArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Region = v
}
  return nil
}

func (p *TalkServiceStartUpdateVerificationArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := CarrierCode(v)
  p.Carrier = temp
}
  return nil
}

func (p *TalkServiceStartUpdateVerificationArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Phone = v
}
  return nil
}

func (p *TalkServiceStartUpdateVerificationArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.UdidHash = v
}
  return nil
}

func (p *TalkServiceStartUpdateVerificationArgs)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  p.DeviceInfo = &DeviceInfo{}
  if err := p.DeviceInfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DeviceInfo), err)
  }
  return nil
}

func (p *TalkServiceStartUpdateVerificationArgs)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.NetworkCode = v
}
  return nil
}

func (p *TalkServiceStartUpdateVerificationArgs)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Locale = v
}
  return nil
}

func (p *TalkServiceStartUpdateVerificationArgs)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  p.SimInfo = &SIMInfo{}
  if err := p.SimInfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SimInfo), err)
  }
  return nil
}

func (p *TalkServiceStartUpdateVerificationArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "startUpdateVerification_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceStartUpdateVerificationArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "region", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:region: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Region)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.region (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:region: ", p), err) }
  return err
}

func (p *TalkServiceStartUpdateVerificationArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "carrier", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:carrier: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Carrier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.carrier (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:carrier: ", p), err) }
  return err
}

func (p *TalkServiceStartUpdateVerificationArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "phone", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:phone: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Phone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phone (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:phone: ", p), err) }
  return err
}

func (p *TalkServiceStartUpdateVerificationArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "udidHash", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:udidHash: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.UdidHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.udidHash (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:udidHash: ", p), err) }
  return err
}

func (p *TalkServiceStartUpdateVerificationArgs) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "deviceInfo", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:deviceInfo: ", p), err) }
  if err := p.DeviceInfo.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DeviceInfo), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:deviceInfo: ", p), err) }
  return err
}

func (p *TalkServiceStartUpdateVerificationArgs) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "networkCode", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:networkCode: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.NetworkCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.networkCode (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:networkCode: ", p), err) }
  return err
}

func (p *TalkServiceStartUpdateVerificationArgs) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "locale", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:locale: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Locale)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.locale (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:locale: ", p), err) }
  return err
}

func (p *TalkServiceStartUpdateVerificationArgs) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "simInfo", thrift.STRUCT, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:simInfo: ", p), err) }
  if err := p.SimInfo.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SimInfo), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:simInfo: ", p), err) }
  return err
}

func (p *TalkServiceStartUpdateVerificationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceStartUpdateVerificationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceStartUpdateVerificationResult struct {
  Success *VerificationSessionData `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceStartUpdateVerificationResult() *TalkServiceStartUpdateVerificationResult {
  return &TalkServiceStartUpdateVerificationResult{}
}

var TalkServiceStartUpdateVerificationResult_Success_DEFAULT *VerificationSessionData
func (p *TalkServiceStartUpdateVerificationResult) GetSuccess() *VerificationSessionData {
  if !p.IsSetSuccess() {
    return TalkServiceStartUpdateVerificationResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceStartUpdateVerificationResult_E_DEFAULT *TalkException
func (p *TalkServiceStartUpdateVerificationResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceStartUpdateVerificationResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceStartUpdateVerificationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceStartUpdateVerificationResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceStartUpdateVerificationResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceStartUpdateVerificationResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &VerificationSessionData{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceStartUpdateVerificationResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceStartUpdateVerificationResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "startUpdateVerification_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceStartUpdateVerificationResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceStartUpdateVerificationResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceStartUpdateVerificationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceStartUpdateVerificationResult(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - PinCode
//  - UdidHash
//  - MigrationPincodeSessionId
//  - OldUdidHash
type TalkServiceVerifyPhoneNumberArgs struct {
  // unused field # 1
  SessionId string `thrift:"sessionId,2" db:"sessionId" json:"sessionId"`
  PinCode string `thrift:"pinCode,3" db:"pinCode" json:"pinCode"`
  UdidHash string `thrift:"udidHash,4" db:"udidHash" json:"udidHash"`
  MigrationPincodeSessionId string `thrift:"migrationPincodeSessionId,5" db:"migrationPincodeSessionId" json:"migrationPincodeSessionId"`
  OldUdidHash string `thrift:"oldUdidHash,6" db:"oldUdidHash" json:"oldUdidHash"`
}

func NewTalkServiceVerifyPhoneNumberArgs() *TalkServiceVerifyPhoneNumberArgs {
  return &TalkServiceVerifyPhoneNumberArgs{}
}


func (p *TalkServiceVerifyPhoneNumberArgs) GetSessionId() string {
  return p.SessionId
}

func (p *TalkServiceVerifyPhoneNumberArgs) GetPinCode() string {
  return p.PinCode
}

func (p *TalkServiceVerifyPhoneNumberArgs) GetUdidHash() string {
  return p.UdidHash
}

func (p *TalkServiceVerifyPhoneNumberArgs) GetMigrationPincodeSessionId() string {
  return p.MigrationPincodeSessionId
}

func (p *TalkServiceVerifyPhoneNumberArgs) GetOldUdidHash() string {
  return p.OldUdidHash
}
func (p *TalkServiceVerifyPhoneNumberArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceVerifyPhoneNumberArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *TalkServiceVerifyPhoneNumberArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PinCode = v
}
  return nil
}

func (p *TalkServiceVerifyPhoneNumberArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UdidHash = v
}
  return nil
}

func (p *TalkServiceVerifyPhoneNumberArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.MigrationPincodeSessionId = v
}
  return nil
}

func (p *TalkServiceVerifyPhoneNumberArgs)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.OldUdidHash = v
}
  return nil
}

func (p *TalkServiceVerifyPhoneNumberArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "verifyPhoneNumber_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceVerifyPhoneNumberArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sessionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sessionId: ", p), err) }
  return err
}

func (p *TalkServiceVerifyPhoneNumberArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pinCode", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pinCode: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PinCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pinCode (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pinCode: ", p), err) }
  return err
}

func (p *TalkServiceVerifyPhoneNumberArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "udidHash", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:udidHash: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.UdidHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.udidHash (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:udidHash: ", p), err) }
  return err
}

func (p *TalkServiceVerifyPhoneNumberArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "migrationPincodeSessionId", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:migrationPincodeSessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MigrationPincodeSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.migrationPincodeSessionId (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:migrationPincodeSessionId: ", p), err) }
  return err
}

func (p *TalkServiceVerifyPhoneNumberArgs) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "oldUdidHash", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:oldUdidHash: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.OldUdidHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.oldUdidHash (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:oldUdidHash: ", p), err) }
  return err
}

func (p *TalkServiceVerifyPhoneNumberArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceVerifyPhoneNumberArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceVerifyPhoneNumberResult struct {
  Success *PhoneVerificationResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceVerifyPhoneNumberResult() *TalkServiceVerifyPhoneNumberResult {
  return &TalkServiceVerifyPhoneNumberResult{}
}

var TalkServiceVerifyPhoneNumberResult_Success_DEFAULT *PhoneVerificationResult_
func (p *TalkServiceVerifyPhoneNumberResult) GetSuccess() *PhoneVerificationResult_ {
  if !p.IsSetSuccess() {
    return TalkServiceVerifyPhoneNumberResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceVerifyPhoneNumberResult_E_DEFAULT *TalkException
func (p *TalkServiceVerifyPhoneNumberResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceVerifyPhoneNumberResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceVerifyPhoneNumberResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceVerifyPhoneNumberResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceVerifyPhoneNumberResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceVerifyPhoneNumberResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &PhoneVerificationResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceVerifyPhoneNumberResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceVerifyPhoneNumberResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "verifyPhoneNumber_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceVerifyPhoneNumberResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceVerifyPhoneNumberResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceVerifyPhoneNumberResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceVerifyPhoneNumberResult(%+v)", *p)
}

// Attributes:
//  - AccountMigrationPincode
type TalkServiceUpdateAccountMigrationPincodeArgs struct {
  // unused field # 1
  AccountMigrationPincode string `thrift:"accountMigrationPincode,2" db:"accountMigrationPincode" json:"accountMigrationPincode"`
}

func NewTalkServiceUpdateAccountMigrationPincodeArgs() *TalkServiceUpdateAccountMigrationPincodeArgs {
  return &TalkServiceUpdateAccountMigrationPincodeArgs{}
}


func (p *TalkServiceUpdateAccountMigrationPincodeArgs) GetAccountMigrationPincode() string {
  return p.AccountMigrationPincode
}
func (p *TalkServiceUpdateAccountMigrationPincodeArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateAccountMigrationPincodeArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AccountMigrationPincode = v
}
  return nil
}

func (p *TalkServiceUpdateAccountMigrationPincodeArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateAccountMigrationPincode_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateAccountMigrationPincodeArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "accountMigrationPincode", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:accountMigrationPincode: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AccountMigrationPincode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accountMigrationPincode (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:accountMigrationPincode: ", p), err) }
  return err
}

func (p *TalkServiceUpdateAccountMigrationPincodeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateAccountMigrationPincodeArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUpdateAccountMigrationPincodeResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdateAccountMigrationPincodeResult() *TalkServiceUpdateAccountMigrationPincodeResult {
  return &TalkServiceUpdateAccountMigrationPincodeResult{}
}

var TalkServiceUpdateAccountMigrationPincodeResult_E_DEFAULT *TalkException
func (p *TalkServiceUpdateAccountMigrationPincodeResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUpdateAccountMigrationPincodeResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUpdateAccountMigrationPincodeResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUpdateAccountMigrationPincodeResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateAccountMigrationPincodeResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUpdateAccountMigrationPincodeResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateAccountMigrationPincode_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateAccountMigrationPincodeResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateAccountMigrationPincodeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateAccountMigrationPincodeResult(%+v)", *p)
}

// Attributes:
//  - SessionId
type TalkServiceResendPinCodeArgs struct {
  // unused field # 1
  SessionId string `thrift:"sessionId,2" db:"sessionId" json:"sessionId"`
}

func NewTalkServiceResendPinCodeArgs() *TalkServiceResendPinCodeArgs {
  return &TalkServiceResendPinCodeArgs{}
}


func (p *TalkServiceResendPinCodeArgs) GetSessionId() string {
  return p.SessionId
}
func (p *TalkServiceResendPinCodeArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceResendPinCodeArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *TalkServiceResendPinCodeArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "resendPinCode_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceResendPinCodeArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sessionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sessionId: ", p), err) }
  return err
}

func (p *TalkServiceResendPinCodeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceResendPinCodeArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceResendPinCodeResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceResendPinCodeResult() *TalkServiceResendPinCodeResult {
  return &TalkServiceResendPinCodeResult{}
}

var TalkServiceResendPinCodeResult_E_DEFAULT *TalkException
func (p *TalkServiceResendPinCodeResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceResendPinCodeResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceResendPinCodeResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceResendPinCodeResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceResendPinCodeResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceResendPinCodeResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "resendPinCode_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceResendPinCodeResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceResendPinCodeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceResendPinCodeResult(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - Method
type TalkServiceChangeVerificationMethodArgs struct {
  // unused field # 1
  SessionId string `thrift:"sessionId,2" db:"sessionId" json:"sessionId"`
  Method VerificationMethod `thrift:"method,3" db:"method" json:"method"`
}

func NewTalkServiceChangeVerificationMethodArgs() *TalkServiceChangeVerificationMethodArgs {
  return &TalkServiceChangeVerificationMethodArgs{}
}


func (p *TalkServiceChangeVerificationMethodArgs) GetSessionId() string {
  return p.SessionId
}

func (p *TalkServiceChangeVerificationMethodArgs) GetMethod() VerificationMethod {
  return p.Method
}
func (p *TalkServiceChangeVerificationMethodArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceChangeVerificationMethodArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *TalkServiceChangeVerificationMethodArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := VerificationMethod(v)
  p.Method = temp
}
  return nil
}

func (p *TalkServiceChangeVerificationMethodArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "changeVerificationMethod_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceChangeVerificationMethodArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sessionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sessionId: ", p), err) }
  return err
}

func (p *TalkServiceChangeVerificationMethodArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "method", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:method: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Method)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.method (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:method: ", p), err) }
  return err
}

func (p *TalkServiceChangeVerificationMethodArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceChangeVerificationMethodArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceChangeVerificationMethodResult struct {
  Success *VerificationSessionData `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceChangeVerificationMethodResult() *TalkServiceChangeVerificationMethodResult {
  return &TalkServiceChangeVerificationMethodResult{}
}

var TalkServiceChangeVerificationMethodResult_Success_DEFAULT *VerificationSessionData
func (p *TalkServiceChangeVerificationMethodResult) GetSuccess() *VerificationSessionData {
  if !p.IsSetSuccess() {
    return TalkServiceChangeVerificationMethodResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceChangeVerificationMethodResult_E_DEFAULT *TalkException
func (p *TalkServiceChangeVerificationMethodResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceChangeVerificationMethodResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceChangeVerificationMethodResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceChangeVerificationMethodResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceChangeVerificationMethodResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceChangeVerificationMethodResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &VerificationSessionData{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceChangeVerificationMethodResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceChangeVerificationMethodResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "changeVerificationMethod_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceChangeVerificationMethodResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceChangeVerificationMethodResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceChangeVerificationMethodResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceChangeVerificationMethodResult(%+v)", *p)
}

// Attributes:
//  - SessionId
type TalkServiceFinishUpdateVerificationArgs struct {
  // unused field # 1
  SessionId string `thrift:"sessionId,2" db:"sessionId" json:"sessionId"`
}

func NewTalkServiceFinishUpdateVerificationArgs() *TalkServiceFinishUpdateVerificationArgs {
  return &TalkServiceFinishUpdateVerificationArgs{}
}


func (p *TalkServiceFinishUpdateVerificationArgs) GetSessionId() string {
  return p.SessionId
}
func (p *TalkServiceFinishUpdateVerificationArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFinishUpdateVerificationArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *TalkServiceFinishUpdateVerificationArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "finishUpdateVerification_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFinishUpdateVerificationArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sessionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sessionId: ", p), err) }
  return err
}

func (p *TalkServiceFinishUpdateVerificationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFinishUpdateVerificationArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceFinishUpdateVerificationResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFinishUpdateVerificationResult() *TalkServiceFinishUpdateVerificationResult {
  return &TalkServiceFinishUpdateVerificationResult{}
}

var TalkServiceFinishUpdateVerificationResult_E_DEFAULT *TalkException
func (p *TalkServiceFinishUpdateVerificationResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceFinishUpdateVerificationResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceFinishUpdateVerificationResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceFinishUpdateVerificationResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFinishUpdateVerificationResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceFinishUpdateVerificationResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "finishUpdateVerification_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFinishUpdateVerificationResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceFinishUpdateVerificationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFinishUpdateVerificationResult(%+v)", *p)
}

// Attributes:
//  - SyncReason
type TalkServiceGetSettingsArgs struct {
  SyncReason SyncReason `thrift:"syncReason,1" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetSettingsArgs() *TalkServiceGetSettingsArgs {
  return &TalkServiceGetSettingsArgs{}
}


func (p *TalkServiceGetSettingsArgs) GetSyncReason() SyncReason {
  return p.SyncReason
}
func (p *TalkServiceGetSettingsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetSettingsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SyncReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *TalkServiceGetSettingsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getSettings_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetSettingsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncReason", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncReason: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncReason: ", p), err) }
  return err
}

func (p *TalkServiceGetSettingsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetSettingsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetSettingsResult struct {
  Success *Settings `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetSettingsResult() *TalkServiceGetSettingsResult {
  return &TalkServiceGetSettingsResult{}
}

var TalkServiceGetSettingsResult_Success_DEFAULT *Settings
func (p *TalkServiceGetSettingsResult) GetSuccess() *Settings {
  if !p.IsSetSuccess() {
    return TalkServiceGetSettingsResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetSettingsResult_E_DEFAULT *TalkException
func (p *TalkServiceGetSettingsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetSettingsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetSettingsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetSettingsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetSettingsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetSettingsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Settings{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetSettingsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetSettingsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getSettings_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetSettingsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetSettingsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetSettingsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetSettingsResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ID
type TalkServiceBlockRecommendationArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ID string `thrift:"id,2" db:"id" json:"id"`
}

func NewTalkServiceBlockRecommendationArgs() *TalkServiceBlockRecommendationArgs {
  return &TalkServiceBlockRecommendationArgs{}
}


func (p *TalkServiceBlockRecommendationArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceBlockRecommendationArgs) GetID() string {
  return p.ID
}
func (p *TalkServiceBlockRecommendationArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceBlockRecommendationArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceBlockRecommendationArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TalkServiceBlockRecommendationArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "blockRecommendation_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceBlockRecommendationArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceBlockRecommendationArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *TalkServiceBlockRecommendationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceBlockRecommendationArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceBlockRecommendationResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceBlockRecommendationResult() *TalkServiceBlockRecommendationResult {
  return &TalkServiceBlockRecommendationResult{}
}

var TalkServiceBlockRecommendationResult_E_DEFAULT *TalkException
func (p *TalkServiceBlockRecommendationResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceBlockRecommendationResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceBlockRecommendationResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceBlockRecommendationResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceBlockRecommendationResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceBlockRecommendationResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "blockRecommendation_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceBlockRecommendationResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceBlockRecommendationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceBlockRecommendationResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ID
type TalkServiceBlockContactArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ID string `thrift:"id,2" db:"id" json:"id"`
}

func NewTalkServiceBlockContactArgs() *TalkServiceBlockContactArgs {
  return &TalkServiceBlockContactArgs{}
}


func (p *TalkServiceBlockContactArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceBlockContactArgs) GetID() string {
  return p.ID
}
func (p *TalkServiceBlockContactArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceBlockContactArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceBlockContactArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TalkServiceBlockContactArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "blockContact_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceBlockContactArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceBlockContactArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *TalkServiceBlockContactArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceBlockContactArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceBlockContactResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceBlockContactResult() *TalkServiceBlockContactResult {
  return &TalkServiceBlockContactResult{}
}

var TalkServiceBlockContactResult_E_DEFAULT *TalkException
func (p *TalkServiceBlockContactResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceBlockContactResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceBlockContactResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceBlockContactResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceBlockContactResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceBlockContactResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "blockContact_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceBlockContactResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceBlockContactResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceBlockContactResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ID
type TalkServiceUnblockRecommendationArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ID string `thrift:"id,2" db:"id" json:"id"`
}

func NewTalkServiceUnblockRecommendationArgs() *TalkServiceUnblockRecommendationArgs {
  return &TalkServiceUnblockRecommendationArgs{}
}


func (p *TalkServiceUnblockRecommendationArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceUnblockRecommendationArgs) GetID() string {
  return p.ID
}
func (p *TalkServiceUnblockRecommendationArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUnblockRecommendationArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceUnblockRecommendationArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TalkServiceUnblockRecommendationArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "unblockRecommendation_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUnblockRecommendationArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceUnblockRecommendationArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *TalkServiceUnblockRecommendationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUnblockRecommendationArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUnblockRecommendationResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUnblockRecommendationResult() *TalkServiceUnblockRecommendationResult {
  return &TalkServiceUnblockRecommendationResult{}
}

var TalkServiceUnblockRecommendationResult_E_DEFAULT *TalkException
func (p *TalkServiceUnblockRecommendationResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUnblockRecommendationResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUnblockRecommendationResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUnblockRecommendationResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUnblockRecommendationResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUnblockRecommendationResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "unblockRecommendation_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUnblockRecommendationResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUnblockRecommendationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUnblockRecommendationResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ID
//  - Reference
type TalkServiceUnblockContactArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ID string `thrift:"id,2" db:"id" json:"id"`
  Reference string `thrift:"reference,3" db:"reference" json:"reference"`
}

func NewTalkServiceUnblockContactArgs() *TalkServiceUnblockContactArgs {
  return &TalkServiceUnblockContactArgs{}
}


func (p *TalkServiceUnblockContactArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceUnblockContactArgs) GetID() string {
  return p.ID
}

func (p *TalkServiceUnblockContactArgs) GetReference() string {
  return p.Reference
}
func (p *TalkServiceUnblockContactArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUnblockContactArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceUnblockContactArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TalkServiceUnblockContactArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Reference = v
}
  return nil
}

func (p *TalkServiceUnblockContactArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "unblockContact_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUnblockContactArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceUnblockContactArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *TalkServiceUnblockContactArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reference", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reference: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Reference)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reference (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reference: ", p), err) }
  return err
}

func (p *TalkServiceUnblockContactArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUnblockContactArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUnblockContactResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUnblockContactResult() *TalkServiceUnblockContactResult {
  return &TalkServiceUnblockContactResult{}
}

var TalkServiceUnblockContactResult_E_DEFAULT *TalkException
func (p *TalkServiceUnblockContactResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUnblockContactResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUnblockContactResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUnblockContactResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUnblockContactResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUnblockContactResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "unblockContact_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUnblockContactResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUnblockContactResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUnblockContactResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Mid
//  - Type
//  - Reference
type TalkServiceFindAndAddContactsByMidArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  Mid string `thrift:"mid,2" db:"mid" json:"mid"`
  Type ContactType `thrift:"type,3" db:"type" json:"type"`
  Reference string `thrift:"reference,4" db:"reference" json:"reference"`
}

func NewTalkServiceFindAndAddContactsByMidArgs() *TalkServiceFindAndAddContactsByMidArgs {
  return &TalkServiceFindAndAddContactsByMidArgs{}
}


func (p *TalkServiceFindAndAddContactsByMidArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceFindAndAddContactsByMidArgs) GetMid() string {
  return p.Mid
}

func (p *TalkServiceFindAndAddContactsByMidArgs) GetType() ContactType {
  return p.Type
}

func (p *TalkServiceFindAndAddContactsByMidArgs) GetReference() string {
  return p.Reference
}
func (p *TalkServiceFindAndAddContactsByMidArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactsByMidArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceFindAndAddContactsByMidArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *TalkServiceFindAndAddContactsByMidArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := ContactType(v)
  p.Type = temp
}
  return nil
}

func (p *TalkServiceFindAndAddContactsByMidArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Reference = v
}
  return nil
}

func (p *TalkServiceFindAndAddContactsByMidArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "findAndAddContactsByMid_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindAndAddContactsByMidArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceFindAndAddContactsByMidArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mid: ", p), err) }
  return err
}

func (p *TalkServiceFindAndAddContactsByMidArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err) }
  return err
}

func (p *TalkServiceFindAndAddContactsByMidArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reference", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:reference: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Reference)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reference (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:reference: ", p), err) }
  return err
}

func (p *TalkServiceFindAndAddContactsByMidArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindAndAddContactsByMidArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindAndAddContactsByMidResult struct {
  Success map[string]*Contact `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFindAndAddContactsByMidResult() *TalkServiceFindAndAddContactsByMidResult {
  return &TalkServiceFindAndAddContactsByMidResult{}
}

var TalkServiceFindAndAddContactsByMidResult_Success_DEFAULT map[string]*Contact

func (p *TalkServiceFindAndAddContactsByMidResult) GetSuccess() map[string]*Contact {
  return p.Success
}
var TalkServiceFindAndAddContactsByMidResult_E_DEFAULT *TalkException
func (p *TalkServiceFindAndAddContactsByMidResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceFindAndAddContactsByMidResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceFindAndAddContactsByMidResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceFindAndAddContactsByMidResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceFindAndAddContactsByMidResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactsByMidResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*Contact, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key281 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key281 = v
}
    _val282 := &Contact{}
    if err := _val282.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val282), err)
    }
    p.Success[_key281] = _val282
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactsByMidResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactsByMidResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "findAndAddContactsByMid_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindAndAddContactsByMidResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindAndAddContactsByMidResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindAndAddContactsByMidResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindAndAddContactsByMidResult(%+v)", *p)
}

// Attributes:
//  - SearchId
type TalkServiceFindContactByUseridArgs struct {
  // unused field # 1
  SearchId string `thrift:"searchId,2" db:"searchId" json:"searchId"`
}

func NewTalkServiceFindContactByUseridArgs() *TalkServiceFindContactByUseridArgs {
  return &TalkServiceFindContactByUseridArgs{}
}


func (p *TalkServiceFindContactByUseridArgs) GetSearchId() string {
  return p.SearchId
}
func (p *TalkServiceFindContactByUseridArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindContactByUseridArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SearchId = v
}
  return nil
}

func (p *TalkServiceFindContactByUseridArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "findContactByUserid_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindContactByUseridArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "searchId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:searchId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SearchId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.searchId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:searchId: ", p), err) }
  return err
}

func (p *TalkServiceFindContactByUseridArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindContactByUseridArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindContactByUseridResult struct {
  Success *Contact `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFindContactByUseridResult() *TalkServiceFindContactByUseridResult {
  return &TalkServiceFindContactByUseridResult{}
}

var TalkServiceFindContactByUseridResult_Success_DEFAULT *Contact
func (p *TalkServiceFindContactByUseridResult) GetSuccess() *Contact {
  if !p.IsSetSuccess() {
    return TalkServiceFindContactByUseridResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceFindContactByUseridResult_E_DEFAULT *TalkException
func (p *TalkServiceFindContactByUseridResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceFindContactByUseridResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceFindContactByUseridResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceFindContactByUseridResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceFindContactByUseridResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindContactByUseridResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Contact{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceFindContactByUseridResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceFindContactByUseridResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "findContactByUserid_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindContactByUseridResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindContactByUseridResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindContactByUseridResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindContactByUseridResult(%+v)", *p)
}

// Attributes:
//  - PhoneNumberList
type TalkServiceInviteFriendsBySmsArgs struct {
  // unused field # 1
  PhoneNumberList []string `thrift:"phoneNumberList,2" db:"phoneNumberList" json:"phoneNumberList"`
}

func NewTalkServiceInviteFriendsBySmsArgs() *TalkServiceInviteFriendsBySmsArgs {
  return &TalkServiceInviteFriendsBySmsArgs{}
}


func (p *TalkServiceInviteFriendsBySmsArgs) GetPhoneNumberList() []string {
  return p.PhoneNumberList
}
func (p *TalkServiceInviteFriendsBySmsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceInviteFriendsBySmsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.PhoneNumberList =  tSlice
  for i := 0; i < size; i ++ {
var _elem283 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem283 = v
}
    p.PhoneNumberList = append(p.PhoneNumberList, _elem283)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceInviteFriendsBySmsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "inviteFriendsBySms_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceInviteFriendsBySmsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "phoneNumberList", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:phoneNumberList: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.PhoneNumberList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PhoneNumberList {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:phoneNumberList: ", p), err) }
  return err
}

func (p *TalkServiceInviteFriendsBySmsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceInviteFriendsBySmsArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceInviteFriendsBySmsResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceInviteFriendsBySmsResult() *TalkServiceInviteFriendsBySmsResult {
  return &TalkServiceInviteFriendsBySmsResult{}
}

var TalkServiceInviteFriendsBySmsResult_E_DEFAULT *TalkException
func (p *TalkServiceInviteFriendsBySmsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceInviteFriendsBySmsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceInviteFriendsBySmsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceInviteFriendsBySmsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceInviteFriendsBySmsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceInviteFriendsBySmsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "inviteFriendsBySms_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceInviteFriendsBySmsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceInviteFriendsBySmsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceInviteFriendsBySmsResult(%+v)", *p)
}

// Attributes:
//  - Ids
type TalkServiceGetContactsArgs struct {
  // unused field # 1
  Ids []string `thrift:"ids,2" db:"ids" json:"ids"`
}

func NewTalkServiceGetContactsArgs() *TalkServiceGetContactsArgs {
  return &TalkServiceGetContactsArgs{}
}


func (p *TalkServiceGetContactsArgs) GetIds() []string {
  return p.Ids
}
func (p *TalkServiceGetContactsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetContactsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Ids =  tSlice
  for i := 0; i < size; i ++ {
var _elem284 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem284 = v
}
    p.Ids = append(p.Ids, _elem284)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetContactsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getContacts_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetContactsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ids", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ids: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Ids)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Ids {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ids: ", p), err) }
  return err
}

func (p *TalkServiceGetContactsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetContactsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetContactsResult struct {
  Success []*Contact `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetContactsResult() *TalkServiceGetContactsResult {
  return &TalkServiceGetContactsResult{}
}

var TalkServiceGetContactsResult_Success_DEFAULT []*Contact

func (p *TalkServiceGetContactsResult) GetSuccess() []*Contact {
  return p.Success
}
var TalkServiceGetContactsResult_E_DEFAULT *TalkException
func (p *TalkServiceGetContactsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetContactsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetContactsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetContactsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetContactsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetContactsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Contact, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem285 := &Contact{}
    if err := _elem285.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem285), err)
    }
    p.Success = append(p.Success, _elem285)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetContactsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetContactsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getContacts_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetContactsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetContactsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetContactsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetContactsResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - LocalContacts
type TalkServiceSyncContactsArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  LocalContacts []*ContactModification `thrift:"localContacts,2" db:"localContacts" json:"localContacts"`
}

func NewTalkServiceSyncContactsArgs() *TalkServiceSyncContactsArgs {
  return &TalkServiceSyncContactsArgs{}
}


func (p *TalkServiceSyncContactsArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceSyncContactsArgs) GetLocalContacts() []*ContactModification {
  return p.LocalContacts
}
func (p *TalkServiceSyncContactsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSyncContactsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceSyncContactsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ContactModification, 0, size)
  p.LocalContacts =  tSlice
  for i := 0; i < size; i ++ {
    _elem286 := &ContactModification{}
    if err := _elem286.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem286), err)
    }
    p.LocalContacts = append(p.LocalContacts, _elem286)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceSyncContactsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "syncContacts_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSyncContactsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceSyncContactsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "localContacts", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:localContacts: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.LocalContacts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.LocalContacts {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:localContacts: ", p), err) }
  return err
}

func (p *TalkServiceSyncContactsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSyncContactsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceSyncContactsResult struct {
  Success map[string]*ContactRegistration `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceSyncContactsResult() *TalkServiceSyncContactsResult {
  return &TalkServiceSyncContactsResult{}
}

var TalkServiceSyncContactsResult_Success_DEFAULT map[string]*ContactRegistration

func (p *TalkServiceSyncContactsResult) GetSuccess() map[string]*ContactRegistration {
  return p.Success
}
var TalkServiceSyncContactsResult_E_DEFAULT *TalkException
func (p *TalkServiceSyncContactsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceSyncContactsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceSyncContactsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceSyncContactsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceSyncContactsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSyncContactsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*ContactRegistration, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key287 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key287 = v
}
    _val288 := &ContactRegistration{}
    if err := _val288.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val288), err)
    }
    p.Success[_key287] = _val288
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TalkServiceSyncContactsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceSyncContactsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "syncContacts_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSyncContactsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceSyncContactsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceSyncContactsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSyncContactsResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Mid
//  - Flag
//  - Value
type TalkServiceUpdateContactSettingArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  Mid string `thrift:"mid,2" db:"mid" json:"mid"`
  Flag ContactSetting `thrift:"flag,3" db:"flag" json:"flag"`
  Value string `thrift:"value,4" db:"value" json:"value"`
}

func NewTalkServiceUpdateContactSettingArgs() *TalkServiceUpdateContactSettingArgs {
  return &TalkServiceUpdateContactSettingArgs{}
}


func (p *TalkServiceUpdateContactSettingArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceUpdateContactSettingArgs) GetMid() string {
  return p.Mid
}

func (p *TalkServiceUpdateContactSettingArgs) GetFlag() ContactSetting {
  return p.Flag
}

func (p *TalkServiceUpdateContactSettingArgs) GetValue() string {
  return p.Value
}
func (p *TalkServiceUpdateContactSettingArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateContactSettingArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceUpdateContactSettingArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *TalkServiceUpdateContactSettingArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := ContactSetting(v)
  p.Flag = temp
}
  return nil
}

func (p *TalkServiceUpdateContactSettingArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *TalkServiceUpdateContactSettingArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateContactSetting_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateContactSettingArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceUpdateContactSettingArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mid: ", p), err) }
  return err
}

func (p *TalkServiceUpdateContactSettingArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "flag", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:flag: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Flag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.flag (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:flag: ", p), err) }
  return err
}

func (p *TalkServiceUpdateContactSettingArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "value", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:value: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:value: ", p), err) }
  return err
}

func (p *TalkServiceUpdateContactSettingArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateContactSettingArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUpdateContactSettingResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdateContactSettingResult() *TalkServiceUpdateContactSettingResult {
  return &TalkServiceUpdateContactSettingResult{}
}

var TalkServiceUpdateContactSettingResult_E_DEFAULT *TalkException
func (p *TalkServiceUpdateContactSettingResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUpdateContactSettingResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUpdateContactSettingResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUpdateContactSettingResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateContactSettingResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUpdateContactSettingResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateContactSetting_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateContactSettingResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateContactSettingResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateContactSettingResult(%+v)", *p)
}

// Attributes:
//  - Seq
//  - ChatMid
//  - LastMessageId
//  - SessionId
type TalkServiceSendChatRemovedArgs struct {
  Seq int32 `thrift:"seq,1" db:"seq" json:"seq"`
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
  LastMessageId string `thrift:"lastMessageId,3" db:"lastMessageId" json:"lastMessageId"`
  SessionId int8 `thrift:"sessionId,4" db:"sessionId" json:"sessionId"`
}

func NewTalkServiceSendChatRemovedArgs() *TalkServiceSendChatRemovedArgs {
  return &TalkServiceSendChatRemovedArgs{}
}


func (p *TalkServiceSendChatRemovedArgs) GetSeq() int32 {
  return p.Seq
}

func (p *TalkServiceSendChatRemovedArgs) GetChatMid() string {
  return p.ChatMid
}

func (p *TalkServiceSendChatRemovedArgs) GetLastMessageId() string {
  return p.LastMessageId
}

func (p *TalkServiceSendChatRemovedArgs) GetSessionId() int8 {
  return p.SessionId
}
func (p *TalkServiceSendChatRemovedArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSendChatRemovedArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Seq = v
}
  return nil
}

func (p *TalkServiceSendChatRemovedArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *TalkServiceSendChatRemovedArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LastMessageId = v
}
  return nil
}

func (p *TalkServiceSendChatRemovedArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := int8(v)
  p.SessionId = temp
}
  return nil
}

func (p *TalkServiceSendChatRemovedArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sendChatRemoved_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSendChatRemovedArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "seq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Seq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq: ", p), err) }
  return err
}

func (p *TalkServiceSendChatRemovedArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *TalkServiceSendChatRemovedArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastMessageId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lastMessageId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.LastMessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastMessageId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lastMessageId: ", p), err) }
  return err
}

func (p *TalkServiceSendChatRemovedArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sessionId", thrift.BYTE, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sessionId: ", p), err) }
  if err := oprot.WriteByte(ctx, int8(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sessionId: ", p), err) }
  return err
}

func (p *TalkServiceSendChatRemovedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSendChatRemovedArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceSendChatRemovedResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceSendChatRemovedResult() *TalkServiceSendChatRemovedResult {
  return &TalkServiceSendChatRemovedResult{}
}

var TalkServiceSendChatRemovedResult_E_DEFAULT *TalkException
func (p *TalkServiceSendChatRemovedResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceSendChatRemovedResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceSendChatRemovedResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceSendChatRemovedResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSendChatRemovedResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceSendChatRemovedResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sendChatRemoved_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSendChatRemovedResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceSendChatRemovedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSendChatRemovedResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - RoomId
type TalkServiceLeaveRoomArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  RoomId string `thrift:"roomId,2" db:"roomId" json:"roomId"`
}

func NewTalkServiceLeaveRoomArgs() *TalkServiceLeaveRoomArgs {
  return &TalkServiceLeaveRoomArgs{}
}


func (p *TalkServiceLeaveRoomArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceLeaveRoomArgs) GetRoomId() string {
  return p.RoomId
}
func (p *TalkServiceLeaveRoomArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceLeaveRoomArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceLeaveRoomArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RoomId = v
}
  return nil
}

func (p *TalkServiceLeaveRoomArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "leaveRoom_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceLeaveRoomArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceLeaveRoomArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "roomId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:roomId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RoomId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roomId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:roomId: ", p), err) }
  return err
}

func (p *TalkServiceLeaveRoomArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceLeaveRoomArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceLeaveRoomResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceLeaveRoomResult() *TalkServiceLeaveRoomResult {
  return &TalkServiceLeaveRoomResult{}
}

var TalkServiceLeaveRoomResult_E_DEFAULT *TalkException
func (p *TalkServiceLeaveRoomResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceLeaveRoomResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceLeaveRoomResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceLeaveRoomResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceLeaveRoomResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceLeaveRoomResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "leaveRoom_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceLeaveRoomResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceLeaveRoomResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceLeaveRoomResult(%+v)", *p)
}

// Attributes:
//  - Seq
//  - MessageId
type TalkServiceUnsendMessageArgs struct {
  Seq int32 `thrift:"seq,1" db:"seq" json:"seq"`
  MessageId string `thrift:"messageId,2" db:"messageId" json:"messageId"`
}

func NewTalkServiceUnsendMessageArgs() *TalkServiceUnsendMessageArgs {
  return &TalkServiceUnsendMessageArgs{}
}


func (p *TalkServiceUnsendMessageArgs) GetSeq() int32 {
  return p.Seq
}

func (p *TalkServiceUnsendMessageArgs) GetMessageId() string {
  return p.MessageId
}
func (p *TalkServiceUnsendMessageArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUnsendMessageArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Seq = v
}
  return nil
}

func (p *TalkServiceUnsendMessageArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MessageId = v
}
  return nil
}

func (p *TalkServiceUnsendMessageArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "unsendMessage_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUnsendMessageArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "seq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Seq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq: ", p), err) }
  return err
}

func (p *TalkServiceUnsendMessageArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "messageId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:messageId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.messageId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:messageId: ", p), err) }
  return err
}

func (p *TalkServiceUnsendMessageArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUnsendMessageArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUnsendMessageResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUnsendMessageResult() *TalkServiceUnsendMessageResult {
  return &TalkServiceUnsendMessageResult{}
}

var TalkServiceUnsendMessageResult_E_DEFAULT *TalkException
func (p *TalkServiceUnsendMessageResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUnsendMessageResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUnsendMessageResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUnsendMessageResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUnsendMessageResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUnsendMessageResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "unsendMessage_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUnsendMessageResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUnsendMessageResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUnsendMessageResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - RoomId
//  - ContactIds
type TalkServiceInviteIntoRoomArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  RoomId string `thrift:"roomId,2" db:"roomId" json:"roomId"`
  ContactIds []string `thrift:"contactIds,3" db:"contactIds" json:"contactIds"`
}

func NewTalkServiceInviteIntoRoomArgs() *TalkServiceInviteIntoRoomArgs {
  return &TalkServiceInviteIntoRoomArgs{}
}


func (p *TalkServiceInviteIntoRoomArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceInviteIntoRoomArgs) GetRoomId() string {
  return p.RoomId
}

func (p *TalkServiceInviteIntoRoomArgs) GetContactIds() []string {
  return p.ContactIds
}
func (p *TalkServiceInviteIntoRoomArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceInviteIntoRoomArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceInviteIntoRoomArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RoomId = v
}
  return nil
}

func (p *TalkServiceInviteIntoRoomArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ContactIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem289 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem289 = v
}
    p.ContactIds = append(p.ContactIds, _elem289)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceInviteIntoRoomArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "inviteIntoRoom_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceInviteIntoRoomArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceInviteIntoRoomArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "roomId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:roomId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RoomId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roomId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:roomId: ", p), err) }
  return err
}

func (p *TalkServiceInviteIntoRoomArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contactIds", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:contactIds: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.ContactIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ContactIds {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:contactIds: ", p), err) }
  return err
}

func (p *TalkServiceInviteIntoRoomArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceInviteIntoRoomArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceInviteIntoRoomResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceInviteIntoRoomResult() *TalkServiceInviteIntoRoomResult {
  return &TalkServiceInviteIntoRoomResult{}
}

var TalkServiceInviteIntoRoomResult_E_DEFAULT *TalkException
func (p *TalkServiceInviteIntoRoomResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceInviteIntoRoomResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceInviteIntoRoomResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceInviteIntoRoomResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceInviteIntoRoomResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceInviteIntoRoomResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "inviteIntoRoom_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceInviteIntoRoomResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceInviteIntoRoomResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceInviteIntoRoomResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ContactIds
type TalkServiceCreateRoomArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ContactIds []string `thrift:"contactIds,2" db:"contactIds" json:"contactIds"`
}

func NewTalkServiceCreateRoomArgs() *TalkServiceCreateRoomArgs {
  return &TalkServiceCreateRoomArgs{}
}


func (p *TalkServiceCreateRoomArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceCreateRoomArgs) GetContactIds() []string {
  return p.ContactIds
}
func (p *TalkServiceCreateRoomArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceCreateRoomArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceCreateRoomArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ContactIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem290 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem290 = v
}
    p.ContactIds = append(p.ContactIds, _elem290)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceCreateRoomArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "createRoom_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceCreateRoomArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceCreateRoomArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contactIds", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:contactIds: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.ContactIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ContactIds {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:contactIds: ", p), err) }
  return err
}

func (p *TalkServiceCreateRoomArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceCreateRoomArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceCreateRoomResult struct {
  Success *Room `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceCreateRoomResult() *TalkServiceCreateRoomResult {
  return &TalkServiceCreateRoomResult{}
}

var TalkServiceCreateRoomResult_Success_DEFAULT *Room
func (p *TalkServiceCreateRoomResult) GetSuccess() *Room {
  if !p.IsSetSuccess() {
    return TalkServiceCreateRoomResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceCreateRoomResult_E_DEFAULT *TalkException
func (p *TalkServiceCreateRoomResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceCreateRoomResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceCreateRoomResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceCreateRoomResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceCreateRoomResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceCreateRoomResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Room{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceCreateRoomResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceCreateRoomResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "createRoom_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceCreateRoomResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceCreateRoomResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceCreateRoomResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceCreateRoomResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceInviteIntoChatArgs struct {
  Request *InviteIntoChatRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceInviteIntoChatArgs() *TalkServiceInviteIntoChatArgs {
  return &TalkServiceInviteIntoChatArgs{}
}

var TalkServiceInviteIntoChatArgs_Request_DEFAULT *InviteIntoChatRequest
func (p *TalkServiceInviteIntoChatArgs) GetRequest() *InviteIntoChatRequest {
  if !p.IsSetRequest() {
    return TalkServiceInviteIntoChatArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceInviteIntoChatArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceInviteIntoChatArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceInviteIntoChatArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &InviteIntoChatRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceInviteIntoChatArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "inviteIntoChat_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceInviteIntoChatArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceInviteIntoChatArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceInviteIntoChatArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceInviteIntoChatResult struct {
  Success *InviteIntoChatResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceInviteIntoChatResult() *TalkServiceInviteIntoChatResult {
  return &TalkServiceInviteIntoChatResult{}
}

var TalkServiceInviteIntoChatResult_Success_DEFAULT *InviteIntoChatResponse
func (p *TalkServiceInviteIntoChatResult) GetSuccess() *InviteIntoChatResponse {
  if !p.IsSetSuccess() {
    return TalkServiceInviteIntoChatResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceInviteIntoChatResult_E_DEFAULT *TalkException
func (p *TalkServiceInviteIntoChatResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceInviteIntoChatResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceInviteIntoChatResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceInviteIntoChatResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceInviteIntoChatResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceInviteIntoChatResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &InviteIntoChatResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceInviteIntoChatResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceInviteIntoChatResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "inviteIntoChat_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceInviteIntoChatResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceInviteIntoChatResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceInviteIntoChatResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceInviteIntoChatResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceDeleteSelfFromChatArgs struct {
  Request *DeleteSelfFromChatRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceDeleteSelfFromChatArgs() *TalkServiceDeleteSelfFromChatArgs {
  return &TalkServiceDeleteSelfFromChatArgs{}
}

var TalkServiceDeleteSelfFromChatArgs_Request_DEFAULT *DeleteSelfFromChatRequest
func (p *TalkServiceDeleteSelfFromChatArgs) GetRequest() *DeleteSelfFromChatRequest {
  if !p.IsSetRequest() {
    return TalkServiceDeleteSelfFromChatArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceDeleteSelfFromChatArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceDeleteSelfFromChatArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceDeleteSelfFromChatArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &DeleteSelfFromChatRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceDeleteSelfFromChatArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "deleteSelfFromChat_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceDeleteSelfFromChatArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceDeleteSelfFromChatArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceDeleteSelfFromChatArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceDeleteSelfFromChatResult struct {
  Success *DeleteSelfFromChatResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceDeleteSelfFromChatResult() *TalkServiceDeleteSelfFromChatResult {
  return &TalkServiceDeleteSelfFromChatResult{}
}

var TalkServiceDeleteSelfFromChatResult_Success_DEFAULT *DeleteSelfFromChatResponse
func (p *TalkServiceDeleteSelfFromChatResult) GetSuccess() *DeleteSelfFromChatResponse {
  if !p.IsSetSuccess() {
    return TalkServiceDeleteSelfFromChatResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceDeleteSelfFromChatResult_E_DEFAULT *TalkException
func (p *TalkServiceDeleteSelfFromChatResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceDeleteSelfFromChatResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceDeleteSelfFromChatResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceDeleteSelfFromChatResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceDeleteSelfFromChatResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceDeleteSelfFromChatResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &DeleteSelfFromChatResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceDeleteSelfFromChatResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceDeleteSelfFromChatResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "deleteSelfFromChat_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceDeleteSelfFromChatResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceDeleteSelfFromChatResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceDeleteSelfFromChatResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceDeleteSelfFromChatResult(%+v)", *p)
}

// Attributes:
//  - Request
//  - SyncReason
type TalkServiceGetAllChatMidsArgs struct {
  Request *GetAllChatMidsRequest `thrift:"request,1" db:"request" json:"request"`
  SyncReason SyncReason `thrift:"syncReason,2" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetAllChatMidsArgs() *TalkServiceGetAllChatMidsArgs {
  return &TalkServiceGetAllChatMidsArgs{}
}

var TalkServiceGetAllChatMidsArgs_Request_DEFAULT *GetAllChatMidsRequest
func (p *TalkServiceGetAllChatMidsArgs) GetRequest() *GetAllChatMidsRequest {
  if !p.IsSetRequest() {
    return TalkServiceGetAllChatMidsArgs_Request_DEFAULT
  }
return p.Request
}

func (p *TalkServiceGetAllChatMidsArgs) GetSyncReason() SyncReason {
  return p.SyncReason
}
func (p *TalkServiceGetAllChatMidsArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceGetAllChatMidsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetAllChatMidsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &GetAllChatMidsRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceGetAllChatMidsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := SyncReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *TalkServiceGetAllChatMidsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getAllChatMids_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetAllChatMidsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceGetAllChatMidsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncReason", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:syncReason: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:syncReason: ", p), err) }
  return err
}

func (p *TalkServiceGetAllChatMidsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetAllChatMidsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetAllChatMidsResult struct {
  Success *GetAllChatMidsResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetAllChatMidsResult() *TalkServiceGetAllChatMidsResult {
  return &TalkServiceGetAllChatMidsResult{}
}

var TalkServiceGetAllChatMidsResult_Success_DEFAULT *GetAllChatMidsResponse
func (p *TalkServiceGetAllChatMidsResult) GetSuccess() *GetAllChatMidsResponse {
  if !p.IsSetSuccess() {
    return TalkServiceGetAllChatMidsResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetAllChatMidsResult_E_DEFAULT *TalkException
func (p *TalkServiceGetAllChatMidsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetAllChatMidsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetAllChatMidsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetAllChatMidsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetAllChatMidsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetAllChatMidsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GetAllChatMidsResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetAllChatMidsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetAllChatMidsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getAllChatMids_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetAllChatMidsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetAllChatMidsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetAllChatMidsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetAllChatMidsResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceCreateChatArgs struct {
  Request *CreateChatRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceCreateChatArgs() *TalkServiceCreateChatArgs {
  return &TalkServiceCreateChatArgs{}
}

var TalkServiceCreateChatArgs_Request_DEFAULT *CreateChatRequest
func (p *TalkServiceCreateChatArgs) GetRequest() *CreateChatRequest {
  if !p.IsSetRequest() {
    return TalkServiceCreateChatArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceCreateChatArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceCreateChatArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceCreateChatArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &CreateChatRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceCreateChatArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "createChat_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceCreateChatArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceCreateChatArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceCreateChatArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceCreateChatResult struct {
  Success *CreateChatResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceCreateChatResult() *TalkServiceCreateChatResult {
  return &TalkServiceCreateChatResult{}
}

var TalkServiceCreateChatResult_Success_DEFAULT *CreateChatResponse
func (p *TalkServiceCreateChatResult) GetSuccess() *CreateChatResponse {
  if !p.IsSetSuccess() {
    return TalkServiceCreateChatResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceCreateChatResult_E_DEFAULT *TalkException
func (p *TalkServiceCreateChatResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceCreateChatResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceCreateChatResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceCreateChatResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceCreateChatResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceCreateChatResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &CreateChatResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceCreateChatResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceCreateChatResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "createChat_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceCreateChatResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceCreateChatResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceCreateChatResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceCreateChatResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceAcceptChatInvitationArgs struct {
  Request *AcceptChatInvitationRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceAcceptChatInvitationArgs() *TalkServiceAcceptChatInvitationArgs {
  return &TalkServiceAcceptChatInvitationArgs{}
}

var TalkServiceAcceptChatInvitationArgs_Request_DEFAULT *AcceptChatInvitationRequest
func (p *TalkServiceAcceptChatInvitationArgs) GetRequest() *AcceptChatInvitationRequest {
  if !p.IsSetRequest() {
    return TalkServiceAcceptChatInvitationArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceAcceptChatInvitationArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceAcceptChatInvitationArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceAcceptChatInvitationArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &AcceptChatInvitationRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceAcceptChatInvitationArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "acceptChatInvitation_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceAcceptChatInvitationArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceAcceptChatInvitationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceAcceptChatInvitationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceAcceptChatInvitationResult struct {
  Success *AcceptChatInvitationResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceAcceptChatInvitationResult() *TalkServiceAcceptChatInvitationResult {
  return &TalkServiceAcceptChatInvitationResult{}
}

var TalkServiceAcceptChatInvitationResult_Success_DEFAULT *AcceptChatInvitationResponse
func (p *TalkServiceAcceptChatInvitationResult) GetSuccess() *AcceptChatInvitationResponse {
  if !p.IsSetSuccess() {
    return TalkServiceAcceptChatInvitationResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceAcceptChatInvitationResult_E_DEFAULT *TalkException
func (p *TalkServiceAcceptChatInvitationResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceAcceptChatInvitationResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceAcceptChatInvitationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceAcceptChatInvitationResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceAcceptChatInvitationResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceAcceptChatInvitationResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &AcceptChatInvitationResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceAcceptChatInvitationResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceAcceptChatInvitationResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "acceptChatInvitation_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceAcceptChatInvitationResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceAcceptChatInvitationResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceAcceptChatInvitationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceAcceptChatInvitationResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceRejectChatInvitationArgs struct {
  Request *RejectChatInvitationRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceRejectChatInvitationArgs() *TalkServiceRejectChatInvitationArgs {
  return &TalkServiceRejectChatInvitationArgs{}
}

var TalkServiceRejectChatInvitationArgs_Request_DEFAULT *RejectChatInvitationRequest
func (p *TalkServiceRejectChatInvitationArgs) GetRequest() *RejectChatInvitationRequest {
  if !p.IsSetRequest() {
    return TalkServiceRejectChatInvitationArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceRejectChatInvitationArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceRejectChatInvitationArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRejectChatInvitationArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &RejectChatInvitationRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceRejectChatInvitationArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "rejectChatInvitation_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRejectChatInvitationArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceRejectChatInvitationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRejectChatInvitationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceRejectChatInvitationResult struct {
  Success *RejectChatInvitationResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRejectChatInvitationResult() *TalkServiceRejectChatInvitationResult {
  return &TalkServiceRejectChatInvitationResult{}
}

var TalkServiceRejectChatInvitationResult_Success_DEFAULT *RejectChatInvitationResponse
func (p *TalkServiceRejectChatInvitationResult) GetSuccess() *RejectChatInvitationResponse {
  if !p.IsSetSuccess() {
    return TalkServiceRejectChatInvitationResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceRejectChatInvitationResult_E_DEFAULT *TalkException
func (p *TalkServiceRejectChatInvitationResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRejectChatInvitationResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRejectChatInvitationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceRejectChatInvitationResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRejectChatInvitationResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRejectChatInvitationResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &RejectChatInvitationResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceRejectChatInvitationResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRejectChatInvitationResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "rejectChatInvitation_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRejectChatInvitationResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceRejectChatInvitationResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRejectChatInvitationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRejectChatInvitationResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceDeleteOtherFromChatArgs struct {
  Request *DeleteOtherFromChatRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceDeleteOtherFromChatArgs() *TalkServiceDeleteOtherFromChatArgs {
  return &TalkServiceDeleteOtherFromChatArgs{}
}

var TalkServiceDeleteOtherFromChatArgs_Request_DEFAULT *DeleteOtherFromChatRequest
func (p *TalkServiceDeleteOtherFromChatArgs) GetRequest() *DeleteOtherFromChatRequest {
  if !p.IsSetRequest() {
    return TalkServiceDeleteOtherFromChatArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceDeleteOtherFromChatArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceDeleteOtherFromChatArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceDeleteOtherFromChatArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &DeleteOtherFromChatRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceDeleteOtherFromChatArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "deleteOtherFromChat_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceDeleteOtherFromChatArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceDeleteOtherFromChatArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceDeleteOtherFromChatArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceDeleteOtherFromChatResult struct {
  Success *DeleteOtherFromChatResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceDeleteOtherFromChatResult() *TalkServiceDeleteOtherFromChatResult {
  return &TalkServiceDeleteOtherFromChatResult{}
}

var TalkServiceDeleteOtherFromChatResult_Success_DEFAULT *DeleteOtherFromChatResponse
func (p *TalkServiceDeleteOtherFromChatResult) GetSuccess() *DeleteOtherFromChatResponse {
  if !p.IsSetSuccess() {
    return TalkServiceDeleteOtherFromChatResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceDeleteOtherFromChatResult_E_DEFAULT *TalkException
func (p *TalkServiceDeleteOtherFromChatResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceDeleteOtherFromChatResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceDeleteOtherFromChatResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceDeleteOtherFromChatResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceDeleteOtherFromChatResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceDeleteOtherFromChatResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &DeleteOtherFromChatResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceDeleteOtherFromChatResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceDeleteOtherFromChatResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "deleteOtherFromChat_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceDeleteOtherFromChatResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceDeleteOtherFromChatResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceDeleteOtherFromChatResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceDeleteOtherFromChatResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceCancelChatInvitationArgs struct {
  Request *CancelChatInvitationRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceCancelChatInvitationArgs() *TalkServiceCancelChatInvitationArgs {
  return &TalkServiceCancelChatInvitationArgs{}
}

var TalkServiceCancelChatInvitationArgs_Request_DEFAULT *CancelChatInvitationRequest
func (p *TalkServiceCancelChatInvitationArgs) GetRequest() *CancelChatInvitationRequest {
  if !p.IsSetRequest() {
    return TalkServiceCancelChatInvitationArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceCancelChatInvitationArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceCancelChatInvitationArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceCancelChatInvitationArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &CancelChatInvitationRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceCancelChatInvitationArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "cancelChatInvitation_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceCancelChatInvitationArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceCancelChatInvitationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceCancelChatInvitationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceCancelChatInvitationResult struct {
  Success *CancelChatInvitationResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceCancelChatInvitationResult() *TalkServiceCancelChatInvitationResult {
  return &TalkServiceCancelChatInvitationResult{}
}

var TalkServiceCancelChatInvitationResult_Success_DEFAULT *CancelChatInvitationResponse
func (p *TalkServiceCancelChatInvitationResult) GetSuccess() *CancelChatInvitationResponse {
  if !p.IsSetSuccess() {
    return TalkServiceCancelChatInvitationResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceCancelChatInvitationResult_E_DEFAULT *TalkException
func (p *TalkServiceCancelChatInvitationResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceCancelChatInvitationResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceCancelChatInvitationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceCancelChatInvitationResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceCancelChatInvitationResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceCancelChatInvitationResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &CancelChatInvitationResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceCancelChatInvitationResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceCancelChatInvitationResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "cancelChatInvitation_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceCancelChatInvitationResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceCancelChatInvitationResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceCancelChatInvitationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceCancelChatInvitationResult(%+v)", *p)
}

type TalkServiceGetSessionsArgs struct {
}

func NewTalkServiceGetSessionsArgs() *TalkServiceGetSessionsArgs {
  return &TalkServiceGetSessionsArgs{}
}

func (p *TalkServiceGetSessionsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetSessionsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getSessions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetSessionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetSessionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetSessionsResult struct {
  Success []*LoginSession `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetSessionsResult() *TalkServiceGetSessionsResult {
  return &TalkServiceGetSessionsResult{}
}

var TalkServiceGetSessionsResult_Success_DEFAULT []*LoginSession

func (p *TalkServiceGetSessionsResult) GetSuccess() []*LoginSession {
  return p.Success
}
var TalkServiceGetSessionsResult_E_DEFAULT *TalkException
func (p *TalkServiceGetSessionsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetSessionsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetSessionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetSessionsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetSessionsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetSessionsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*LoginSession, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem291 := &LoginSession{}
    if err := _elem291.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem291), err)
    }
    p.Success = append(p.Success, _elem291)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetSessionsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetSessionsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getSessions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetSessionsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetSessionsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetSessionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetSessionsResult(%+v)", *p)
}

// Attributes:
//  - TokenKey
type TalkServiceLogoutSessionArgs struct {
  // unused field # 1
  TokenKey string `thrift:"tokenKey,2" db:"tokenKey" json:"tokenKey"`
}

func NewTalkServiceLogoutSessionArgs() *TalkServiceLogoutSessionArgs {
  return &TalkServiceLogoutSessionArgs{}
}


func (p *TalkServiceLogoutSessionArgs) GetTokenKey() string {
  return p.TokenKey
}
func (p *TalkServiceLogoutSessionArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceLogoutSessionArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TokenKey = v
}
  return nil
}

func (p *TalkServiceLogoutSessionArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "logoutSession_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceLogoutSessionArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tokenKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tokenKey: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TokenKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tokenKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tokenKey: ", p), err) }
  return err
}

func (p *TalkServiceLogoutSessionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceLogoutSessionArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceLogoutSessionResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceLogoutSessionResult() *TalkServiceLogoutSessionResult {
  return &TalkServiceLogoutSessionResult{}
}

var TalkServiceLogoutSessionResult_E_DEFAULT *TalkException
func (p *TalkServiceLogoutSessionResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceLogoutSessionResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceLogoutSessionResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceLogoutSessionResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceLogoutSessionResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceLogoutSessionResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "logoutSession_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceLogoutSessionResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceLogoutSessionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceLogoutSessionResult(%+v)", *p)
}

// Attributes:
//  - LastRev
//  - DeviceInfo
//  - UdidHash
//  - OldUdidHash
type TalkServiceNotifyUpdatedArgs struct {
  // unused field # 1
  LastRev int64 `thrift:"lastRev,2" db:"lastRev" json:"lastRev"`
  DeviceInfo *DeviceInfo `thrift:"deviceInfo,3" db:"deviceInfo" json:"deviceInfo"`
  UdidHash string `thrift:"udidHash,4" db:"udidHash" json:"udidHash"`
  OldUdidHash string `thrift:"oldUdidHash,5" db:"oldUdidHash" json:"oldUdidHash"`
}

func NewTalkServiceNotifyUpdatedArgs() *TalkServiceNotifyUpdatedArgs {
  return &TalkServiceNotifyUpdatedArgs{}
}


func (p *TalkServiceNotifyUpdatedArgs) GetLastRev() int64 {
  return p.LastRev
}
var TalkServiceNotifyUpdatedArgs_DeviceInfo_DEFAULT *DeviceInfo
func (p *TalkServiceNotifyUpdatedArgs) GetDeviceInfo() *DeviceInfo {
  if !p.IsSetDeviceInfo() {
    return TalkServiceNotifyUpdatedArgs_DeviceInfo_DEFAULT
  }
return p.DeviceInfo
}

func (p *TalkServiceNotifyUpdatedArgs) GetUdidHash() string {
  return p.UdidHash
}

func (p *TalkServiceNotifyUpdatedArgs) GetOldUdidHash() string {
  return p.OldUdidHash
}
func (p *TalkServiceNotifyUpdatedArgs) IsSetDeviceInfo() bool {
  return p.DeviceInfo != nil
}

func (p *TalkServiceNotifyUpdatedArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceNotifyUpdatedArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LastRev = v
}
  return nil
}

func (p *TalkServiceNotifyUpdatedArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.DeviceInfo = &DeviceInfo{}
  if err := p.DeviceInfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DeviceInfo), err)
  }
  return nil
}

func (p *TalkServiceNotifyUpdatedArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UdidHash = v
}
  return nil
}

func (p *TalkServiceNotifyUpdatedArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.OldUdidHash = v
}
  return nil
}

func (p *TalkServiceNotifyUpdatedArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "notifyUpdated_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceNotifyUpdatedArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastRev", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lastRev: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LastRev)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastRev (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lastRev: ", p), err) }
  return err
}

func (p *TalkServiceNotifyUpdatedArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "deviceInfo", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:deviceInfo: ", p), err) }
  if err := p.DeviceInfo.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DeviceInfo), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:deviceInfo: ", p), err) }
  return err
}

func (p *TalkServiceNotifyUpdatedArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "udidHash", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:udidHash: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.UdidHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.udidHash (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:udidHash: ", p), err) }
  return err
}

func (p *TalkServiceNotifyUpdatedArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "oldUdidHash", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:oldUdidHash: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.OldUdidHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.oldUdidHash (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:oldUdidHash: ", p), err) }
  return err
}

func (p *TalkServiceNotifyUpdatedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceNotifyUpdatedArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceNotifyUpdatedResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceNotifyUpdatedResult() *TalkServiceNotifyUpdatedResult {
  return &TalkServiceNotifyUpdatedResult{}
}

var TalkServiceNotifyUpdatedResult_E_DEFAULT *TalkException
func (p *TalkServiceNotifyUpdatedResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceNotifyUpdatedResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceNotifyUpdatedResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceNotifyUpdatedResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceNotifyUpdatedResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceNotifyUpdatedResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "notifyUpdated_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceNotifyUpdatedResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceNotifyUpdatedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceNotifyUpdatedResult(%+v)", *p)
}

// Attributes:
//  - Text
type TalkServiceSendEchoPushArgs struct {
  // unused field # 1
  Text string `thrift:"text,2" db:"text" json:"text"`
}

func NewTalkServiceSendEchoPushArgs() *TalkServiceSendEchoPushArgs {
  return &TalkServiceSendEchoPushArgs{}
}


func (p *TalkServiceSendEchoPushArgs) GetText() string {
  return p.Text
}
func (p *TalkServiceSendEchoPushArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSendEchoPushArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Text = v
}
  return nil
}

func (p *TalkServiceSendEchoPushArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sendEchoPush_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSendEchoPushArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "text", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:text: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Text)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.text (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:text: ", p), err) }
  return err
}

func (p *TalkServiceSendEchoPushArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSendEchoPushArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceSendEchoPushResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceSendEchoPushResult() *TalkServiceSendEchoPushResult {
  return &TalkServiceSendEchoPushResult{}
}

var TalkServiceSendEchoPushResult_E_DEFAULT *TalkException
func (p *TalkServiceSendEchoPushResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceSendEchoPushResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceSendEchoPushResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceSendEchoPushResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSendEchoPushResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceSendEchoPushResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sendEchoPush_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSendEchoPushResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceSendEchoPushResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSendEchoPushResult(%+v)", *p)
}

// Attributes:
//  - Type
//  - Token
type TalkServiceUpdateNotificationTokenArgs struct {
  // unused field # 1
  Token string `thrift:"token,2" db:"token" json:"token"`
  Type NotificationType `thrift:"type,3" db:"type" json:"type"`
}

func NewTalkServiceUpdateNotificationTokenArgs() *TalkServiceUpdateNotificationTokenArgs {
  return &TalkServiceUpdateNotificationTokenArgs{}
}


func (p *TalkServiceUpdateNotificationTokenArgs) GetType() NotificationType {
  return p.Type
}

func (p *TalkServiceUpdateNotificationTokenArgs) GetToken() string {
  return p.Token
}
func (p *TalkServiceUpdateNotificationTokenArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateNotificationTokenArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := NotificationType(v)
  p.Type = temp
}
  return nil
}

func (p *TalkServiceUpdateNotificationTokenArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *TalkServiceUpdateNotificationTokenArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateNotificationToken_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateNotificationTokenArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:token: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:token: ", p), err) }
  return err
}

func (p *TalkServiceUpdateNotificationTokenArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err) }
  return err
}

func (p *TalkServiceUpdateNotificationTokenArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateNotificationTokenArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUpdateNotificationTokenResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdateNotificationTokenResult() *TalkServiceUpdateNotificationTokenResult {
  return &TalkServiceUpdateNotificationTokenResult{}
}

var TalkServiceUpdateNotificationTokenResult_E_DEFAULT *TalkException
func (p *TalkServiceUpdateNotificationTokenResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUpdateNotificationTokenResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUpdateNotificationTokenResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUpdateNotificationTokenResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateNotificationTokenResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUpdateNotificationTokenResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateNotificationToken_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateNotificationTokenResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateNotificationTokenResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateNotificationTokenResult(%+v)", *p)
}

// Attributes:
//  - Provider
type TalkServiceGetRSAKeyInfoArgs struct {
  // unused field # 1
  Provider IdentityProvider `thrift:"provider,2" db:"provider" json:"provider"`
}

func NewTalkServiceGetRSAKeyInfoArgs() *TalkServiceGetRSAKeyInfoArgs {
  return &TalkServiceGetRSAKeyInfoArgs{}
}


func (p *TalkServiceGetRSAKeyInfoArgs) GetProvider() IdentityProvider {
  return p.Provider
}
func (p *TalkServiceGetRSAKeyInfoArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetRSAKeyInfoArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := IdentityProvider(v)
  p.Provider = temp
}
  return nil
}

func (p *TalkServiceGetRSAKeyInfoArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRSAKeyInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetRSAKeyInfoArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "provider", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:provider: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Provider)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.provider (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:provider: ", p), err) }
  return err
}

func (p *TalkServiceGetRSAKeyInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetRSAKeyInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetRSAKeyInfoResult struct {
  Success *RSAKey `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetRSAKeyInfoResult() *TalkServiceGetRSAKeyInfoResult {
  return &TalkServiceGetRSAKeyInfoResult{}
}

var TalkServiceGetRSAKeyInfoResult_Success_DEFAULT *RSAKey
func (p *TalkServiceGetRSAKeyInfoResult) GetSuccess() *RSAKey {
  if !p.IsSetSuccess() {
    return TalkServiceGetRSAKeyInfoResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetRSAKeyInfoResult_E_DEFAULT *TalkException
func (p *TalkServiceGetRSAKeyInfoResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetRSAKeyInfoResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetRSAKeyInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetRSAKeyInfoResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetRSAKeyInfoResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetRSAKeyInfoResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &RSAKey{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetRSAKeyInfoResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetRSAKeyInfoResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRSAKeyInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetRSAKeyInfoResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetRSAKeyInfoResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetRSAKeyInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetRSAKeyInfoResult(%+v)", *p)
}

// Attributes:
//  - SyncReason
type TalkServiceGetBlockedContactIdsArgs struct {
  SyncReason SyncReason `thrift:"syncReason,1" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetBlockedContactIdsArgs() *TalkServiceGetBlockedContactIdsArgs {
  return &TalkServiceGetBlockedContactIdsArgs{}
}


func (p *TalkServiceGetBlockedContactIdsArgs) GetSyncReason() SyncReason {
  return p.SyncReason
}
func (p *TalkServiceGetBlockedContactIdsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetBlockedContactIdsArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SyncReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *TalkServiceGetBlockedContactIdsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getBlockedContactIds_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetBlockedContactIdsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "syncReason", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncReason: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncReason: ", p), err) }
  return err
}

func (p *TalkServiceGetBlockedContactIdsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetBlockedContactIdsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetBlockedContactIdsResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetBlockedContactIdsResult() *TalkServiceGetBlockedContactIdsResult {
  return &TalkServiceGetBlockedContactIdsResult{}
}

var TalkServiceGetBlockedContactIdsResult_Success_DEFAULT []string

func (p *TalkServiceGetBlockedContactIdsResult) GetSuccess() []string {
  return p.Success
}
var TalkServiceGetBlockedContactIdsResult_E_DEFAULT *TalkException
func (p *TalkServiceGetBlockedContactIdsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetBlockedContactIdsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetBlockedContactIdsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetBlockedContactIdsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetBlockedContactIdsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetBlockedContactIdsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem292 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem292 = v
}
    p.Success = append(p.Success, _elem292)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetBlockedContactIdsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetBlockedContactIdsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getBlockedContactIds_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetBlockedContactIdsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetBlockedContactIdsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetBlockedContactIdsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetBlockedContactIdsResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - PublicKey
type TalkServiceRegisterE2EEPublicKeyArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  PublicKey *E2EEPublicKey `thrift:"publicKey,2" db:"publicKey" json:"publicKey"`
}

func NewTalkServiceRegisterE2EEPublicKeyArgs() *TalkServiceRegisterE2EEPublicKeyArgs {
  return &TalkServiceRegisterE2EEPublicKeyArgs{}
}


func (p *TalkServiceRegisterE2EEPublicKeyArgs) GetReqSeq() int32 {
  return p.ReqSeq
}
var TalkServiceRegisterE2EEPublicKeyArgs_PublicKey_DEFAULT *E2EEPublicKey
func (p *TalkServiceRegisterE2EEPublicKeyArgs) GetPublicKey() *E2EEPublicKey {
  if !p.IsSetPublicKey() {
    return TalkServiceRegisterE2EEPublicKeyArgs_PublicKey_DEFAULT
  }
return p.PublicKey
}
func (p *TalkServiceRegisterE2EEPublicKeyArgs) IsSetPublicKey() bool {
  return p.PublicKey != nil
}

func (p *TalkServiceRegisterE2EEPublicKeyArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRegisterE2EEPublicKeyArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceRegisterE2EEPublicKeyArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.PublicKey = &E2EEPublicKey{}
  if err := p.PublicKey.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PublicKey), err)
  }
  return nil
}

func (p *TalkServiceRegisterE2EEPublicKeyArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "registerE2EEPublicKey_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRegisterE2EEPublicKeyArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceRegisterE2EEPublicKeyArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "publicKey", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:publicKey: ", p), err) }
  if err := p.PublicKey.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PublicKey), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:publicKey: ", p), err) }
  return err
}

func (p *TalkServiceRegisterE2EEPublicKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRegisterE2EEPublicKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceRegisterE2EEPublicKeyResult struct {
  Success *E2EEPublicKey `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRegisterE2EEPublicKeyResult() *TalkServiceRegisterE2EEPublicKeyResult {
  return &TalkServiceRegisterE2EEPublicKeyResult{}
}

var TalkServiceRegisterE2EEPublicKeyResult_Success_DEFAULT *E2EEPublicKey
func (p *TalkServiceRegisterE2EEPublicKeyResult) GetSuccess() *E2EEPublicKey {
  if !p.IsSetSuccess() {
    return TalkServiceRegisterE2EEPublicKeyResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceRegisterE2EEPublicKeyResult_E_DEFAULT *TalkException
func (p *TalkServiceRegisterE2EEPublicKeyResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRegisterE2EEPublicKeyResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRegisterE2EEPublicKeyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceRegisterE2EEPublicKeyResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRegisterE2EEPublicKeyResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRegisterE2EEPublicKeyResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &E2EEPublicKey{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceRegisterE2EEPublicKeyResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRegisterE2EEPublicKeyResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "registerE2EEPublicKey_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRegisterE2EEPublicKeyResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceRegisterE2EEPublicKeyResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRegisterE2EEPublicKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRegisterE2EEPublicKeyResult(%+v)", *p)
}

// Attributes:
//  - Mid
//  - KeyVersion
//  - KeyId
type TalkServiceGetE2EEPublicKeyArgs struct {
  // unused field # 1
  Mid string `thrift:"mid,2" db:"mid" json:"mid"`
  KeyVersion int32 `thrift:"keyVersion,3" db:"keyVersion" json:"keyVersion"`
  KeyId int32 `thrift:"keyId,4" db:"keyId" json:"keyId"`
}

func NewTalkServiceGetE2EEPublicKeyArgs() *TalkServiceGetE2EEPublicKeyArgs {
  return &TalkServiceGetE2EEPublicKeyArgs{}
}


func (p *TalkServiceGetE2EEPublicKeyArgs) GetMid() string {
  return p.Mid
}

func (p *TalkServiceGetE2EEPublicKeyArgs) GetKeyVersion() int32 {
  return p.KeyVersion
}

func (p *TalkServiceGetE2EEPublicKeyArgs) GetKeyId() int32 {
  return p.KeyId
}
func (p *TalkServiceGetE2EEPublicKeyArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetE2EEPublicKeyArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *TalkServiceGetE2EEPublicKeyArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.KeyVersion = v
}
  return nil
}

func (p *TalkServiceGetE2EEPublicKeyArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.KeyId = v
}
  return nil
}

func (p *TalkServiceGetE2EEPublicKeyArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getE2EEPublicKey_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetE2EEPublicKeyArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mid: ", p), err) }
  return err
}

func (p *TalkServiceGetE2EEPublicKeyArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keyVersion", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:keyVersion: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.KeyVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keyVersion (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:keyVersion: ", p), err) }
  return err
}

func (p *TalkServiceGetE2EEPublicKeyArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keyId", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:keyId: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.KeyId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keyId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:keyId: ", p), err) }
  return err
}

func (p *TalkServiceGetE2EEPublicKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetE2EEPublicKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetE2EEPublicKeyResult struct {
  Success *E2EEPublicKey `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetE2EEPublicKeyResult() *TalkServiceGetE2EEPublicKeyResult {
  return &TalkServiceGetE2EEPublicKeyResult{}
}

var TalkServiceGetE2EEPublicKeyResult_Success_DEFAULT *E2EEPublicKey
func (p *TalkServiceGetE2EEPublicKeyResult) GetSuccess() *E2EEPublicKey {
  if !p.IsSetSuccess() {
    return TalkServiceGetE2EEPublicKeyResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetE2EEPublicKeyResult_E_DEFAULT *TalkException
func (p *TalkServiceGetE2EEPublicKeyResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetE2EEPublicKeyResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetE2EEPublicKeyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetE2EEPublicKeyResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetE2EEPublicKeyResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetE2EEPublicKeyResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &E2EEPublicKey{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetE2EEPublicKeyResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetE2EEPublicKeyResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getE2EEPublicKey_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetE2EEPublicKeyResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetE2EEPublicKeyResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetE2EEPublicKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetE2EEPublicKeyResult(%+v)", *p)
}

// Attributes:
//  - Mid
type TalkServiceNegotiateE2EEPublicKeyArgs struct {
  // unused field # 1
  Mid string `thrift:"mid,2" db:"mid" json:"mid"`
}

func NewTalkServiceNegotiateE2EEPublicKeyArgs() *TalkServiceNegotiateE2EEPublicKeyArgs {
  return &TalkServiceNegotiateE2EEPublicKeyArgs{}
}


func (p *TalkServiceNegotiateE2EEPublicKeyArgs) GetMid() string {
  return p.Mid
}
func (p *TalkServiceNegotiateE2EEPublicKeyArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceNegotiateE2EEPublicKeyArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *TalkServiceNegotiateE2EEPublicKeyArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "negotiateE2EEPublicKey_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceNegotiateE2EEPublicKeyArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mid: ", p), err) }
  return err
}

func (p *TalkServiceNegotiateE2EEPublicKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceNegotiateE2EEPublicKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceNegotiateE2EEPublicKeyResult struct {
  Success *E2EENegotiationResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceNegotiateE2EEPublicKeyResult() *TalkServiceNegotiateE2EEPublicKeyResult {
  return &TalkServiceNegotiateE2EEPublicKeyResult{}
}

var TalkServiceNegotiateE2EEPublicKeyResult_Success_DEFAULT *E2EENegotiationResult_
func (p *TalkServiceNegotiateE2EEPublicKeyResult) GetSuccess() *E2EENegotiationResult_ {
  if !p.IsSetSuccess() {
    return TalkServiceNegotiateE2EEPublicKeyResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceNegotiateE2EEPublicKeyResult_E_DEFAULT *TalkException
func (p *TalkServiceNegotiateE2EEPublicKeyResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceNegotiateE2EEPublicKeyResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceNegotiateE2EEPublicKeyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceNegotiateE2EEPublicKeyResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceNegotiateE2EEPublicKeyResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceNegotiateE2EEPublicKeyResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &E2EENegotiationResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceNegotiateE2EEPublicKeyResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceNegotiateE2EEPublicKeyResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "negotiateE2EEPublicKey_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceNegotiateE2EEPublicKeyResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceNegotiateE2EEPublicKeyResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceNegotiateE2EEPublicKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceNegotiateE2EEPublicKeyResult(%+v)", *p)
}

// Attributes:
//  - KeyVersion
//  - ChatMid
//  - Members
//  - KeyIds
//  - EncryptedSharedKeys
type TalkServiceRegisterE2EEGroupKeyArgs struct {
  // unused field # 1
  KeyVersion int32 `thrift:"keyVersion,2" db:"keyVersion" json:"keyVersion"`
  ChatMid string `thrift:"chatMid,3" db:"chatMid" json:"chatMid"`
  Members []string `thrift:"members,4" db:"members" json:"members"`
  KeyIds []int32 `thrift:"keyIds,5" db:"keyIds" json:"keyIds"`
  EncryptedSharedKeys []string `thrift:"encryptedSharedKeys,6" db:"encryptedSharedKeys" json:"encryptedSharedKeys"`
}

func NewTalkServiceRegisterE2EEGroupKeyArgs() *TalkServiceRegisterE2EEGroupKeyArgs {
  return &TalkServiceRegisterE2EEGroupKeyArgs{}
}


func (p *TalkServiceRegisterE2EEGroupKeyArgs) GetKeyVersion() int32 {
  return p.KeyVersion
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs) GetChatMid() string {
  return p.ChatMid
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs) GetMembers() []string {
  return p.Members
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs) GetKeyIds() []int32 {
  return p.KeyIds
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs) GetEncryptedSharedKeys() []string {
  return p.EncryptedSharedKeys
}
func (p *TalkServiceRegisterE2EEGroupKeyArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.KeyVersion = v
}
  return nil
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Members =  tSlice
  for i := 0; i < size; i ++ {
var _elem293 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem293 = v
}
    p.Members = append(p.Members, _elem293)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.KeyIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem294 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem294 = v
}
    p.KeyIds = append(p.KeyIds, _elem294)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.EncryptedSharedKeys =  tSlice
  for i := 0; i < size; i ++ {
var _elem295 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem295 = v
}
    p.EncryptedSharedKeys = append(p.EncryptedSharedKeys, _elem295)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "registerE2EEGroupKey_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keyVersion", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:keyVersion: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.KeyVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keyVersion (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:keyVersion: ", p), err) }
  return err
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:chatMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:chatMid: ", p), err) }
  return err
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "members", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:members: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Members)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Members {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:members: ", p), err) }
  return err
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keyIds", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:keyIds: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.KeyIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.KeyIds {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:keyIds: ", p), err) }
  return err
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "encryptedSharedKeys", thrift.LIST, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:encryptedSharedKeys: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.EncryptedSharedKeys)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.EncryptedSharedKeys {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:encryptedSharedKeys: ", p), err) }
  return err
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRegisterE2EEGroupKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceRegisterE2EEGroupKeyResult struct {
  Success *E2EEGroupSharedKey `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRegisterE2EEGroupKeyResult() *TalkServiceRegisterE2EEGroupKeyResult {
  return &TalkServiceRegisterE2EEGroupKeyResult{}
}

var TalkServiceRegisterE2EEGroupKeyResult_Success_DEFAULT *E2EEGroupSharedKey
func (p *TalkServiceRegisterE2EEGroupKeyResult) GetSuccess() *E2EEGroupSharedKey {
  if !p.IsSetSuccess() {
    return TalkServiceRegisterE2EEGroupKeyResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceRegisterE2EEGroupKeyResult_E_DEFAULT *TalkException
func (p *TalkServiceRegisterE2EEGroupKeyResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRegisterE2EEGroupKeyResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRegisterE2EEGroupKeyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceRegisterE2EEGroupKeyResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRegisterE2EEGroupKeyResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRegisterE2EEGroupKeyResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &E2EEGroupSharedKey{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceRegisterE2EEGroupKeyResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRegisterE2EEGroupKeyResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "registerE2EEGroupKey_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRegisterE2EEGroupKeyResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceRegisterE2EEGroupKeyResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRegisterE2EEGroupKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRegisterE2EEGroupKeyResult(%+v)", *p)
}

// Attributes:
//  - KeyVersion
//  - ChatMid
//  - GroupKeyId
type TalkServiceGetE2EEGroupSharedKeyArgs struct {
  // unused field # 1
  KeyVersion int32 `thrift:"keyVersion,2" db:"keyVersion" json:"keyVersion"`
  ChatMid string `thrift:"chatMid,3" db:"chatMid" json:"chatMid"`
  GroupKeyId int32 `thrift:"groupKeyId,4" db:"groupKeyId" json:"groupKeyId"`
}

func NewTalkServiceGetE2EEGroupSharedKeyArgs() *TalkServiceGetE2EEGroupSharedKeyArgs {
  return &TalkServiceGetE2EEGroupSharedKeyArgs{}
}


func (p *TalkServiceGetE2EEGroupSharedKeyArgs) GetKeyVersion() int32 {
  return p.KeyVersion
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs) GetChatMid() string {
  return p.ChatMid
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs) GetGroupKeyId() int32 {
  return p.GroupKeyId
}
func (p *TalkServiceGetE2EEGroupSharedKeyArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.KeyVersion = v
}
  return nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.GroupKeyId = v
}
  return nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getE2EEGroupSharedKey_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keyVersion", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:keyVersion: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.KeyVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keyVersion (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:keyVersion: ", p), err) }
  return err
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:chatMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:chatMid: ", p), err) }
  return err
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "groupKeyId", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:groupKeyId: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.GroupKeyId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupKeyId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:groupKeyId: ", p), err) }
  return err
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetE2EEGroupSharedKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetE2EEGroupSharedKeyResult struct {
  Success *E2EEGroupSharedKey `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetE2EEGroupSharedKeyResult() *TalkServiceGetE2EEGroupSharedKeyResult {
  return &TalkServiceGetE2EEGroupSharedKeyResult{}
}

var TalkServiceGetE2EEGroupSharedKeyResult_Success_DEFAULT *E2EEGroupSharedKey
func (p *TalkServiceGetE2EEGroupSharedKeyResult) GetSuccess() *E2EEGroupSharedKey {
  if !p.IsSetSuccess() {
    return TalkServiceGetE2EEGroupSharedKeyResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetE2EEGroupSharedKeyResult_E_DEFAULT *TalkException
func (p *TalkServiceGetE2EEGroupSharedKeyResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetE2EEGroupSharedKeyResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetE2EEGroupSharedKeyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &E2EEGroupSharedKey{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getE2EEGroupSharedKey_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetE2EEGroupSharedKeyResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetE2EEGroupSharedKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetE2EEGroupSharedKeyResult(%+v)", *p)
}

// Attributes:
//  - ChatMid
type TalkServiceGetLastE2EEPublicKeysArgs struct {
  // unused field # 1
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
}

func NewTalkServiceGetLastE2EEPublicKeysArgs() *TalkServiceGetLastE2EEPublicKeysArgs {
  return &TalkServiceGetLastE2EEPublicKeysArgs{}
}


func (p *TalkServiceGetLastE2EEPublicKeysArgs) GetChatMid() string {
  return p.ChatMid
}
func (p *TalkServiceGetLastE2EEPublicKeysArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetLastE2EEPublicKeysArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *TalkServiceGetLastE2EEPublicKeysArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getLastE2EEPublicKeys_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetLastE2EEPublicKeysArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *TalkServiceGetLastE2EEPublicKeysArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetLastE2EEPublicKeysArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetLastE2EEPublicKeysResult struct {
  Success *E2EEPublicKey `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetLastE2EEPublicKeysResult() *TalkServiceGetLastE2EEPublicKeysResult {
  return &TalkServiceGetLastE2EEPublicKeysResult{}
}

var TalkServiceGetLastE2EEPublicKeysResult_Success_DEFAULT *E2EEPublicKey
func (p *TalkServiceGetLastE2EEPublicKeysResult) GetSuccess() *E2EEPublicKey {
  if !p.IsSetSuccess() {
    return TalkServiceGetLastE2EEPublicKeysResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetLastE2EEPublicKeysResult_E_DEFAULT *TalkException
func (p *TalkServiceGetLastE2EEPublicKeysResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetLastE2EEPublicKeysResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetLastE2EEPublicKeysResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetLastE2EEPublicKeysResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetLastE2EEPublicKeysResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetLastE2EEPublicKeysResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &E2EEPublicKey{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetLastE2EEPublicKeysResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetLastE2EEPublicKeysResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getLastE2EEPublicKeys_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetLastE2EEPublicKeysResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetLastE2EEPublicKeysResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetLastE2EEPublicKeysResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetLastE2EEPublicKeysResult(%+v)", *p)
}


