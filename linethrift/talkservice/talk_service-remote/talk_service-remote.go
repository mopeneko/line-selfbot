// Code generated by Thrift Compiler (0.14.1). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	"github.com/apache/thrift/lib/go/thrift"
	"talkservice"
)

var _ = talkservice.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  string unregisterUserAndDevice()")
  fmt.Fprintln(os.Stderr, "  Ticket generateUserTicket(i64 expirationTime, i32 maxUseCount)")
  fmt.Fprintln(os.Stderr, "  void updateProfileAttribute(i32 reqSeq, ProfileAttribute attr, string value)")
  fmt.Fprintln(os.Stderr, "   updateSettingsAttributes2(i32 reqSeq,  attributesToUpdate, Settings settings)")
  fmt.Fprintln(os.Stderr, "   getRecommendationIds(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "   getBlockedRecommendationIds(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "   getAllContactIds(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  Contact getContact(string id)")
  fmt.Fprintln(os.Stderr, "   fetchOps(i64 localRev, i32 count, i64 globalRev, i64 individualRev)")
  fmt.Fprintln(os.Stderr, "  Message sendMessage(i32 seq, Message message)")
  fmt.Fprintln(os.Stderr, "  void sendChatChecked(i32 seq, string chatMid, string lastMessageId, i8 sessionId)")
  fmt.Fprintln(os.Stderr, "  Room getRoom(string roomId)")
  fmt.Fprintln(os.Stderr, "  UpdateChatResponse updateChat(UpdateChatRequest request)")
  fmt.Fprintln(os.Stderr, "  GetChatsResponse getChats(GetChatsRequest request)")
  fmt.Fprintln(os.Stderr, "   getE2EEPublicKeysEx(bool ignoreE2EEStatus, SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  void respondE2EEKeyExchange(i32 reqSeq, string encryptedKeyChain, string hashKeyChain)")
  fmt.Fprintln(os.Stderr, "  E2EEGroupSharedKey getLastE2EEGroupSharedKey(i32 keyVersion, string chatMid)")
  fmt.Fprintln(os.Stderr, "  string verifyQrcode(string verifier, string pinCode)")
  fmt.Fprintln(os.Stderr, "  Configurations getConfigurations(i64 revision, string regionOfUsim, string regionOfTelephone, string regionOfLocale, string carrier, SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  ReissueChatTicketResponse reissueChatTicket(ReissueChatTicketRequest request)")
  fmt.Fprintln(os.Stderr, "  void noop()")
  fmt.Fprintln(os.Stderr, "  i64 getServerTime()")
  fmt.Fprintln(os.Stderr, "  void setNotificationsEnabled(i32 reqSeq, MIDType type, string target, bool enablement)")
  fmt.Fprintln(os.Stderr, "  void requestAccountPasswordReset(IdentityProvider provider, string identifier, string locale)")
  fmt.Fprintln(os.Stderr, "   getCountries(CountryGroup countryGroup)")
  fmt.Fprintln(os.Stderr, "  bool registerUserid(i32 reqSeq, string searchId)")
  fmt.Fprintln(os.Stderr, "  bool isUseridAvailable(string searchId)")
  fmt.Fprintln(os.Stderr, "  Profile getProfile(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  VerificationSessionData startUpdateVerification(string region, CarrierCode carrier, string phone, string udidHash, DeviceInfo deviceInfo, string networkCode, string locale, SIMInfo simInfo)")
  fmt.Fprintln(os.Stderr, "  PhoneVerificationResult verifyPhoneNumber(string sessionId, string pinCode, string udidHash, string migrationPincodeSessionId, string oldUdidHash)")
  fmt.Fprintln(os.Stderr, "  void updateAccountMigrationPincode(string accountMigrationPincode)")
  fmt.Fprintln(os.Stderr, "  void resendPinCode(string sessionId)")
  fmt.Fprintln(os.Stderr, "  VerificationSessionData changeVerificationMethod(string sessionId, VerificationMethod method)")
  fmt.Fprintln(os.Stderr, "  void finishUpdateVerification(string sessionId)")
  fmt.Fprintln(os.Stderr, "  Settings getSettings(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  void blockRecommendation(i32 reqSeq, string id)")
  fmt.Fprintln(os.Stderr, "  void blockContact(i32 reqSeq, string id)")
  fmt.Fprintln(os.Stderr, "  void unblockRecommendation(i32 reqSeq, string id)")
  fmt.Fprintln(os.Stderr, "  void unblockContact(i32 reqSeq, string id, string reference)")
  fmt.Fprintln(os.Stderr, "   findAndAddContactsByMid(i32 reqSeq, string mid, ContactType type, string reference)")
  fmt.Fprintln(os.Stderr, "  Contact findContactByUserid(string searchId)")
  fmt.Fprintln(os.Stderr, "  void inviteFriendsBySms( phoneNumberList)")
  fmt.Fprintln(os.Stderr, "   getContacts( ids)")
  fmt.Fprintln(os.Stderr, "   syncContacts(i32 reqSeq,  localContacts)")
  fmt.Fprintln(os.Stderr, "  void updateContactSetting(i32 reqSeq, string mid, ContactSetting flag, string value)")
  fmt.Fprintln(os.Stderr, "  void sendChatRemoved(i32 seq, string chatMid, string lastMessageId, i8 sessionId)")
  fmt.Fprintln(os.Stderr, "  void leaveRoom(i32 reqSeq, string roomId)")
  fmt.Fprintln(os.Stderr, "  void unsendMessage(i32 seq, string messageId)")
  fmt.Fprintln(os.Stderr, "  void inviteIntoRoom(i32 reqSeq, string roomId,  contactIds)")
  fmt.Fprintln(os.Stderr, "  Room createRoom(i32 reqSeq,  contactIds)")
  fmt.Fprintln(os.Stderr, "  InviteIntoChatResponse inviteIntoChat(InviteIntoChatRequest request)")
  fmt.Fprintln(os.Stderr, "  DeleteSelfFromChatResponse deleteSelfFromChat(DeleteSelfFromChatRequest request)")
  fmt.Fprintln(os.Stderr, "  GetAllChatMidsResponse getAllChatMids(GetAllChatMidsRequest request, SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  CreateChatResponse createChat(CreateChatRequest request)")
  fmt.Fprintln(os.Stderr, "  AcceptChatInvitationResponse acceptChatInvitation(AcceptChatInvitationRequest request)")
  fmt.Fprintln(os.Stderr, "  RejectChatInvitationResponse rejectChatInvitation(RejectChatInvitationRequest request)")
  fmt.Fprintln(os.Stderr, "  DeleteOtherFromChatResponse deleteOtherFromChat(DeleteOtherFromChatRequest request)")
  fmt.Fprintln(os.Stderr, "  CancelChatInvitationResponse cancelChatInvitation(CancelChatInvitationRequest request)")
  fmt.Fprintln(os.Stderr, "   getSessions()")
  fmt.Fprintln(os.Stderr, "  void logoutSession(string tokenKey)")
  fmt.Fprintln(os.Stderr, "  void notifyUpdated(i64 lastRev, DeviceInfo deviceInfo, string udidHash, string oldUdidHash)")
  fmt.Fprintln(os.Stderr, "  void sendEchoPush(string text)")
  fmt.Fprintln(os.Stderr, "  void updateNotificationToken(NotificationType type, string token)")
  fmt.Fprintln(os.Stderr, "  RSAKey getRSAKeyInfo(IdentityProvider provider)")
  fmt.Fprintln(os.Stderr, "   getBlockedContactIds(SyncReason syncReason)")
  fmt.Fprintln(os.Stderr, "  E2EEPublicKey registerE2EEPublicKey(i32 reqSeq, E2EEPublicKey publicKey)")
  fmt.Fprintln(os.Stderr, "  E2EEPublicKey getE2EEPublicKey(string mid, i32 keyVersion, i32 keyId)")
  fmt.Fprintln(os.Stderr, "  E2EENegotiationResult negotiateE2EEPublicKey(string mid)")
  fmt.Fprintln(os.Stderr, "  E2EEGroupSharedKey registerE2EEGroupKey(i32 keyVersion, string chatMid,  members,  keyIds,  encryptedSharedKeys)")
  fmt.Fprintln(os.Stderr, "  E2EEGroupSharedKey getE2EEGroupSharedKey(i32 keyVersion, string chatMid, i32 groupKeyId)")
  fmt.Fprintln(os.Stderr, "  E2EEPublicKey getLastE2EEPublicKeys(string chatMid)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := talkservice.NewTalkServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "unregisterUserAndDevice":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "UnregisterUserAndDevice requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.UnregisterUserAndDevice(context.Background()))
    fmt.Print("\n")
    break
  case "generateUserTicket":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GenerateUserTicket requires 2 args")
      flag.Usage()
    }
    argvalue0, err296 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err296 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err297 := (strconv.Atoi(flag.Arg(2)))
    if err297 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GenerateUserTicket(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateProfileAttribute":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateProfileAttribute requires 3 args")
      flag.Usage()
    }
    tmp0, err298 := (strconv.Atoi(flag.Arg(1)))
    if err298 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := talkservice.ProfileAttribute(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.UpdateProfileAttribute(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "updateSettingsAttributes2":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateSettingsAttributes2 requires 3 args")
      flag.Usage()
    }
    tmp0, err300 := (strconv.Atoi(flag.Arg(1)))
    if err300 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg301 := flag.Arg(2)
    mbTrans302 := thrift.NewTMemoryBufferLen(len(arg301))
    defer mbTrans302.Close()
    _, err303 := mbTrans302.WriteString(arg301)
    if err303 != nil { 
      Usage()
      return
    }
    factory304 := thrift.NewTJSONProtocolFactory()
    jsProt305 := factory304.GetProtocol(mbTrans302)
    containerStruct1 := talkservice.NewTalkServiceUpdateSettingsAttributes2Args()
    err306 := containerStruct1.ReadField2(context.Background(), jsProt305)
    if err306 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.AttributesToUpdate
    value1 := argvalue1
    arg307 := flag.Arg(3)
    mbTrans308 := thrift.NewTMemoryBufferLen(len(arg307))
    defer mbTrans308.Close()
    _, err309 := mbTrans308.WriteString(arg307)
    if err309 != nil {
      Usage()
      return
    }
    factory310 := thrift.NewTJSONProtocolFactory()
    jsProt311 := factory310.GetProtocol(mbTrans308)
    argvalue2 := talkservice.NewSettings()
    err312 := argvalue2.Read(context.Background(), jsProt311)
    if err312 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.UpdateSettingsAttributes2(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getRecommendationIds":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetRecommendationIds requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetRecommendationIds(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getBlockedRecommendationIds":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetBlockedRecommendationIds requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetBlockedRecommendationIds(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getAllContactIds":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAllContactIds requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetAllContactIds(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getContact":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetContact requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetContact(context.Background(), value0))
    fmt.Print("\n")
    break
  case "fetchOps":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "FetchOps requires 4 args")
      flag.Usage()
    }
    argvalue0, err314 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err314 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err315 := (strconv.Atoi(flag.Arg(2)))
    if err315 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    argvalue2, err316 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err316 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3, err317 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err317 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.FetchOps(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "sendMessage":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SendMessage requires 2 args")
      flag.Usage()
    }
    tmp0, err318 := (strconv.Atoi(flag.Arg(1)))
    if err318 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg319 := flag.Arg(2)
    mbTrans320 := thrift.NewTMemoryBufferLen(len(arg319))
    defer mbTrans320.Close()
    _, err321 := mbTrans320.WriteString(arg319)
    if err321 != nil {
      Usage()
      return
    }
    factory322 := thrift.NewTJSONProtocolFactory()
    jsProt323 := factory322.GetProtocol(mbTrans320)
    argvalue1 := talkservice.NewMessage()
    err324 := argvalue1.Read(context.Background(), jsProt323)
    if err324 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SendMessage(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sendChatChecked":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SendChatChecked requires 4 args")
      flag.Usage()
    }
    tmp0, err325 := (strconv.Atoi(flag.Arg(1)))
    if err325 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    tmp3, err328 := (strconv.Atoi(flag.Arg(4)))
    if err328 != nil {
      Usage()
      return
    }
    argvalue3 := int8(tmp3)
    value3 := argvalue3
    fmt.Print(client.SendChatChecked(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getRoom":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetRoom requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetRoom(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updateChat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateChat requires 1 args")
      flag.Usage()
    }
    arg330 := flag.Arg(1)
    mbTrans331 := thrift.NewTMemoryBufferLen(len(arg330))
    defer mbTrans331.Close()
    _, err332 := mbTrans331.WriteString(arg330)
    if err332 != nil {
      Usage()
      return
    }
    factory333 := thrift.NewTJSONProtocolFactory()
    jsProt334 := factory333.GetProtocol(mbTrans331)
    argvalue0 := talkservice.NewUpdateChatRequest()
    err335 := argvalue0.Read(context.Background(), jsProt334)
    if err335 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdateChat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getChats":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetChats requires 1 args")
      flag.Usage()
    }
    arg336 := flag.Arg(1)
    mbTrans337 := thrift.NewTMemoryBufferLen(len(arg336))
    defer mbTrans337.Close()
    _, err338 := mbTrans337.WriteString(arg336)
    if err338 != nil {
      Usage()
      return
    }
    factory339 := thrift.NewTJSONProtocolFactory()
    jsProt340 := factory339.GetProtocol(mbTrans337)
    argvalue0 := talkservice.NewGetChatsRequest()
    err341 := argvalue0.Read(context.Background(), jsProt340)
    if err341 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetChats(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getE2EEPublicKeysEx":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetE2EEPublicKeysEx requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := talkservice.SyncReason(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetE2EEPublicKeysEx(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "respondE2EEKeyExchange":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "RespondE2EEKeyExchange requires 3 args")
      flag.Usage()
    }
    tmp0, err343 := (strconv.Atoi(flag.Arg(1)))
    if err343 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.RespondE2EEKeyExchange(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getLastE2EEGroupSharedKey":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetLastE2EEGroupSharedKey requires 2 args")
      flag.Usage()
    }
    tmp0, err346 := (strconv.Atoi(flag.Arg(1)))
    if err346 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetLastE2EEGroupSharedKey(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "verifyQrcode":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "VerifyQrcode requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.VerifyQrcode(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getConfigurations":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "GetConfigurations requires 6 args")
      flag.Usage()
    }
    argvalue0, err350 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err350 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    tmp5, err := (strconv.Atoi(flag.Arg(6)))
    if err != nil {
      Usage()
     return
    }
    argvalue5 := talkservice.SyncReason(tmp5)
    value5 := argvalue5
    fmt.Print(client.GetConfigurations(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "reissueChatTicket":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ReissueChatTicket requires 1 args")
      flag.Usage()
    }
    arg355 := flag.Arg(1)
    mbTrans356 := thrift.NewTMemoryBufferLen(len(arg355))
    defer mbTrans356.Close()
    _, err357 := mbTrans356.WriteString(arg355)
    if err357 != nil {
      Usage()
      return
    }
    factory358 := thrift.NewTJSONProtocolFactory()
    jsProt359 := factory358.GetProtocol(mbTrans356)
    argvalue0 := talkservice.NewReissueChatTicketRequest()
    err360 := argvalue0.Read(context.Background(), jsProt359)
    if err360 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ReissueChatTicket(context.Background(), value0))
    fmt.Print("\n")
    break
  case "noop":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "Noop requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.Noop(context.Background()))
    fmt.Print("\n")
    break
  case "getServerTime":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetServerTime requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetServerTime(context.Background()))
    fmt.Print("\n")
    break
  case "setNotificationsEnabled":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SetNotificationsEnabled requires 4 args")
      flag.Usage()
    }
    tmp0, err361 := (strconv.Atoi(flag.Arg(1)))
    if err361 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := talkservice.MIDType(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.SetNotificationsEnabled(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "requestAccountPasswordReset":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "RequestAccountPasswordReset requires 3 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.IdentityProvider(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.RequestAccountPasswordReset(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getCountries":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetCountries requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.CountryGroup(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetCountries(context.Background(), value0))
    fmt.Print("\n")
    break
  case "registerUserid":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RegisterUserid requires 2 args")
      flag.Usage()
    }
    tmp0, err366 := (strconv.Atoi(flag.Arg(1)))
    if err366 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RegisterUserid(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "isUseridAvailable":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsUseridAvailable requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.IsUseridAvailable(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getProfile":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetProfile requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetProfile(context.Background(), value0))
    fmt.Print("\n")
    break
  case "startUpdateVerification":
    if flag.NArg() - 1 != 8 {
      fmt.Fprintln(os.Stderr, "StartUpdateVerification requires 8 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := talkservice.CarrierCode(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    arg372 := flag.Arg(5)
    mbTrans373 := thrift.NewTMemoryBufferLen(len(arg372))
    defer mbTrans373.Close()
    _, err374 := mbTrans373.WriteString(arg372)
    if err374 != nil {
      Usage()
      return
    }
    factory375 := thrift.NewTJSONProtocolFactory()
    jsProt376 := factory375.GetProtocol(mbTrans373)
    argvalue4 := talkservice.NewDeviceInfo()
    err377 := argvalue4.Read(context.Background(), jsProt376)
    if err377 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    argvalue5 := flag.Arg(6)
    value5 := argvalue5
    argvalue6 := flag.Arg(7)
    value6 := argvalue6
    arg380 := flag.Arg(8)
    mbTrans381 := thrift.NewTMemoryBufferLen(len(arg380))
    defer mbTrans381.Close()
    _, err382 := mbTrans381.WriteString(arg380)
    if err382 != nil {
      Usage()
      return
    }
    factory383 := thrift.NewTJSONProtocolFactory()
    jsProt384 := factory383.GetProtocol(mbTrans381)
    argvalue7 := talkservice.NewSIMInfo()
    err385 := argvalue7.Read(context.Background(), jsProt384)
    if err385 != nil {
      Usage()
      return
    }
    value7 := argvalue7
    fmt.Print(client.StartUpdateVerification(context.Background(), value0, value1, value2, value3, value4, value5, value6, value7))
    fmt.Print("\n")
    break
  case "verifyPhoneNumber":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "VerifyPhoneNumber requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    fmt.Print(client.VerifyPhoneNumber(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "updateAccountMigrationPincode":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateAccountMigrationPincode requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.UpdateAccountMigrationPincode(context.Background(), value0))
    fmt.Print("\n")
    break
  case "resendPinCode":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ResendPinCode requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.ResendPinCode(context.Background(), value0))
    fmt.Print("\n")
    break
  case "changeVerificationMethod":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ChangeVerificationMethod requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := talkservice.VerificationMethod(tmp1)
    value1 := argvalue1
    fmt.Print(client.ChangeVerificationMethod(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "finishUpdateVerification":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FinishUpdateVerification requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.FinishUpdateVerification(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getSettings":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSettings requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetSettings(context.Background(), value0))
    fmt.Print("\n")
    break
  case "blockRecommendation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "BlockRecommendation requires 2 args")
      flag.Usage()
    }
    tmp0, err395 := (strconv.Atoi(flag.Arg(1)))
    if err395 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.BlockRecommendation(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "blockContact":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "BlockContact requires 2 args")
      flag.Usage()
    }
    tmp0, err397 := (strconv.Atoi(flag.Arg(1)))
    if err397 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.BlockContact(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "unblockRecommendation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UnblockRecommendation requires 2 args")
      flag.Usage()
    }
    tmp0, err399 := (strconv.Atoi(flag.Arg(1)))
    if err399 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UnblockRecommendation(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "unblockContact":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UnblockContact requires 3 args")
      flag.Usage()
    }
    tmp0, err401 := (strconv.Atoi(flag.Arg(1)))
    if err401 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.UnblockContact(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "findAndAddContactsByMid":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "FindAndAddContactsByMid requires 4 args")
      flag.Usage()
    }
    tmp0, err404 := (strconv.Atoi(flag.Arg(1)))
    if err404 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := talkservice.ContactType(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.FindAndAddContactsByMid(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "findContactByUserid":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindContactByUserid requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.FindContactByUserid(context.Background(), value0))
    fmt.Print("\n")
    break
  case "inviteFriendsBySms":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "InviteFriendsBySms requires 1 args")
      flag.Usage()
    }
    arg408 := flag.Arg(1)
    mbTrans409 := thrift.NewTMemoryBufferLen(len(arg408))
    defer mbTrans409.Close()
    _, err410 := mbTrans409.WriteString(arg408)
    if err410 != nil { 
      Usage()
      return
    }
    factory411 := thrift.NewTJSONProtocolFactory()
    jsProt412 := factory411.GetProtocol(mbTrans409)
    containerStruct0 := talkservice.NewTalkServiceInviteFriendsBySmsArgs()
    err413 := containerStruct0.ReadField1(context.Background(), jsProt412)
    if err413 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.PhoneNumberList
    value0 := argvalue0
    fmt.Print(client.InviteFriendsBySms(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getContacts":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetContacts requires 1 args")
      flag.Usage()
    }
    arg414 := flag.Arg(1)
    mbTrans415 := thrift.NewTMemoryBufferLen(len(arg414))
    defer mbTrans415.Close()
    _, err416 := mbTrans415.WriteString(arg414)
    if err416 != nil { 
      Usage()
      return
    }
    factory417 := thrift.NewTJSONProtocolFactory()
    jsProt418 := factory417.GetProtocol(mbTrans415)
    containerStruct0 := talkservice.NewTalkServiceGetContactsArgs()
    err419 := containerStruct0.ReadField1(context.Background(), jsProt418)
    if err419 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Ids
    value0 := argvalue0
    fmt.Print(client.GetContacts(context.Background(), value0))
    fmt.Print("\n")
    break
  case "syncContacts":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SyncContacts requires 2 args")
      flag.Usage()
    }
    tmp0, err420 := (strconv.Atoi(flag.Arg(1)))
    if err420 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg421 := flag.Arg(2)
    mbTrans422 := thrift.NewTMemoryBufferLen(len(arg421))
    defer mbTrans422.Close()
    _, err423 := mbTrans422.WriteString(arg421)
    if err423 != nil { 
      Usage()
      return
    }
    factory424 := thrift.NewTJSONProtocolFactory()
    jsProt425 := factory424.GetProtocol(mbTrans422)
    containerStruct1 := talkservice.NewTalkServiceSyncContactsArgs()
    err426 := containerStruct1.ReadField2(context.Background(), jsProt425)
    if err426 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.LocalContacts
    value1 := argvalue1
    fmt.Print(client.SyncContacts(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateContactSetting":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "UpdateContactSetting requires 4 args")
      flag.Usage()
    }
    tmp0, err427 := (strconv.Atoi(flag.Arg(1)))
    if err427 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := talkservice.ContactSetting(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.UpdateContactSetting(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "sendChatRemoved":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SendChatRemoved requires 4 args")
      flag.Usage()
    }
    tmp0, err430 := (strconv.Atoi(flag.Arg(1)))
    if err430 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    tmp3, err433 := (strconv.Atoi(flag.Arg(4)))
    if err433 != nil {
      Usage()
      return
    }
    argvalue3 := int8(tmp3)
    value3 := argvalue3
    fmt.Print(client.SendChatRemoved(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "leaveRoom":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "LeaveRoom requires 2 args")
      flag.Usage()
    }
    tmp0, err434 := (strconv.Atoi(flag.Arg(1)))
    if err434 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.LeaveRoom(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "unsendMessage":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UnsendMessage requires 2 args")
      flag.Usage()
    }
    tmp0, err436 := (strconv.Atoi(flag.Arg(1)))
    if err436 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UnsendMessage(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "inviteIntoRoom":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "InviteIntoRoom requires 3 args")
      flag.Usage()
    }
    tmp0, err438 := (strconv.Atoi(flag.Arg(1)))
    if err438 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg440 := flag.Arg(3)
    mbTrans441 := thrift.NewTMemoryBufferLen(len(arg440))
    defer mbTrans441.Close()
    _, err442 := mbTrans441.WriteString(arg440)
    if err442 != nil { 
      Usage()
      return
    }
    factory443 := thrift.NewTJSONProtocolFactory()
    jsProt444 := factory443.GetProtocol(mbTrans441)
    containerStruct2 := talkservice.NewTalkServiceInviteIntoRoomArgs()
    err445 := containerStruct2.ReadField3(context.Background(), jsProt444)
    if err445 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ContactIds
    value2 := argvalue2
    fmt.Print(client.InviteIntoRoom(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "createRoom":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CreateRoom requires 2 args")
      flag.Usage()
    }
    tmp0, err446 := (strconv.Atoi(flag.Arg(1)))
    if err446 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg447 := flag.Arg(2)
    mbTrans448 := thrift.NewTMemoryBufferLen(len(arg447))
    defer mbTrans448.Close()
    _, err449 := mbTrans448.WriteString(arg447)
    if err449 != nil { 
      Usage()
      return
    }
    factory450 := thrift.NewTJSONProtocolFactory()
    jsProt451 := factory450.GetProtocol(mbTrans448)
    containerStruct1 := talkservice.NewTalkServiceCreateRoomArgs()
    err452 := containerStruct1.ReadField2(context.Background(), jsProt451)
    if err452 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.ContactIds
    value1 := argvalue1
    fmt.Print(client.CreateRoom(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "inviteIntoChat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "InviteIntoChat requires 1 args")
      flag.Usage()
    }
    arg453 := flag.Arg(1)
    mbTrans454 := thrift.NewTMemoryBufferLen(len(arg453))
    defer mbTrans454.Close()
    _, err455 := mbTrans454.WriteString(arg453)
    if err455 != nil {
      Usage()
      return
    }
    factory456 := thrift.NewTJSONProtocolFactory()
    jsProt457 := factory456.GetProtocol(mbTrans454)
    argvalue0 := talkservice.NewInviteIntoChatRequest()
    err458 := argvalue0.Read(context.Background(), jsProt457)
    if err458 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.InviteIntoChat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "deleteSelfFromChat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DeleteSelfFromChat requires 1 args")
      flag.Usage()
    }
    arg459 := flag.Arg(1)
    mbTrans460 := thrift.NewTMemoryBufferLen(len(arg459))
    defer mbTrans460.Close()
    _, err461 := mbTrans460.WriteString(arg459)
    if err461 != nil {
      Usage()
      return
    }
    factory462 := thrift.NewTJSONProtocolFactory()
    jsProt463 := factory462.GetProtocol(mbTrans460)
    argvalue0 := talkservice.NewDeleteSelfFromChatRequest()
    err464 := argvalue0.Read(context.Background(), jsProt463)
    if err464 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DeleteSelfFromChat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getAllChatMids":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetAllChatMids requires 2 args")
      flag.Usage()
    }
    arg465 := flag.Arg(1)
    mbTrans466 := thrift.NewTMemoryBufferLen(len(arg465))
    defer mbTrans466.Close()
    _, err467 := mbTrans466.WriteString(arg465)
    if err467 != nil {
      Usage()
      return
    }
    factory468 := thrift.NewTJSONProtocolFactory()
    jsProt469 := factory468.GetProtocol(mbTrans466)
    argvalue0 := talkservice.NewGetAllChatMidsRequest()
    err470 := argvalue0.Read(context.Background(), jsProt469)
    if err470 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := talkservice.SyncReason(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetAllChatMids(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "createChat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateChat requires 1 args")
      flag.Usage()
    }
    arg471 := flag.Arg(1)
    mbTrans472 := thrift.NewTMemoryBufferLen(len(arg471))
    defer mbTrans472.Close()
    _, err473 := mbTrans472.WriteString(arg471)
    if err473 != nil {
      Usage()
      return
    }
    factory474 := thrift.NewTJSONProtocolFactory()
    jsProt475 := factory474.GetProtocol(mbTrans472)
    argvalue0 := talkservice.NewCreateChatRequest()
    err476 := argvalue0.Read(context.Background(), jsProt475)
    if err476 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateChat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "acceptChatInvitation":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AcceptChatInvitation requires 1 args")
      flag.Usage()
    }
    arg477 := flag.Arg(1)
    mbTrans478 := thrift.NewTMemoryBufferLen(len(arg477))
    defer mbTrans478.Close()
    _, err479 := mbTrans478.WriteString(arg477)
    if err479 != nil {
      Usage()
      return
    }
    factory480 := thrift.NewTJSONProtocolFactory()
    jsProt481 := factory480.GetProtocol(mbTrans478)
    argvalue0 := talkservice.NewAcceptChatInvitationRequest()
    err482 := argvalue0.Read(context.Background(), jsProt481)
    if err482 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AcceptChatInvitation(context.Background(), value0))
    fmt.Print("\n")
    break
  case "rejectChatInvitation":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RejectChatInvitation requires 1 args")
      flag.Usage()
    }
    arg483 := flag.Arg(1)
    mbTrans484 := thrift.NewTMemoryBufferLen(len(arg483))
    defer mbTrans484.Close()
    _, err485 := mbTrans484.WriteString(arg483)
    if err485 != nil {
      Usage()
      return
    }
    factory486 := thrift.NewTJSONProtocolFactory()
    jsProt487 := factory486.GetProtocol(mbTrans484)
    argvalue0 := talkservice.NewRejectChatInvitationRequest()
    err488 := argvalue0.Read(context.Background(), jsProt487)
    if err488 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RejectChatInvitation(context.Background(), value0))
    fmt.Print("\n")
    break
  case "deleteOtherFromChat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DeleteOtherFromChat requires 1 args")
      flag.Usage()
    }
    arg489 := flag.Arg(1)
    mbTrans490 := thrift.NewTMemoryBufferLen(len(arg489))
    defer mbTrans490.Close()
    _, err491 := mbTrans490.WriteString(arg489)
    if err491 != nil {
      Usage()
      return
    }
    factory492 := thrift.NewTJSONProtocolFactory()
    jsProt493 := factory492.GetProtocol(mbTrans490)
    argvalue0 := talkservice.NewDeleteOtherFromChatRequest()
    err494 := argvalue0.Read(context.Background(), jsProt493)
    if err494 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DeleteOtherFromChat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "cancelChatInvitation":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CancelChatInvitation requires 1 args")
      flag.Usage()
    }
    arg495 := flag.Arg(1)
    mbTrans496 := thrift.NewTMemoryBufferLen(len(arg495))
    defer mbTrans496.Close()
    _, err497 := mbTrans496.WriteString(arg495)
    if err497 != nil {
      Usage()
      return
    }
    factory498 := thrift.NewTJSONProtocolFactory()
    jsProt499 := factory498.GetProtocol(mbTrans496)
    argvalue0 := talkservice.NewCancelChatInvitationRequest()
    err500 := argvalue0.Read(context.Background(), jsProt499)
    if err500 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CancelChatInvitation(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getSessions":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetSessions requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetSessions(context.Background()))
    fmt.Print("\n")
    break
  case "logoutSession":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "LogoutSession requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.LogoutSession(context.Background(), value0))
    fmt.Print("\n")
    break
  case "notifyUpdated":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "NotifyUpdated requires 4 args")
      flag.Usage()
    }
    argvalue0, err502 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err502 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg503 := flag.Arg(2)
    mbTrans504 := thrift.NewTMemoryBufferLen(len(arg503))
    defer mbTrans504.Close()
    _, err505 := mbTrans504.WriteString(arg503)
    if err505 != nil {
      Usage()
      return
    }
    factory506 := thrift.NewTJSONProtocolFactory()
    jsProt507 := factory506.GetProtocol(mbTrans504)
    argvalue1 := talkservice.NewDeviceInfo()
    err508 := argvalue1.Read(context.Background(), jsProt507)
    if err508 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.NotifyUpdated(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "sendEchoPush":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SendEchoPush requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.SendEchoPush(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updateNotificationToken":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateNotificationToken requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.NotificationType(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UpdateNotificationToken(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getRSAKeyInfo":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetRSAKeyInfo requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.IdentityProvider(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetRSAKeyInfo(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getBlockedContactIds":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetBlockedContactIds requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := talkservice.SyncReason(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetBlockedContactIds(context.Background(), value0))
    fmt.Print("\n")
    break
  case "registerE2EEPublicKey":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RegisterE2EEPublicKey requires 2 args")
      flag.Usage()
    }
    tmp0, err513 := (strconv.Atoi(flag.Arg(1)))
    if err513 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg514 := flag.Arg(2)
    mbTrans515 := thrift.NewTMemoryBufferLen(len(arg514))
    defer mbTrans515.Close()
    _, err516 := mbTrans515.WriteString(arg514)
    if err516 != nil {
      Usage()
      return
    }
    factory517 := thrift.NewTJSONProtocolFactory()
    jsProt518 := factory517.GetProtocol(mbTrans515)
    argvalue1 := talkservice.NewE2EEPublicKey()
    err519 := argvalue1.Read(context.Background(), jsProt518)
    if err519 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RegisterE2EEPublicKey(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getE2EEPublicKey":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetE2EEPublicKey requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err521 := (strconv.Atoi(flag.Arg(2)))
    if err521 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    tmp2, err522 := (strconv.Atoi(flag.Arg(3)))
    if err522 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetE2EEPublicKey(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "negotiateE2EEPublicKey":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "NegotiateE2EEPublicKey requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.NegotiateE2EEPublicKey(context.Background(), value0))
    fmt.Print("\n")
    break
  case "registerE2EEGroupKey":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "RegisterE2EEGroupKey requires 5 args")
      flag.Usage()
    }
    tmp0, err524 := (strconv.Atoi(flag.Arg(1)))
    if err524 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg526 := flag.Arg(3)
    mbTrans527 := thrift.NewTMemoryBufferLen(len(arg526))
    defer mbTrans527.Close()
    _, err528 := mbTrans527.WriteString(arg526)
    if err528 != nil { 
      Usage()
      return
    }
    factory529 := thrift.NewTJSONProtocolFactory()
    jsProt530 := factory529.GetProtocol(mbTrans527)
    containerStruct2 := talkservice.NewTalkServiceRegisterE2EEGroupKeyArgs()
    err531 := containerStruct2.ReadField3(context.Background(), jsProt530)
    if err531 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Members
    value2 := argvalue2
    arg532 := flag.Arg(4)
    mbTrans533 := thrift.NewTMemoryBufferLen(len(arg532))
    defer mbTrans533.Close()
    _, err534 := mbTrans533.WriteString(arg532)
    if err534 != nil { 
      Usage()
      return
    }
    factory535 := thrift.NewTJSONProtocolFactory()
    jsProt536 := factory535.GetProtocol(mbTrans533)
    containerStruct3 := talkservice.NewTalkServiceRegisterE2EEGroupKeyArgs()
    err537 := containerStruct3.ReadField4(context.Background(), jsProt536)
    if err537 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.KeyIds
    value3 := argvalue3
    arg538 := flag.Arg(5)
    mbTrans539 := thrift.NewTMemoryBufferLen(len(arg538))
    defer mbTrans539.Close()
    _, err540 := mbTrans539.WriteString(arg538)
    if err540 != nil { 
      Usage()
      return
    }
    factory541 := thrift.NewTJSONProtocolFactory()
    jsProt542 := factory541.GetProtocol(mbTrans539)
    containerStruct4 := talkservice.NewTalkServiceRegisterE2EEGroupKeyArgs()
    err543 := containerStruct4.ReadField5(context.Background(), jsProt542)
    if err543 != nil {
      Usage()
      return
    }
    argvalue4 := containerStruct4.EncryptedSharedKeys
    value4 := argvalue4
    fmt.Print(client.RegisterE2EEGroupKey(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "getE2EEGroupSharedKey":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetE2EEGroupSharedKey requires 3 args")
      flag.Usage()
    }
    tmp0, err544 := (strconv.Atoi(flag.Arg(1)))
    if err544 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err546 := (strconv.Atoi(flag.Arg(3)))
    if err546 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetE2EEGroupSharedKey(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getLastE2EEPublicKeys":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetLastE2EEPublicKeys requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetLastE2EEPublicKeys(context.Background(), value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
