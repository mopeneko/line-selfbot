// Code generated by Thrift Compiler (0.14.1). DO NOT EDIT.

package callservice

import(
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"time"
	"github.com/apache/thrift/lib/go/thrift"
	"talkservice"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

var _ = talkservice.GoUnusedProtection__
type CallFlowType int64
const (
  CallFlowType_NEW CallFlowType = 1
  CallFlowType_PLANET CallFlowType = 2
)

func (p CallFlowType) String() string {
  switch p {
  case CallFlowType_NEW: return "NEW"
  case CallFlowType_PLANET: return "PLANET"
  }
  return "<UNSET>"
}

func CallFlowTypeFromString(s string) (CallFlowType, error) {
  switch s {
  case "NEW": return CallFlowType_NEW, nil 
  case "PLANET": return CallFlowType_PLANET, nil 
  }
  return CallFlowType(0), fmt.Errorf("not a valid CallFlowType string")
}


func CallFlowTypePtr(v CallFlowType) *CallFlowType { return &v }

func (p CallFlowType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *CallFlowType) UnmarshalText(text []byte) error {
q, err := CallFlowTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *CallFlowType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = CallFlowType(v)
return nil
}

func (p * CallFlowType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type FreeCallType int64
const (
  FreeCallType_AUDIO FreeCallType = 1
  FreeCallType_VIDEO FreeCallType = 2
  FreeCallType_FACEPLAY FreeCallType = 3
)

func (p FreeCallType) String() string {
  switch p {
  case FreeCallType_AUDIO: return "AUDIO"
  case FreeCallType_VIDEO: return "VIDEO"
  case FreeCallType_FACEPLAY: return "FACEPLAY"
  }
  return "<UNSET>"
}

func FreeCallTypeFromString(s string) (FreeCallType, error) {
  switch s {
  case "AUDIO": return FreeCallType_AUDIO, nil 
  case "VIDEO": return FreeCallType_VIDEO, nil 
  case "FACEPLAY": return FreeCallType_FACEPLAY, nil 
  }
  return FreeCallType(0), fmt.Errorf("not a valid FreeCallType string")
}


func FreeCallTypePtr(v FreeCallType) *FreeCallType { return &v }

func (p FreeCallType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *FreeCallType) UnmarshalText(text []byte) error {
q, err := FreeCallTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *FreeCallType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = FreeCallType(v)
return nil
}

func (p * FreeCallType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type GroupCallProtocol int64
const (
  GroupCallProtocol_STANDARD GroupCallProtocol = 1
  GroupCallProtocol_CONSTELLA GroupCallProtocol = 2
)

func (p GroupCallProtocol) String() string {
  switch p {
  case GroupCallProtocol_STANDARD: return "STANDARD"
  case GroupCallProtocol_CONSTELLA: return "CONSTELLA"
  }
  return "<UNSET>"
}

func GroupCallProtocolFromString(s string) (GroupCallProtocol, error) {
  switch s {
  case "STANDARD": return GroupCallProtocol_STANDARD, nil 
  case "CONSTELLA": return GroupCallProtocol_CONSTELLA, nil 
  }
  return GroupCallProtocol(0), fmt.Errorf("not a valid GroupCallProtocol string")
}


func GroupCallProtocolPtr(v GroupCallProtocol) *GroupCallProtocol { return &v }

func (p GroupCallProtocol) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *GroupCallProtocol) UnmarshalText(text []byte) error {
q, err := GroupCallProtocolFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *GroupCallProtocol) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = GroupCallProtocol(v)
return nil
}

func (p * GroupCallProtocol) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type GroupCallMediaType int64
const (
  GroupCallMediaType_AUDIO GroupCallMediaType = 1
  GroupCallMediaType_VIDEO GroupCallMediaType = 2
  GroupCallMediaType_LIVE GroupCallMediaType = 3
)

func (p GroupCallMediaType) String() string {
  switch p {
  case GroupCallMediaType_AUDIO: return "AUDIO"
  case GroupCallMediaType_VIDEO: return "VIDEO"
  case GroupCallMediaType_LIVE: return "LIVE"
  }
  return "<UNSET>"
}

func GroupCallMediaTypeFromString(s string) (GroupCallMediaType, error) {
  switch s {
  case "AUDIO": return GroupCallMediaType_AUDIO, nil 
  case "VIDEO": return GroupCallMediaType_VIDEO, nil 
  case "LIVE": return GroupCallMediaType_LIVE, nil 
  }
  return GroupCallMediaType(0), fmt.Errorf("not a valid GroupCallMediaType string")
}


func GroupCallMediaTypePtr(v GroupCallMediaType) *GroupCallMediaType { return &v }

func (p GroupCallMediaType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *GroupCallMediaType) UnmarshalText(text []byte) error {
q, err := GroupCallMediaTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *GroupCallMediaType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = GroupCallMediaType(v)
return nil
}

func (p * GroupCallMediaType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - ToMid
//  - Tunneling
//  - CommParam
//  - FromToken
//  - CallFlowType
//  - VoipAddress
//  - VoipUdpPort
//  - VoipTcpPort
//  - FromZone
//  - ToZone
//  - FakeCall
//  - RingbackTone
type CallRoute struct {
  FromToken string `thrift:"fromToken,1" db:"fromToken" json:"fromToken"`
  CallFlowType CallFlowType `thrift:"callFlowType,2" db:"callFlowType" json:"callFlowType"`
  VoipAddress string `thrift:"voipAddress,3" db:"voipAddress" json:"voipAddress"`
  VoipUdpPort int32 `thrift:"voipUdpPort,4" db:"voipUdpPort" json:"voipUdpPort"`
  VoipTcpPort int32 `thrift:"voipTcpPort,5" db:"voipTcpPort" json:"voipTcpPort"`
  FromZone string `thrift:"fromZone,6" db:"fromZone" json:"fromZone"`
  ToZone string `thrift:"toZone,7" db:"toZone" json:"toZone"`
  FakeCall bool `thrift:"fakeCall,8" db:"fakeCall" json:"fakeCall"`
  RingbackTone string `thrift:"ringbackTone,9" db:"ringbackTone" json:"ringbackTone"`
  ToMid string `thrift:"toMid,10" db:"toMid" json:"toMid"`
  Tunneling string `thrift:"tunneling,11" db:"tunneling" json:"tunneling"`
  CommParam string `thrift:"commParam,12" db:"commParam" json:"commParam"`
}

func NewCallRoute() *CallRoute {
  return &CallRoute{}
}


func (p *CallRoute) GetToMid() string {
  return p.ToMid
}

func (p *CallRoute) GetTunneling() string {
  return p.Tunneling
}

func (p *CallRoute) GetCommParam() string {
  return p.CommParam
}

func (p *CallRoute) GetFromToken() string {
  return p.FromToken
}

func (p *CallRoute) GetCallFlowType() CallFlowType {
  return p.CallFlowType
}

func (p *CallRoute) GetVoipAddress() string {
  return p.VoipAddress
}

func (p *CallRoute) GetVoipUdpPort() int32 {
  return p.VoipUdpPort
}

func (p *CallRoute) GetVoipTcpPort() int32 {
  return p.VoipTcpPort
}

func (p *CallRoute) GetFromZone() string {
  return p.FromZone
}

func (p *CallRoute) GetToZone() string {
  return p.ToZone
}

func (p *CallRoute) GetFakeCall() bool {
  return p.FakeCall
}

func (p *CallRoute) GetRingbackTone() string {
  return p.RingbackTone
}
func (p *CallRoute) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CallRoute)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.ToMid = v
}
  return nil
}

func (p *CallRoute)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Tunneling = v
}
  return nil
}

func (p *CallRoute)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.CommParam = v
}
  return nil
}

func (p *CallRoute)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.FromToken = v
}
  return nil
}

func (p *CallRoute)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := CallFlowType(v)
  p.CallFlowType = temp
}
  return nil
}

func (p *CallRoute)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.VoipAddress = v
}
  return nil
}

func (p *CallRoute)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.VoipUdpPort = v
}
  return nil
}

func (p *CallRoute)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.VoipTcpPort = v
}
  return nil
}

func (p *CallRoute)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.FromZone = v
}
  return nil
}

func (p *CallRoute)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.ToZone = v
}
  return nil
}

func (p *CallRoute)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.FakeCall = v
}
  return nil
}

func (p *CallRoute)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.RingbackTone = v
}
  return nil
}

func (p *CallRoute) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CallRoute"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CallRoute) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fromToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fromToken: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.FromToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fromToken: ", p), err) }
  return err
}

func (p *CallRoute) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "callFlowType", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:callFlowType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.CallFlowType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.callFlowType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:callFlowType: ", p), err) }
  return err
}

func (p *CallRoute) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "voipAddress", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:voipAddress: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.VoipAddress)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.voipAddress (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:voipAddress: ", p), err) }
  return err
}

func (p *CallRoute) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "voipUdpPort", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:voipUdpPort: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VoipUdpPort)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.voipUdpPort (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:voipUdpPort: ", p), err) }
  return err
}

func (p *CallRoute) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "voipTcpPort", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:voipTcpPort: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VoipTcpPort)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.voipTcpPort (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:voipTcpPort: ", p), err) }
  return err
}

func (p *CallRoute) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fromZone", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:fromZone: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.FromZone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromZone (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:fromZone: ", p), err) }
  return err
}

func (p *CallRoute) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "toZone", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:toZone: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ToZone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.toZone (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:toZone: ", p), err) }
  return err
}

func (p *CallRoute) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fakeCall", thrift.BOOL, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:fakeCall: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.FakeCall)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fakeCall (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:fakeCall: ", p), err) }
  return err
}

func (p *CallRoute) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ringbackTone", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:ringbackTone: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RingbackTone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ringbackTone (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:ringbackTone: ", p), err) }
  return err
}

func (p *CallRoute) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "toMid", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:toMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ToMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.toMid (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:toMid: ", p), err) }
  return err
}

func (p *CallRoute) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tunneling", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:tunneling: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Tunneling)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tunneling (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:tunneling: ", p), err) }
  return err
}

func (p *CallRoute) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "commParam", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:commParam: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CommParam)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.commParam (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:commParam: ", p), err) }
  return err
}

func (p *CallRoute) Equals(other *CallRoute) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.FromToken != other.FromToken { return false }
  if p.CallFlowType != other.CallFlowType { return false }
  if p.VoipAddress != other.VoipAddress { return false }
  if p.VoipUdpPort != other.VoipUdpPort { return false }
  if p.VoipTcpPort != other.VoipTcpPort { return false }
  if p.FromZone != other.FromZone { return false }
  if p.ToZone != other.ToZone { return false }
  if p.FakeCall != other.FakeCall { return false }
  if p.RingbackTone != other.RingbackTone { return false }
  if p.ToMid != other.ToMid { return false }
  if p.Tunneling != other.Tunneling { return false }
  if p.CommParam != other.CommParam { return false }
  return true
}

func (p *CallRoute) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CallRoute(%+v)", *p)
}

// Attributes:
//  - VoipAddress
//  - VoipUdpPort
//  - VoipTcpPort
//  - FromZone
//  - CommParam
//  - PolarisAddress
//  - PolarisUdpPort
//  - PolarisZone
//  - OrionAddress
//  - Token
//  - Cscf
//  - Mix
//  - HostMid
//  - Capabilities
//  - Proto
type GroupCallRoute struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  Cscf *CallHost `thrift:"cscf,2" db:"cscf" json:"cscf"`
  Mix *CallHost `thrift:"mix,3" db:"mix" json:"mix"`
  HostMid string `thrift:"hostMid,4" db:"hostMid" json:"hostMid"`
  Capabilities []string `thrift:"capabilities,5" db:"capabilities" json:"capabilities"`
  Proto GroupCallProtocol `thrift:"proto,6" db:"proto" json:"proto"`
  VoipAddress string `thrift:"voipAddress,7" db:"voipAddress" json:"voipAddress"`
  VoipUdpPort int32 `thrift:"voipUdpPort,8" db:"voipUdpPort" json:"voipUdpPort"`
  VoipTcpPort int32 `thrift:"voipTcpPort,9" db:"voipTcpPort" json:"voipTcpPort"`
  FromZone string `thrift:"fromZone,10" db:"fromZone" json:"fromZone"`
  CommParam string `thrift:"commParam,11" db:"commParam" json:"commParam"`
  PolarisAddress string `thrift:"polarisAddress,12" db:"polarisAddress" json:"polarisAddress"`
  PolarisUdpPort int32 `thrift:"polarisUdpPort,13" db:"polarisUdpPort" json:"polarisUdpPort"`
  PolarisZone string `thrift:"polarisZone,14" db:"polarisZone" json:"polarisZone"`
  OrionAddress string `thrift:"orionAddress,15" db:"orionAddress" json:"orionAddress"`
}

func NewGroupCallRoute() *GroupCallRoute {
  return &GroupCallRoute{}
}


func (p *GroupCallRoute) GetVoipAddress() string {
  return p.VoipAddress
}

func (p *GroupCallRoute) GetVoipUdpPort() int32 {
  return p.VoipUdpPort
}

func (p *GroupCallRoute) GetVoipTcpPort() int32 {
  return p.VoipTcpPort
}

func (p *GroupCallRoute) GetFromZone() string {
  return p.FromZone
}

func (p *GroupCallRoute) GetCommParam() string {
  return p.CommParam
}

func (p *GroupCallRoute) GetPolarisAddress() string {
  return p.PolarisAddress
}

func (p *GroupCallRoute) GetPolarisUdpPort() int32 {
  return p.PolarisUdpPort
}

func (p *GroupCallRoute) GetPolarisZone() string {
  return p.PolarisZone
}

func (p *GroupCallRoute) GetOrionAddress() string {
  return p.OrionAddress
}

func (p *GroupCallRoute) GetToken() string {
  return p.Token
}
var GroupCallRoute_Cscf_DEFAULT *CallHost
func (p *GroupCallRoute) GetCscf() *CallHost {
  if !p.IsSetCscf() {
    return GroupCallRoute_Cscf_DEFAULT
  }
return p.Cscf
}
var GroupCallRoute_Mix_DEFAULT *CallHost
func (p *GroupCallRoute) GetMix() *CallHost {
  if !p.IsSetMix() {
    return GroupCallRoute_Mix_DEFAULT
  }
return p.Mix
}

func (p *GroupCallRoute) GetHostMid() string {
  return p.HostMid
}

func (p *GroupCallRoute) GetCapabilities() []string {
  return p.Capabilities
}

func (p *GroupCallRoute) GetProto() GroupCallProtocol {
  return p.Proto
}
func (p *GroupCallRoute) IsSetCscf() bool {
  return p.Cscf != nil
}

func (p *GroupCallRoute) IsSetMix() bool {
  return p.Mix != nil
}

func (p *GroupCallRoute) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GroupCallRoute)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.VoipAddress = v
}
  return nil
}

func (p *GroupCallRoute)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.VoipUdpPort = v
}
  return nil
}

func (p *GroupCallRoute)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.VoipTcpPort = v
}
  return nil
}

func (p *GroupCallRoute)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.FromZone = v
}
  return nil
}

func (p *GroupCallRoute)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.CommParam = v
}
  return nil
}

func (p *GroupCallRoute)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.PolarisAddress = v
}
  return nil
}

func (p *GroupCallRoute)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.PolarisUdpPort = v
}
  return nil
}

func (p *GroupCallRoute)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.PolarisZone = v
}
  return nil
}

func (p *GroupCallRoute)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.OrionAddress = v
}
  return nil
}

func (p *GroupCallRoute)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *GroupCallRoute)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Cscf = &CallHost{}
  if err := p.Cscf.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Cscf), err)
  }
  return nil
}

func (p *GroupCallRoute)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Mix = &CallHost{}
  if err := p.Mix.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Mix), err)
  }
  return nil
}

func (p *GroupCallRoute)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.HostMid = v
}
  return nil
}

func (p *GroupCallRoute)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Capabilities =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.Capabilities = append(p.Capabilities, _elem0)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GroupCallRoute)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := GroupCallProtocol(v)
  p.Proto = temp
}
  return nil
}

func (p *GroupCallRoute) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GroupCallRoute"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GroupCallRoute) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *GroupCallRoute) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cscf", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cscf: ", p), err) }
  if err := p.Cscf.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Cscf), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cscf: ", p), err) }
  return err
}

func (p *GroupCallRoute) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mix", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mix: ", p), err) }
  if err := p.Mix.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Mix), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mix: ", p), err) }
  return err
}

func (p *GroupCallRoute) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hostMid", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:hostMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.HostMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hostMid (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:hostMid: ", p), err) }
  return err
}

func (p *GroupCallRoute) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "capabilities", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:capabilities: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Capabilities)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Capabilities {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:capabilities: ", p), err) }
  return err
}

func (p *GroupCallRoute) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "proto", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:proto: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Proto)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.proto (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:proto: ", p), err) }
  return err
}

func (p *GroupCallRoute) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "voipAddress", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:voipAddress: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.VoipAddress)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.voipAddress (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:voipAddress: ", p), err) }
  return err
}

func (p *GroupCallRoute) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "voipUdpPort", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:voipUdpPort: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VoipUdpPort)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.voipUdpPort (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:voipUdpPort: ", p), err) }
  return err
}

func (p *GroupCallRoute) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "voipTcpPort", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:voipTcpPort: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.VoipTcpPort)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.voipTcpPort (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:voipTcpPort: ", p), err) }
  return err
}

func (p *GroupCallRoute) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fromZone", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:fromZone: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.FromZone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromZone (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:fromZone: ", p), err) }
  return err
}

func (p *GroupCallRoute) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "commParam", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:commParam: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CommParam)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.commParam (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:commParam: ", p), err) }
  return err
}

func (p *GroupCallRoute) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "polarisAddress", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:polarisAddress: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PolarisAddress)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.polarisAddress (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:polarisAddress: ", p), err) }
  return err
}

func (p *GroupCallRoute) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "polarisUdpPort", thrift.I32, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:polarisUdpPort: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PolarisUdpPort)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.polarisUdpPort (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:polarisUdpPort: ", p), err) }
  return err
}

func (p *GroupCallRoute) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "polarisZone", thrift.STRING, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:polarisZone: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PolarisZone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.polarisZone (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:polarisZone: ", p), err) }
  return err
}

func (p *GroupCallRoute) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "orionAddress", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:orionAddress: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.OrionAddress)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.orionAddress (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:orionAddress: ", p), err) }
  return err
}

func (p *GroupCallRoute) Equals(other *GroupCallRoute) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Token != other.Token { return false }
  if !p.Cscf.Equals(other.Cscf) { return false }
  if !p.Mix.Equals(other.Mix) { return false }
  if p.HostMid != other.HostMid { return false }
  if len(p.Capabilities) != len(other.Capabilities) { return false }
  for i, _tgt := range p.Capabilities {
    _src1 := other.Capabilities[i]
    if _tgt != _src1 { return false }
  }
  if p.Proto != other.Proto { return false }
  if p.VoipAddress != other.VoipAddress { return false }
  if p.VoipUdpPort != other.VoipUdpPort { return false }
  if p.VoipTcpPort != other.VoipTcpPort { return false }
  if p.FromZone != other.FromZone { return false }
  if p.CommParam != other.CommParam { return false }
  if p.PolarisAddress != other.PolarisAddress { return false }
  if p.PolarisUdpPort != other.PolarisUdpPort { return false }
  if p.PolarisZone != other.PolarisZone { return false }
  if p.OrionAddress != other.OrionAddress { return false }
  return true
}

func (p *GroupCallRoute) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GroupCallRoute(%+v)", *p)
}

// Attributes:
//  - Online
//  - ChatMid
//  - HostMid
//  - MemberMids
//  - Started
//  - MediaType
//  - Protocol
type GroupCall struct {
  Online bool `thrift:"online,1" db:"online" json:"online"`
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
  HostMid string `thrift:"hostMid,3" db:"hostMid" json:"hostMid"`
  MemberMids []string `thrift:"memberMids,4" db:"memberMids" json:"memberMids"`
  Started int64 `thrift:"started,5" db:"started" json:"started"`
  MediaType GroupCallMediaType `thrift:"mediaType,6" db:"mediaType" json:"mediaType"`
  Protocol GroupCallProtocol `thrift:"protocol,7" db:"protocol" json:"protocol"`
}

func NewGroupCall() *GroupCall {
  return &GroupCall{}
}


func (p *GroupCall) GetOnline() bool {
  return p.Online
}

func (p *GroupCall) GetChatMid() string {
  return p.ChatMid
}

func (p *GroupCall) GetHostMid() string {
  return p.HostMid
}

func (p *GroupCall) GetMemberMids() []string {
  return p.MemberMids
}

func (p *GroupCall) GetStarted() int64 {
  return p.Started
}

func (p *GroupCall) GetMediaType() GroupCallMediaType {
  return p.MediaType
}

func (p *GroupCall) GetProtocol() GroupCallProtocol {
  return p.Protocol
}
func (p *GroupCall) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GroupCall)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Online = v
}
  return nil
}

func (p *GroupCall)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *GroupCall)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.HostMid = v
}
  return nil
}

func (p *GroupCall)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.MemberMids =  tSlice
  for i := 0; i < size; i ++ {
var _elem2 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem2 = v
}
    p.MemberMids = append(p.MemberMids, _elem2)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GroupCall)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Started = v
}
  return nil
}

func (p *GroupCall)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := GroupCallMediaType(v)
  p.MediaType = temp
}
  return nil
}

func (p *GroupCall)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := GroupCallProtocol(v)
  p.Protocol = temp
}
  return nil
}

func (p *GroupCall) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "GroupCall"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GroupCall) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "online", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:online: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Online)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.online (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:online: ", p), err) }
  return err
}

func (p *GroupCall) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *GroupCall) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hostMid", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hostMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.HostMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hostMid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hostMid: ", p), err) }
  return err
}

func (p *GroupCall) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "memberMids", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:memberMids: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.MemberMids)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.MemberMids {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:memberMids: ", p), err) }
  return err
}

func (p *GroupCall) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "started", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:started: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Started)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.started (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:started: ", p), err) }
  return err
}

func (p *GroupCall) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mediaType", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:mediaType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MediaType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mediaType (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:mediaType: ", p), err) }
  return err
}

func (p *GroupCall) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "protocol", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:protocol: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Protocol)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.protocol (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:protocol: ", p), err) }
  return err
}

func (p *GroupCall) Equals(other *GroupCall) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Online != other.Online { return false }
  if p.ChatMid != other.ChatMid { return false }
  if p.HostMid != other.HostMid { return false }
  if len(p.MemberMids) != len(other.MemberMids) { return false }
  for i, _tgt := range p.MemberMids {
    _src3 := other.MemberMids[i]
    if _tgt != _src3 { return false }
  }
  if p.Started != other.Started { return false }
  if p.MediaType != other.MediaType { return false }
  if p.Protocol != other.Protocol { return false }
  return true
}

func (p *GroupCall) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GroupCall(%+v)", *p)
}

// Attributes:
//  - Port
//  - Zone
type CallHost struct {
  // unused field # 1
  Port int32 `thrift:"port,2" db:"port" json:"port"`
  Zone string `thrift:"zone,3" db:"zone" json:"zone"`
}

func NewCallHost() *CallHost {
  return &CallHost{}
}


func (p *CallHost) GetPort() int32 {
  return p.Port
}

func (p *CallHost) GetZone() string {
  return p.Zone
}
func (p *CallHost) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CallHost)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Port = v
}
  return nil
}

func (p *CallHost)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Zone = v
}
  return nil
}

func (p *CallHost) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "CallHost"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CallHost) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "port", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:port: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Port)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.port (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:port: ", p), err) }
  return err
}

func (p *CallHost) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "zone", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:zone: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Zone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.zone (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:zone: ", p), err) }
  return err
}

func (p *CallHost) Equals(other *CallHost) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Port != other.Port { return false }
  if p.Zone != other.Zone { return false }
  return true
}

func (p *CallHost) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CallHost(%+v)", *p)
}

type CallService interface {
  // Parameters:
  //  - To
  //  - CallType
  //  - FromEnvInfo
  AcquireCallRoute(ctx context.Context, to string, callType FreeCallType, fromEnvInfo map[string]string) (_r *CallRoute, _err error)
  // Parameters:
  //  - ChatMid
  //  - MediaType
  //  - IsInitialHost
  //  - Capabilities
  AcquireGroupCallRoute(ctx context.Context, chatMid string, mediaType GroupCallMediaType, isInitialHost bool, capabilities []string) (_r *GroupCallRoute, _err error)
  // Parameters:
  //  - ChatMid
  GetGroupCall(ctx context.Context, chatMid string) (_r *GroupCall, _err error)
}

type CallServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewCallServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *CallServiceClient {
  return &CallServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewCallServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *CallServiceClient {
  return &CallServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewCallServiceClient(c thrift.TClient) *CallServiceClient {
  return &CallServiceClient{
    c: c,
  }
}

func (p *CallServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *CallServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *CallServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - To
//  - CallType
//  - FromEnvInfo
func (p *CallServiceClient) AcquireCallRoute(ctx context.Context, to string, callType FreeCallType, fromEnvInfo map[string]string) (_r *CallRoute, _err error) {
  var _args4 CallServiceAcquireCallRouteArgs
  _args4.To = to
  _args4.CallType = callType
  _args4.FromEnvInfo = fromEnvInfo
  var _result6 CallServiceAcquireCallRouteResult
  var _meta5 thrift.ResponseMeta
  _meta5, _err = p.Client_().Call(ctx, "acquireCallRoute", &_args4, &_result6)
  p.SetLastResponseMeta_(_meta5)
  if _err != nil {
    return
  }
  switch {
  case _result6.E!= nil:
    return _r, _result6.E
  }

  return _result6.GetSuccess(), nil
}

// Parameters:
//  - ChatMid
//  - MediaType
//  - IsInitialHost
//  - Capabilities
func (p *CallServiceClient) AcquireGroupCallRoute(ctx context.Context, chatMid string, mediaType GroupCallMediaType, isInitialHost bool, capabilities []string) (_r *GroupCallRoute, _err error) {
  var _args7 CallServiceAcquireGroupCallRouteArgs
  _args7.ChatMid = chatMid
  _args7.MediaType = mediaType
  _args7.IsInitialHost = isInitialHost
  _args7.Capabilities = capabilities
  var _result9 CallServiceAcquireGroupCallRouteResult
  var _meta8 thrift.ResponseMeta
  _meta8, _err = p.Client_().Call(ctx, "acquireGroupCallRoute", &_args7, &_result9)
  p.SetLastResponseMeta_(_meta8)
  if _err != nil {
    return
  }
  switch {
  case _result9.E!= nil:
    return _r, _result9.E
  }

  return _result9.GetSuccess(), nil
}

// Parameters:
//  - ChatMid
func (p *CallServiceClient) GetGroupCall(ctx context.Context, chatMid string) (_r *GroupCall, _err error) {
  var _args10 CallServiceGetGroupCallArgs
  _args10.ChatMid = chatMid
  var _result12 CallServiceGetGroupCallResult
  var _meta11 thrift.ResponseMeta
  _meta11, _err = p.Client_().Call(ctx, "getGroupCall", &_args10, &_result12)
  p.SetLastResponseMeta_(_meta11)
  if _err != nil {
    return
  }
  switch {
  case _result12.E!= nil:
    return _r, _result12.E
  }

  return _result12.GetSuccess(), nil
}

type CallServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler CallService
}

func (p *CallServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *CallServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *CallServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewCallServiceProcessor(handler CallService) *CallServiceProcessor {

  self13 := &CallServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self13.processorMap["acquireCallRoute"] = &callServiceProcessorAcquireCallRoute{handler:handler}
  self13.processorMap["acquireGroupCallRoute"] = &callServiceProcessorAcquireGroupCallRoute{handler:handler}
  self13.processorMap["getGroupCall"] = &callServiceProcessorGetGroupCall{handler:handler}
return self13
}

func (p *CallServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x14 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x14.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x14

}

type callServiceProcessorAcquireCallRoute struct {
  handler CallService
}

func (p *callServiceProcessorAcquireCallRoute) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CallServiceAcquireCallRouteArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "acquireCallRoute", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := CallServiceAcquireCallRouteResult{}
  var retval *CallRoute
  if retval, err2 = p.handler.AcquireCallRoute(ctx, args.To, args.CallType, args.FromEnvInfo); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *talkservice.TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing acquireCallRoute: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "acquireCallRoute", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "acquireCallRoute", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type callServiceProcessorAcquireGroupCallRoute struct {
  handler CallService
}

func (p *callServiceProcessorAcquireGroupCallRoute) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CallServiceAcquireGroupCallRouteArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "acquireGroupCallRoute", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := CallServiceAcquireGroupCallRouteResult{}
  var retval *GroupCallRoute
  if retval, err2 = p.handler.AcquireGroupCallRoute(ctx, args.ChatMid, args.MediaType, args.IsInitialHost, args.Capabilities); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *talkservice.TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing acquireGroupCallRoute: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "acquireGroupCallRoute", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "acquireGroupCallRoute", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type callServiceProcessorGetGroupCall struct {
  handler CallService
}

func (p *callServiceProcessorGetGroupCall) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CallServiceGetGroupCallArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getGroupCall", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := CallServiceGetGroupCallResult{}
  var retval *GroupCall
  if retval, err2 = p.handler.GetGroupCall(ctx, args.ChatMid); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *talkservice.TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getGroupCall: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getGroupCall", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getGroupCall", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - To
//  - CallType
//  - FromEnvInfo
type CallServiceAcquireCallRouteArgs struct {
  // unused field # 1
  To string `thrift:"to,2" db:"to" json:"to"`
  CallType FreeCallType `thrift:"callType,3" db:"callType" json:"callType"`
  FromEnvInfo map[string]string `thrift:"fromEnvInfo,4" db:"fromEnvInfo" json:"fromEnvInfo"`
}

func NewCallServiceAcquireCallRouteArgs() *CallServiceAcquireCallRouteArgs {
  return &CallServiceAcquireCallRouteArgs{}
}


func (p *CallServiceAcquireCallRouteArgs) GetTo() string {
  return p.To
}

func (p *CallServiceAcquireCallRouteArgs) GetCallType() FreeCallType {
  return p.CallType
}

func (p *CallServiceAcquireCallRouteArgs) GetFromEnvInfo() map[string]string {
  return p.FromEnvInfo
}
func (p *CallServiceAcquireCallRouteArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CallServiceAcquireCallRouteArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.To = v
}
  return nil
}

func (p *CallServiceAcquireCallRouteArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := FreeCallType(v)
  p.CallType = temp
}
  return nil
}

func (p *CallServiceAcquireCallRouteArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.FromEnvInfo =  tMap
  for i := 0; i < size; i ++ {
var _key15 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key15 = v
}
var _val16 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val16 = v
}
    p.FromEnvInfo[_key15] = _val16
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *CallServiceAcquireCallRouteArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "acquireCallRoute_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CallServiceAcquireCallRouteArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "to", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:to: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.To)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.to (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:to: ", p), err) }
  return err
}

func (p *CallServiceAcquireCallRouteArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "callType", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:callType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.CallType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.callType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:callType: ", p), err) }
  return err
}

func (p *CallServiceAcquireCallRouteArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fromEnvInfo", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:fromEnvInfo: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.FromEnvInfo)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.FromEnvInfo {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:fromEnvInfo: ", p), err) }
  return err
}

func (p *CallServiceAcquireCallRouteArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CallServiceAcquireCallRouteArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type CallServiceAcquireCallRouteResult struct {
  Success *CallRoute `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *talkservice.TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewCallServiceAcquireCallRouteResult() *CallServiceAcquireCallRouteResult {
  return &CallServiceAcquireCallRouteResult{}
}

var CallServiceAcquireCallRouteResult_Success_DEFAULT *CallRoute
func (p *CallServiceAcquireCallRouteResult) GetSuccess() *CallRoute {
  if !p.IsSetSuccess() {
    return CallServiceAcquireCallRouteResult_Success_DEFAULT
  }
return p.Success
}
var CallServiceAcquireCallRouteResult_E_DEFAULT *talkservice.TalkException
func (p *CallServiceAcquireCallRouteResult) GetE() *talkservice.TalkException {
  if !p.IsSetE() {
    return CallServiceAcquireCallRouteResult_E_DEFAULT
  }
return p.E
}
func (p *CallServiceAcquireCallRouteResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CallServiceAcquireCallRouteResult) IsSetE() bool {
  return p.E != nil
}

func (p *CallServiceAcquireCallRouteResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CallServiceAcquireCallRouteResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &CallRoute{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *CallServiceAcquireCallRouteResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &talkservice.TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *CallServiceAcquireCallRouteResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "acquireCallRoute_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CallServiceAcquireCallRouteResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CallServiceAcquireCallRouteResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *CallServiceAcquireCallRouteResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CallServiceAcquireCallRouteResult(%+v)", *p)
}

// Attributes:
//  - ChatMid
//  - MediaType
//  - IsInitialHost
//  - Capabilities
type CallServiceAcquireGroupCallRouteArgs struct {
  // unused field # 1
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
  MediaType GroupCallMediaType `thrift:"mediaType,3" db:"mediaType" json:"mediaType"`
  IsInitialHost bool `thrift:"isInitialHost,4" db:"isInitialHost" json:"isInitialHost"`
  Capabilities []string `thrift:"capabilities,5" db:"capabilities" json:"capabilities"`
}

func NewCallServiceAcquireGroupCallRouteArgs() *CallServiceAcquireGroupCallRouteArgs {
  return &CallServiceAcquireGroupCallRouteArgs{}
}


func (p *CallServiceAcquireGroupCallRouteArgs) GetChatMid() string {
  return p.ChatMid
}

func (p *CallServiceAcquireGroupCallRouteArgs) GetMediaType() GroupCallMediaType {
  return p.MediaType
}

func (p *CallServiceAcquireGroupCallRouteArgs) GetIsInitialHost() bool {
  return p.IsInitialHost
}

func (p *CallServiceAcquireGroupCallRouteArgs) GetCapabilities() []string {
  return p.Capabilities
}
func (p *CallServiceAcquireGroupCallRouteArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CallServiceAcquireGroupCallRouteArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *CallServiceAcquireGroupCallRouteArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := GroupCallMediaType(v)
  p.MediaType = temp
}
  return nil
}

func (p *CallServiceAcquireGroupCallRouteArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IsInitialHost = v
}
  return nil
}

func (p *CallServiceAcquireGroupCallRouteArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Capabilities =  tSlice
  for i := 0; i < size; i ++ {
var _elem17 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem17 = v
}
    p.Capabilities = append(p.Capabilities, _elem17)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CallServiceAcquireGroupCallRouteArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "acquireGroupCallRoute_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CallServiceAcquireGroupCallRouteArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *CallServiceAcquireGroupCallRouteArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mediaType", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mediaType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MediaType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mediaType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mediaType: ", p), err) }
  return err
}

func (p *CallServiceAcquireGroupCallRouteArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "isInitialHost", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:isInitialHost: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IsInitialHost)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isInitialHost (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:isInitialHost: ", p), err) }
  return err
}

func (p *CallServiceAcquireGroupCallRouteArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "capabilities", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:capabilities: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Capabilities)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Capabilities {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:capabilities: ", p), err) }
  return err
}

func (p *CallServiceAcquireGroupCallRouteArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CallServiceAcquireGroupCallRouteArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type CallServiceAcquireGroupCallRouteResult struct {
  Success *GroupCallRoute `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *talkservice.TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewCallServiceAcquireGroupCallRouteResult() *CallServiceAcquireGroupCallRouteResult {
  return &CallServiceAcquireGroupCallRouteResult{}
}

var CallServiceAcquireGroupCallRouteResult_Success_DEFAULT *GroupCallRoute
func (p *CallServiceAcquireGroupCallRouteResult) GetSuccess() *GroupCallRoute {
  if !p.IsSetSuccess() {
    return CallServiceAcquireGroupCallRouteResult_Success_DEFAULT
  }
return p.Success
}
var CallServiceAcquireGroupCallRouteResult_E_DEFAULT *talkservice.TalkException
func (p *CallServiceAcquireGroupCallRouteResult) GetE() *talkservice.TalkException {
  if !p.IsSetE() {
    return CallServiceAcquireGroupCallRouteResult_E_DEFAULT
  }
return p.E
}
func (p *CallServiceAcquireGroupCallRouteResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CallServiceAcquireGroupCallRouteResult) IsSetE() bool {
  return p.E != nil
}

func (p *CallServiceAcquireGroupCallRouteResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CallServiceAcquireGroupCallRouteResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GroupCallRoute{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *CallServiceAcquireGroupCallRouteResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &talkservice.TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *CallServiceAcquireGroupCallRouteResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "acquireGroupCallRoute_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CallServiceAcquireGroupCallRouteResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CallServiceAcquireGroupCallRouteResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *CallServiceAcquireGroupCallRouteResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CallServiceAcquireGroupCallRouteResult(%+v)", *p)
}

// Attributes:
//  - ChatMid
type CallServiceGetGroupCallArgs struct {
  // unused field # 1
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
}

func NewCallServiceGetGroupCallArgs() *CallServiceGetGroupCallArgs {
  return &CallServiceGetGroupCallArgs{}
}


func (p *CallServiceGetGroupCallArgs) GetChatMid() string {
  return p.ChatMid
}
func (p *CallServiceGetGroupCallArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CallServiceGetGroupCallArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *CallServiceGetGroupCallArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getGroupCall_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CallServiceGetGroupCallArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *CallServiceGetGroupCallArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CallServiceGetGroupCallArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type CallServiceGetGroupCallResult struct {
  Success *GroupCall `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *talkservice.TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewCallServiceGetGroupCallResult() *CallServiceGetGroupCallResult {
  return &CallServiceGetGroupCallResult{}
}

var CallServiceGetGroupCallResult_Success_DEFAULT *GroupCall
func (p *CallServiceGetGroupCallResult) GetSuccess() *GroupCall {
  if !p.IsSetSuccess() {
    return CallServiceGetGroupCallResult_Success_DEFAULT
  }
return p.Success
}
var CallServiceGetGroupCallResult_E_DEFAULT *talkservice.TalkException
func (p *CallServiceGetGroupCallResult) GetE() *talkservice.TalkException {
  if !p.IsSetE() {
    return CallServiceGetGroupCallResult_E_DEFAULT
  }
return p.E
}
func (p *CallServiceGetGroupCallResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CallServiceGetGroupCallResult) IsSetE() bool {
  return p.E != nil
}

func (p *CallServiceGetGroupCallResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CallServiceGetGroupCallResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &GroupCall{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *CallServiceGetGroupCallResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &talkservice.TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *CallServiceGetGroupCallResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getGroupCall_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CallServiceGetGroupCallResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CallServiceGetGroupCallResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *CallServiceGetGroupCallResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CallServiceGetGroupCallResult(%+v)", *p)
}


