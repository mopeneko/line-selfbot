// Code generated by Thrift Compiler (0.14.1). DO NOT EDIT.

package shopservice

import(
	"bytes"
	"context"
	"fmt"
	"time"
	"github.com/apache/thrift/lib/go/thrift"
	"talkservice"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

var _ = talkservice.GoUnusedProtection__
// Attributes:
//  - Start
//  - Size
type StickerIdRange struct {
  Start int64 `thrift:"start,1" db:"start" json:"start"`
  Size int32 `thrift:"size,2" db:"size" json:"size"`
}

func NewStickerIdRange() *StickerIdRange {
  return &StickerIdRange{}
}


func (p *StickerIdRange) GetStart() int64 {
  return p.Start
}

func (p *StickerIdRange) GetSize() int32 {
  return p.Size
}
func (p *StickerIdRange) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StickerIdRange)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Start = v
}
  return nil
}

func (p *StickerIdRange)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Size = v
}
  return nil
}

func (p *StickerIdRange) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "StickerIdRange"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StickerIdRange) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "start", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:start: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Start)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:start: ", p), err) }
  return err
}

func (p *StickerIdRange) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "size", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:size: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:size: ", p), err) }
  return err
}

func (p *StickerIdRange) Equals(other *StickerIdRange) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Start != other.Start { return false }
  if p.Size != other.Size { return false }
  return true
}

func (p *StickerIdRange) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StickerIdRange(%+v)", *p)
}

// Attributes:
//  - ProductId
//  - PackageId
//  - Version
//  - OnSale
//  - ValidUntil
//  - StickerIdRanges
//  - GrantedByDefault
//  - DisplayOrder
type ProductSimple struct {
  ProductId string `thrift:"productId,1" db:"productId" json:"productId"`
  PackageId int64 `thrift:"packageId,2" db:"packageId" json:"packageId"`
  Version int64 `thrift:"version,3" db:"version" json:"version"`
  OnSale bool `thrift:"onSale,4" db:"onSale" json:"onSale"`
  ValidUntil int64 `thrift:"validUntil,5" db:"validUntil" json:"validUntil"`
  // unused fields # 6 to 9
  StickerIdRanges []*StickerIdRange `thrift:"stickerIdRanges,10" db:"stickerIdRanges" json:"stickerIdRanges"`
  // unused fields # 11 to 40
  GrantedByDefault bool `thrift:"grantedByDefault,41" db:"grantedByDefault" json:"grantedByDefault"`
  DisplayOrder int32 `thrift:"displayOrder,42" db:"displayOrder" json:"displayOrder"`
}

func NewProductSimple() *ProductSimple {
  return &ProductSimple{}
}


func (p *ProductSimple) GetProductId() string {
  return p.ProductId
}

func (p *ProductSimple) GetPackageId() int64 {
  return p.PackageId
}

func (p *ProductSimple) GetVersion() int64 {
  return p.Version
}

func (p *ProductSimple) GetOnSale() bool {
  return p.OnSale
}

func (p *ProductSimple) GetValidUntil() int64 {
  return p.ValidUntil
}

func (p *ProductSimple) GetStickerIdRanges() []*StickerIdRange {
  return p.StickerIdRanges
}

func (p *ProductSimple) GetGrantedByDefault() bool {
  return p.GrantedByDefault
}

func (p *ProductSimple) GetDisplayOrder() int32 {
  return p.DisplayOrder
}
func (p *ProductSimple) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 41:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField41(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 42:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField42(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ProductSimple)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ProductId = v
}
  return nil
}

func (p *ProductSimple)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PackageId = v
}
  return nil
}

func (p *ProductSimple)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Version = v
}
  return nil
}

func (p *ProductSimple)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.OnSale = v
}
  return nil
}

func (p *ProductSimple)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ValidUntil = v
}
  return nil
}

func (p *ProductSimple)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*StickerIdRange, 0, size)
  p.StickerIdRanges =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &StickerIdRange{}
    if err := _elem0.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.StickerIdRanges = append(p.StickerIdRanges, _elem0)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ProductSimple)  ReadField41(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 41: ", err)
} else {
  p.GrantedByDefault = v
}
  return nil
}

func (p *ProductSimple)  ReadField42(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 42: ", err)
} else {
  p.DisplayOrder = v
}
  return nil
}

func (p *ProductSimple) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ProductSimple"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField41(ctx, oprot); err != nil { return err }
    if err := p.writeField42(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ProductSimple) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "productId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:productId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ProductId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.productId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:productId: ", p), err) }
  return err
}

func (p *ProductSimple) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "packageId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:packageId: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.PackageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.packageId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:packageId: ", p), err) }
  return err
}

func (p *ProductSimple) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "version", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:version: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:version: ", p), err) }
  return err
}

func (p *ProductSimple) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "onSale", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:onSale: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.OnSale)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.onSale (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:onSale: ", p), err) }
  return err
}

func (p *ProductSimple) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "validUntil", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:validUntil: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ValidUntil)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.validUntil (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:validUntil: ", p), err) }
  return err
}

func (p *ProductSimple) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "stickerIdRanges", thrift.LIST, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:stickerIdRanges: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.StickerIdRanges)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.StickerIdRanges {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:stickerIdRanges: ", p), err) }
  return err
}

func (p *ProductSimple) writeField41(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "grantedByDefault", thrift.BOOL, 41); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 41:grantedByDefault: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.GrantedByDefault)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.grantedByDefault (41) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 41:grantedByDefault: ", p), err) }
  return err
}

func (p *ProductSimple) writeField42(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "displayOrder", thrift.I32, 42); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 42:displayOrder: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.DisplayOrder)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.displayOrder (42) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 42:displayOrder: ", p), err) }
  return err
}

func (p *ProductSimple) Equals(other *ProductSimple) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ProductId != other.ProductId { return false }
  if p.PackageId != other.PackageId { return false }
  if p.Version != other.Version { return false }
  if p.OnSale != other.OnSale { return false }
  if p.ValidUntil != other.ValidUntil { return false }
  if len(p.StickerIdRanges) != len(other.StickerIdRanges) { return false }
  for i, _tgt := range p.StickerIdRanges {
    _src1 := other.StickerIdRanges[i]
    if !_tgt.Equals(_src1) { return false }
  }
  if p.GrantedByDefault != other.GrantedByDefault { return false }
  if p.DisplayOrder != other.DisplayOrder { return false }
  return true
}

func (p *ProductSimple) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProductSimple(%+v)", *p)
}

// Attributes:
//  - HasNext
//  - ReinvokeHour
//  - LastVersionSeq
//  - ProductList
//  - RecentNewReleaseDate
//  - RecentEventReleaseDate
type ProductSimpleList struct {
  HasNext bool `thrift:"hasNext,1" db:"hasNext" json:"hasNext"`
  ReinvokeHour int32 `thrift:"reinvokeHour,2" db:"reinvokeHour" json:"reinvokeHour"`
  LastVersionSeq int64 `thrift:"lastVersionSeq,3" db:"lastVersionSeq" json:"lastVersionSeq"`
  ProductList []*ProductSimple `thrift:"productList,4" db:"productList" json:"productList"`
  RecentNewReleaseDate int64 `thrift:"recentNewReleaseDate,5" db:"recentNewReleaseDate" json:"recentNewReleaseDate"`
  RecentEventReleaseDate int64 `thrift:"recentEventReleaseDate,6" db:"recentEventReleaseDate" json:"recentEventReleaseDate"`
}

func NewProductSimpleList() *ProductSimpleList {
  return &ProductSimpleList{}
}


func (p *ProductSimpleList) GetHasNext() bool {
  return p.HasNext
}

func (p *ProductSimpleList) GetReinvokeHour() int32 {
  return p.ReinvokeHour
}

func (p *ProductSimpleList) GetLastVersionSeq() int64 {
  return p.LastVersionSeq
}

func (p *ProductSimpleList) GetProductList() []*ProductSimple {
  return p.ProductList
}

func (p *ProductSimpleList) GetRecentNewReleaseDate() int64 {
  return p.RecentNewReleaseDate
}

func (p *ProductSimpleList) GetRecentEventReleaseDate() int64 {
  return p.RecentEventReleaseDate
}
func (p *ProductSimpleList) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ProductSimpleList)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.HasNext = v
}
  return nil
}

func (p *ProductSimpleList)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ReinvokeHour = v
}
  return nil
}

func (p *ProductSimpleList)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LastVersionSeq = v
}
  return nil
}

func (p *ProductSimpleList)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ProductSimple, 0, size)
  p.ProductList =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := &ProductSimple{}
    if err := _elem2.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.ProductList = append(p.ProductList, _elem2)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ProductSimpleList)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.RecentNewReleaseDate = v
}
  return nil
}

func (p *ProductSimpleList)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.RecentEventReleaseDate = v
}
  return nil
}

func (p *ProductSimpleList) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ProductSimpleList"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ProductSimpleList) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hasNext", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hasNext: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.HasNext)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hasNext (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hasNext: ", p), err) }
  return err
}

func (p *ProductSimpleList) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reinvokeHour", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:reinvokeHour: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReinvokeHour)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reinvokeHour (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:reinvokeHour: ", p), err) }
  return err
}

func (p *ProductSimpleList) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastVersionSeq", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lastVersionSeq: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LastVersionSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastVersionSeq (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lastVersionSeq: ", p), err) }
  return err
}

func (p *ProductSimpleList) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "productList", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:productList: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ProductList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ProductList {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:productList: ", p), err) }
  return err
}

func (p *ProductSimpleList) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "recentNewReleaseDate", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:recentNewReleaseDate: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RecentNewReleaseDate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.recentNewReleaseDate (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:recentNewReleaseDate: ", p), err) }
  return err
}

func (p *ProductSimpleList) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "recentEventReleaseDate", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:recentEventReleaseDate: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RecentEventReleaseDate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.recentEventReleaseDate (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:recentEventReleaseDate: ", p), err) }
  return err
}

func (p *ProductSimpleList) Equals(other *ProductSimpleList) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.HasNext != other.HasNext { return false }
  if p.ReinvokeHour != other.ReinvokeHour { return false }
  if p.LastVersionSeq != other.LastVersionSeq { return false }
  if len(p.ProductList) != len(other.ProductList) { return false }
  for i, _tgt := range p.ProductList {
    _src3 := other.ProductList[i]
    if !_tgt.Equals(_src3) { return false }
  }
  if p.RecentNewReleaseDate != other.RecentNewReleaseDate { return false }
  if p.RecentEventReleaseDate != other.RecentEventReleaseDate { return false }
  return true
}

func (p *ProductSimpleList) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProductSimpleList(%+v)", *p)
}

type ShopService interface {
  // Parameters:
  //  - PackageId
  //  - Language
  NotifyDownloaded(ctx context.Context, packageId int64, language string) (_r int64, _err error)
  // Parameters:
  //  - Start
  //  - Size
  //  - Language
  //  - Country
  GetActivePurchaseVersions(ctx context.Context, start int64, size int32, language string, country string) (_r *ProductSimpleList, _err error)
}

type ShopServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewShopServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ShopServiceClient {
  return &ShopServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewShopServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ShopServiceClient {
  return &ShopServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewShopServiceClient(c thrift.TClient) *ShopServiceClient {
  return &ShopServiceClient{
    c: c,
  }
}

func (p *ShopServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *ShopServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *ShopServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - PackageId
//  - Language
func (p *ShopServiceClient) NotifyDownloaded(ctx context.Context, packageId int64, language string) (_r int64, _err error) {
  var _args4 ShopServiceNotifyDownloadedArgs
  _args4.PackageId = packageId
  _args4.Language = language
  var _result6 ShopServiceNotifyDownloadedResult
  var _meta5 thrift.ResponseMeta
  _meta5, _err = p.Client_().Call(ctx, "notifyDownloaded", &_args4, &_result6)
  p.SetLastResponseMeta_(_meta5)
  if _err != nil {
    return
  }
  switch {
  case _result6.E!= nil:
    return _r, _result6.E
  }

  return _result6.GetSuccess(), nil
}

// Parameters:
//  - Start
//  - Size
//  - Language
//  - Country
func (p *ShopServiceClient) GetActivePurchaseVersions(ctx context.Context, start int64, size int32, language string, country string) (_r *ProductSimpleList, _err error) {
  var _args7 ShopServiceGetActivePurchaseVersionsArgs
  _args7.Start = start
  _args7.Size = size
  _args7.Language = language
  _args7.Country = country
  var _result9 ShopServiceGetActivePurchaseVersionsResult
  var _meta8 thrift.ResponseMeta
  _meta8, _err = p.Client_().Call(ctx, "getActivePurchaseVersions", &_args7, &_result9)
  p.SetLastResponseMeta_(_meta8)
  if _err != nil {
    return
  }
  switch {
  case _result9.E!= nil:
    return _r, _result9.E
  }

  return _result9.GetSuccess(), nil
}

type ShopServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler ShopService
}

func (p *ShopServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *ShopServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *ShopServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewShopServiceProcessor(handler ShopService) *ShopServiceProcessor {

  self10 := &ShopServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self10.processorMap["notifyDownloaded"] = &shopServiceProcessorNotifyDownloaded{handler:handler}
  self10.processorMap["getActivePurchaseVersions"] = &shopServiceProcessorGetActivePurchaseVersions{handler:handler}
return self10
}

func (p *ShopServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x11 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x11.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x11

}

type shopServiceProcessorNotifyDownloaded struct {
  handler ShopService
}

func (p *shopServiceProcessorNotifyDownloaded) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ShopServiceNotifyDownloadedArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "notifyDownloaded", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ShopServiceNotifyDownloadedResult{}
  var retval int64
  if retval, err2 = p.handler.NotifyDownloaded(ctx, args.PackageId, args.Language); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *talkservice.TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing notifyDownloaded: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "notifyDownloaded", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "notifyDownloaded", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type shopServiceProcessorGetActivePurchaseVersions struct {
  handler ShopService
}

func (p *shopServiceProcessorGetActivePurchaseVersions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ShopServiceGetActivePurchaseVersionsArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getActivePurchaseVersions", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ShopServiceGetActivePurchaseVersionsResult{}
  var retval *ProductSimpleList
  if retval, err2 = p.handler.GetActivePurchaseVersions(ctx, args.Start, args.Size, args.Language, args.Country); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *talkservice.TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getActivePurchaseVersions: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getActivePurchaseVersions", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getActivePurchaseVersions", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - PackageId
//  - Language
type ShopServiceNotifyDownloadedArgs struct {
  // unused field # 1
  PackageId int64 `thrift:"packageId,2" db:"packageId" json:"packageId"`
  Language string `thrift:"language,3" db:"language" json:"language"`
}

func NewShopServiceNotifyDownloadedArgs() *ShopServiceNotifyDownloadedArgs {
  return &ShopServiceNotifyDownloadedArgs{}
}


func (p *ShopServiceNotifyDownloadedArgs) GetPackageId() int64 {
  return p.PackageId
}

func (p *ShopServiceNotifyDownloadedArgs) GetLanguage() string {
  return p.Language
}
func (p *ShopServiceNotifyDownloadedArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ShopServiceNotifyDownloadedArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PackageId = v
}
  return nil
}

func (p *ShopServiceNotifyDownloadedArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Language = v
}
  return nil
}

func (p *ShopServiceNotifyDownloadedArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "notifyDownloaded_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ShopServiceNotifyDownloadedArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "packageId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:packageId: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.PackageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.packageId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:packageId: ", p), err) }
  return err
}

func (p *ShopServiceNotifyDownloadedArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "language", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:language: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Language)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.language (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:language: ", p), err) }
  return err
}

func (p *ShopServiceNotifyDownloadedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ShopServiceNotifyDownloadedArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type ShopServiceNotifyDownloadedResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *talkservice.TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewShopServiceNotifyDownloadedResult() *ShopServiceNotifyDownloadedResult {
  return &ShopServiceNotifyDownloadedResult{}
}

var ShopServiceNotifyDownloadedResult_Success_DEFAULT int64
func (p *ShopServiceNotifyDownloadedResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return ShopServiceNotifyDownloadedResult_Success_DEFAULT
  }
return *p.Success
}
var ShopServiceNotifyDownloadedResult_E_DEFAULT *talkservice.TalkException
func (p *ShopServiceNotifyDownloadedResult) GetE() *talkservice.TalkException {
  if !p.IsSetE() {
    return ShopServiceNotifyDownloadedResult_E_DEFAULT
  }
return p.E
}
func (p *ShopServiceNotifyDownloadedResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ShopServiceNotifyDownloadedResult) IsSetE() bool {
  return p.E != nil
}

func (p *ShopServiceNotifyDownloadedResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ShopServiceNotifyDownloadedResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ShopServiceNotifyDownloadedResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &talkservice.TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *ShopServiceNotifyDownloadedResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "notifyDownloaded_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ShopServiceNotifyDownloadedResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ShopServiceNotifyDownloadedResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *ShopServiceNotifyDownloadedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ShopServiceNotifyDownloadedResult(%+v)", *p)
}

// Attributes:
//  - Start
//  - Size
//  - Language
//  - Country
type ShopServiceGetActivePurchaseVersionsArgs struct {
  // unused field # 1
  Start int64 `thrift:"start,2" db:"start" json:"start"`
  Size int32 `thrift:"size,3" db:"size" json:"size"`
  Language string `thrift:"language,4" db:"language" json:"language"`
  Country string `thrift:"country,5" db:"country" json:"country"`
}

func NewShopServiceGetActivePurchaseVersionsArgs() *ShopServiceGetActivePurchaseVersionsArgs {
  return &ShopServiceGetActivePurchaseVersionsArgs{}
}


func (p *ShopServiceGetActivePurchaseVersionsArgs) GetStart() int64 {
  return p.Start
}

func (p *ShopServiceGetActivePurchaseVersionsArgs) GetSize() int32 {
  return p.Size
}

func (p *ShopServiceGetActivePurchaseVersionsArgs) GetLanguage() string {
  return p.Language
}

func (p *ShopServiceGetActivePurchaseVersionsArgs) GetCountry() string {
  return p.Country
}
func (p *ShopServiceGetActivePurchaseVersionsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ShopServiceGetActivePurchaseVersionsArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Start = v
}
  return nil
}

func (p *ShopServiceGetActivePurchaseVersionsArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Size = v
}
  return nil
}

func (p *ShopServiceGetActivePurchaseVersionsArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Language = v
}
  return nil
}

func (p *ShopServiceGetActivePurchaseVersionsArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Country = v
}
  return nil
}

func (p *ShopServiceGetActivePurchaseVersionsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getActivePurchaseVersions_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ShopServiceGetActivePurchaseVersionsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "start", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:start: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Start)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:start: ", p), err) }
  return err
}

func (p *ShopServiceGetActivePurchaseVersionsArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "size", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:size: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:size: ", p), err) }
  return err
}

func (p *ShopServiceGetActivePurchaseVersionsArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "language", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:language: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Language)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.language (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:language: ", p), err) }
  return err
}

func (p *ShopServiceGetActivePurchaseVersionsArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "country", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:country: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Country)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.country (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:country: ", p), err) }
  return err
}

func (p *ShopServiceGetActivePurchaseVersionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ShopServiceGetActivePurchaseVersionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type ShopServiceGetActivePurchaseVersionsResult struct {
  Success *ProductSimpleList `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *talkservice.TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewShopServiceGetActivePurchaseVersionsResult() *ShopServiceGetActivePurchaseVersionsResult {
  return &ShopServiceGetActivePurchaseVersionsResult{}
}

var ShopServiceGetActivePurchaseVersionsResult_Success_DEFAULT *ProductSimpleList
func (p *ShopServiceGetActivePurchaseVersionsResult) GetSuccess() *ProductSimpleList {
  if !p.IsSetSuccess() {
    return ShopServiceGetActivePurchaseVersionsResult_Success_DEFAULT
  }
return p.Success
}
var ShopServiceGetActivePurchaseVersionsResult_E_DEFAULT *talkservice.TalkException
func (p *ShopServiceGetActivePurchaseVersionsResult) GetE() *talkservice.TalkException {
  if !p.IsSetE() {
    return ShopServiceGetActivePurchaseVersionsResult_E_DEFAULT
  }
return p.E
}
func (p *ShopServiceGetActivePurchaseVersionsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ShopServiceGetActivePurchaseVersionsResult) IsSetE() bool {
  return p.E != nil
}

func (p *ShopServiceGetActivePurchaseVersionsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ShopServiceGetActivePurchaseVersionsResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ProductSimpleList{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ShopServiceGetActivePurchaseVersionsResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &talkservice.TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *ShopServiceGetActivePurchaseVersionsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getActivePurchaseVersions_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ShopServiceGetActivePurchaseVersionsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ShopServiceGetActivePurchaseVersionsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *ShopServiceGetActivePurchaseVersionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ShopServiceGetActivePurchaseVersionsResult(%+v)", *p)
}


